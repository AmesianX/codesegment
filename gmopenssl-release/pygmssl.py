# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pygmssl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pygmssl')
    _pygmssl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygmssl', [dirname(__file__)])
        except ImportError:
            import _pygmssl
            return _pygmssl
        try:
            _mod = imp.load_module('_pygmssl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pygmssl = swig_import_helper()
    del swig_import_helper
else:
    import _pygmssl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

AES_BLOCK_SIZE = _pygmssl.AES_BLOCK_SIZE
AES_ENCRYPT = _pygmssl.AES_ENCRYPT
AES_DECRYPT = _pygmssl.AES_DECRYPT
class PYAES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PYAES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PYAES, name)
    __repr__ = _swig_repr
    if _newclass:
        encrypt = staticmethod(_pygmssl.PYAES_encrypt)
    else:
        encrypt = _pygmssl.PYAES_encrypt
    if _newclass:
        encrypt_ecb = staticmethod(_pygmssl.PYAES_encrypt_ecb)
    else:
        encrypt_ecb = _pygmssl.PYAES_encrypt_ecb
    if _newclass:
        encrypt_cbc = staticmethod(_pygmssl.PYAES_encrypt_cbc)
    else:
        encrypt_cbc = _pygmssl.PYAES_encrypt_cbc

    def __init__(self):
        this = _pygmssl.new_PYAES()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_PYAES
    __del__ = lambda self: None
PYAES_swigregister = _pygmssl.PYAES_swigregister
PYAES_swigregister(PYAES)

def PYAES_encrypt(input, key, enc):
    return _pygmssl.PYAES_encrypt(input, key, enc)
PYAES_encrypt = _pygmssl.PYAES_encrypt

def PYAES_encrypt_ecb(input, key, enc):
    return _pygmssl.PYAES_encrypt_ecb(input, key, enc)
PYAES_encrypt_ecb = _pygmssl.PYAES_encrypt_ecb

def PYAES_encrypt_cbc(input, key, iv, enc):
    return _pygmssl.PYAES_encrypt_cbc(input, key, iv, enc)
PYAES_encrypt_cbc = _pygmssl.PYAES_encrypt_cbc

SM2_MAX_ID_BITS = _pygmssl.SM2_MAX_ID_BITS
SM2_DEFAULT_ID_DIGEST_LENGTH = _pygmssl.SM2_DEFAULT_ID_DIGEST_LENGTH
SM2_MIN_PLAINTEXT_LENGTH = _pygmssl.SM2_MIN_PLAINTEXT_LENGTH
SM2_MAX_PLAINTEXT_LENGTH = _pygmssl.SM2_MAX_PLAINTEXT_LENGTH
SM2_F_I2O_SM2CIPHERTEXTVALUE = _pygmssl.SM2_F_I2O_SM2CIPHERTEXTVALUE
SM2_F_O2I_SM2CIPHERTEXTVALUE = _pygmssl.SM2_F_O2I_SM2CIPHERTEXTVALUE
SM2_F_SM2_DECRYPT = _pygmssl.SM2_F_SM2_DECRYPT
SM2_F_SM2_DO_DECRYPT = _pygmssl.SM2_F_SM2_DO_DECRYPT
SM2_F_SM2_DO_ENCRYPT = _pygmssl.SM2_F_SM2_DO_ENCRYPT
SM2_F_SM2_DO_SIGN = _pygmssl.SM2_F_SM2_DO_SIGN
SM2_F_SM2_DO_VERIFY = _pygmssl.SM2_F_SM2_DO_VERIFY
SM2_F_SM2_ENCRYPT = _pygmssl.SM2_F_SM2_ENCRYPT
SM2_F_SM2_SIGN_SETUP = _pygmssl.SM2_F_SM2_SIGN_SETUP
SM2_R_BAD_SIGNATURE = _pygmssl.SM2_R_BAD_SIGNATURE
SM2_R_BUFFER_TOO_SMALL = _pygmssl.SM2_R_BUFFER_TOO_SMALL
SM2_R_DECRYPT_FAILURE = _pygmssl.SM2_R_DECRYPT_FAILURE
SM2_R_ENCRYPT_FAILURE = _pygmssl.SM2_R_ENCRYPT_FAILURE
SM2_R_INVALID_CIPHERTEXT = _pygmssl.SM2_R_INVALID_CIPHERTEXT
SM2_R_INVALID_DIGEST_ALGOR = _pygmssl.SM2_R_INVALID_DIGEST_ALGOR
SM2_R_INVALID_EC_KEY = _pygmssl.SM2_R_INVALID_EC_KEY
SM2_R_INVALID_INPUT_LENGTH = _pygmssl.SM2_R_INVALID_INPUT_LENGTH
SM2_R_INVALID_PLAINTEXT_LENGTH = _pygmssl.SM2_R_INVALID_PLAINTEXT_LENGTH
SM2_R_INVALID_PUBLIC_KEY = _pygmssl.SM2_R_INVALID_PUBLIC_KEY
SM2_R_KDF_FAILURE = _pygmssl.SM2_R_KDF_FAILURE
SM2_R_MISSING_PARAMETERS = _pygmssl.SM2_R_MISSING_PARAMETERS
SM2_R_NEED_NEW_SETUP_VALUES = _pygmssl.SM2_R_NEED_NEW_SETUP_VALUES
SM2_R_RANDOM_NUMBER_GENERATION_FAILED = _pygmssl.SM2_R_RANDOM_NUMBER_GENERATION_FAILED
SM3_DIGEST_LENGTH = _pygmssl.SM3_DIGEST_LENGTH
SM3_BLOCK_SIZE = _pygmssl.SM3_BLOCK_SIZE
SM3_CBLOCK = _pygmssl.SM3_CBLOCK
SM3_HMAC_SIZE = _pygmssl.SM3_HMAC_SIZE
HASH_BYTE_LENGTH = _pygmssl.HASH_BYTE_LENGTH
HASH_BIT_LENGTH = _pygmssl.HASH_BIT_LENGTH
TYPE_GFp = _pygmssl.TYPE_GFp
TYPE_GF2m = _pygmssl.TYPE_GF2m
MAX_POINT_BYTE_LENGTH = _pygmssl.MAX_POINT_BYTE_LENGTH
ORDER_A_B = _pygmssl.ORDER_A_B
ORDER_B_A = _pygmssl.ORDER_B_A
class sm2_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm2_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm2_hash, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _pygmssl.sm2_hash_buffer_set
    __swig_getmethods__["buffer"] = _pygmssl.sm2_hash_buffer_get
    if _newclass:
        buffer = _swig_property(_pygmssl.sm2_hash_buffer_get, _pygmssl.sm2_hash_buffer_set)
    __swig_setmethods__["position"] = _pygmssl.sm2_hash_position_set
    __swig_getmethods__["position"] = _pygmssl.sm2_hash_position_get
    if _newclass:
        position = _swig_property(_pygmssl.sm2_hash_position_get, _pygmssl.sm2_hash_position_set)
    __swig_setmethods__["hash"] = _pygmssl.sm2_hash_hash_set
    __swig_getmethods__["hash"] = _pygmssl.sm2_hash_hash_get
    if _newclass:
        hash = _swig_property(_pygmssl.sm2_hash_hash_get, _pygmssl.sm2_hash_hash_set)

    def __init__(self):
        this = _pygmssl.new_sm2_hash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm2_hash
    __del__ = lambda self: None
sm2_hash_swigregister = _pygmssl.sm2_hash_swigregister
sm2_hash_swigregister(sm2_hash)

class xy_ecpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xy_ecpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xy_ecpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pygmssl.xy_ecpoint_x_set
    __swig_getmethods__["x"] = _pygmssl.xy_ecpoint_x_get
    if _newclass:
        x = _swig_property(_pygmssl.xy_ecpoint_x_get, _pygmssl.xy_ecpoint_x_set)
    __swig_setmethods__["y"] = _pygmssl.xy_ecpoint_y_set
    __swig_getmethods__["y"] = _pygmssl.xy_ecpoint_y_get
    if _newclass:
        y = _swig_property(_pygmssl.xy_ecpoint_y_get, _pygmssl.xy_ecpoint_y_set)
    __swig_setmethods__["ec_point"] = _pygmssl.xy_ecpoint_ec_point_set
    __swig_getmethods__["ec_point"] = _pygmssl.xy_ecpoint_ec_point_get
    if _newclass:
        ec_point = _swig_property(_pygmssl.xy_ecpoint_ec_point_get, _pygmssl.xy_ecpoint_ec_point_set)

    def __init__(self):
        this = _pygmssl.new_xy_ecpoint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_xy_ecpoint
    __del__ = lambda self: None
xy_ecpoint_swigregister = _pygmssl.xy_ecpoint_swigregister
xy_ecpoint_swigregister(xy_ecpoint)

class ec_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ec_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ec_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = _pygmssl.ec_param_ctx_set
    __swig_getmethods__["ctx"] = _pygmssl.ec_param_ctx_get
    if _newclass:
        ctx = _swig_property(_pygmssl.ec_param_ctx_get, _pygmssl.ec_param_ctx_set)
    __swig_setmethods__["p"] = _pygmssl.ec_param_p_set
    __swig_getmethods__["p"] = _pygmssl.ec_param_p_get
    if _newclass:
        p = _swig_property(_pygmssl.ec_param_p_get, _pygmssl.ec_param_p_set)
    __swig_setmethods__["a"] = _pygmssl.ec_param_a_set
    __swig_getmethods__["a"] = _pygmssl.ec_param_a_get
    if _newclass:
        a = _swig_property(_pygmssl.ec_param_a_get, _pygmssl.ec_param_a_set)
    __swig_setmethods__["b"] = _pygmssl.ec_param_b_set
    __swig_getmethods__["b"] = _pygmssl.ec_param_b_get
    if _newclass:
        b = _swig_property(_pygmssl.ec_param_b_get, _pygmssl.ec_param_b_set)
    __swig_setmethods__["n"] = _pygmssl.ec_param_n_set
    __swig_getmethods__["n"] = _pygmssl.ec_param_n_get
    if _newclass:
        n = _swig_property(_pygmssl.ec_param_n_get, _pygmssl.ec_param_n_set)
    __swig_setmethods__["G"] = _pygmssl.ec_param_G_set
    __swig_getmethods__["G"] = _pygmssl.ec_param_G_get
    if _newclass:
        G = _swig_property(_pygmssl.ec_param_G_get, _pygmssl.ec_param_G_set)
    __swig_setmethods__["group"] = _pygmssl.ec_param_group_set
    __swig_getmethods__["group"] = _pygmssl.ec_param_group_get
    if _newclass:
        group = _swig_property(_pygmssl.ec_param_group_get, _pygmssl.ec_param_group_set)
    __swig_setmethods__["type"] = _pygmssl.ec_param_type_set
    __swig_getmethods__["type"] = _pygmssl.ec_param_type_get
    if _newclass:
        type = _swig_property(_pygmssl.ec_param_type_get, _pygmssl.ec_param_type_set)
    __swig_setmethods__["point_bit_length"] = _pygmssl.ec_param_point_bit_length_set
    __swig_getmethods__["point_bit_length"] = _pygmssl.ec_param_point_bit_length_get
    if _newclass:
        point_bit_length = _swig_property(_pygmssl.ec_param_point_bit_length_get, _pygmssl.ec_param_point_bit_length_set)
    __swig_setmethods__["point_byte_length"] = _pygmssl.ec_param_point_byte_length_set
    __swig_getmethods__["point_byte_length"] = _pygmssl.ec_param_point_byte_length_get
    if _newclass:
        point_byte_length = _swig_property(_pygmssl.ec_param_point_byte_length_get, _pygmssl.ec_param_point_byte_length_set)
    __swig_setmethods__["EC_GROUP_new_curve"] = _pygmssl.ec_param_EC_GROUP_new_curve_set
    __swig_getmethods__["EC_GROUP_new_curve"] = _pygmssl.ec_param_EC_GROUP_new_curve_get
    if _newclass:
        EC_GROUP_new_curve = _swig_property(_pygmssl.ec_param_EC_GROUP_new_curve_get, _pygmssl.ec_param_EC_GROUP_new_curve_set)
    __swig_setmethods__["EC_POINT_set_affine_coordinates"] = _pygmssl.ec_param_EC_POINT_set_affine_coordinates_set
    __swig_getmethods__["EC_POINT_set_affine_coordinates"] = _pygmssl.ec_param_EC_POINT_set_affine_coordinates_get
    if _newclass:
        EC_POINT_set_affine_coordinates = _swig_property(_pygmssl.ec_param_EC_POINT_set_affine_coordinates_get, _pygmssl.ec_param_EC_POINT_set_affine_coordinates_set)
    __swig_setmethods__["EC_POINT_get_affine_coordinates"] = _pygmssl.ec_param_EC_POINT_get_affine_coordinates_set
    __swig_getmethods__["EC_POINT_get_affine_coordinates"] = _pygmssl.ec_param_EC_POINT_get_affine_coordinates_get
    if _newclass:
        EC_POINT_get_affine_coordinates = _swig_property(_pygmssl.ec_param_EC_POINT_get_affine_coordinates_get, _pygmssl.ec_param_EC_POINT_get_affine_coordinates_set)

    def __init__(self):
        this = _pygmssl.new_ec_param()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_ec_param
    __del__ = lambda self: None
ec_param_swigregister = _pygmssl.ec_param_swigregister
ec_param_swigregister(ec_param)

class sm2_ec_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm2_ec_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm2_ec_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _pygmssl.sm2_ec_key_d_set
    __swig_getmethods__["d"] = _pygmssl.sm2_ec_key_d_get
    if _newclass:
        d = _swig_property(_pygmssl.sm2_ec_key_d_get, _pygmssl.sm2_ec_key_d_set)
    __swig_setmethods__["P"] = _pygmssl.sm2_ec_key_P_set
    __swig_getmethods__["P"] = _pygmssl.sm2_ec_key_P_get
    if _newclass:
        P = _swig_property(_pygmssl.sm2_ec_key_P_get, _pygmssl.sm2_ec_key_P_set)

    def __init__(self):
        this = _pygmssl.new_sm2_ec_key()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm2_ec_key
    __del__ = lambda self: None
sm2_ec_key_swigregister = _pygmssl.sm2_ec_key_swigregister
sm2_ec_key_swigregister(sm2_ec_key)

class pt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pygmssl.pt_x_set
    __swig_getmethods__["x"] = _pygmssl.pt_x_get
    if _newclass:
        x = _swig_property(_pygmssl.pt_x_get, _pygmssl.pt_x_set)
    __swig_setmethods__["y"] = _pygmssl.pt_y_set
    __swig_getmethods__["y"] = _pygmssl.pt_y_get
    if _newclass:
        y = _swig_property(_pygmssl.pt_y_get, _pygmssl.pt_y_set)

    def __init__(self):
        this = _pygmssl.new_pt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_pt
    __del__ = lambda self: None
pt_swigregister = _pygmssl.pt_swigregister
pt_swigregister(pt)

class sm2_sign_st(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm2_sign_st, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm2_sign_st, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _pygmssl.sm2_sign_st_message_set
    __swig_getmethods__["message"] = _pygmssl.sm2_sign_st_message_get
    if _newclass:
        message = _swig_property(_pygmssl.sm2_sign_st_message_get, _pygmssl.sm2_sign_st_message_set)
    __swig_setmethods__["message_byte_length"] = _pygmssl.sm2_sign_st_message_byte_length_set
    __swig_getmethods__["message_byte_length"] = _pygmssl.sm2_sign_st_message_byte_length_get
    if _newclass:
        message_byte_length = _swig_property(_pygmssl.sm2_sign_st_message_byte_length_get, _pygmssl.sm2_sign_st_message_byte_length_set)
    __swig_setmethods__["ID"] = _pygmssl.sm2_sign_st_ID_set
    __swig_getmethods__["ID"] = _pygmssl.sm2_sign_st_ID_get
    if _newclass:
        ID = _swig_property(_pygmssl.sm2_sign_st_ID_get, _pygmssl.sm2_sign_st_ID_set)
    __swig_setmethods__["ENTL"] = _pygmssl.sm2_sign_st_ENTL_set
    __swig_getmethods__["ENTL"] = _pygmssl.sm2_sign_st_ENTL_get
    if _newclass:
        ENTL = _swig_property(_pygmssl.sm2_sign_st_ENTL_get, _pygmssl.sm2_sign_st_ENTL_set)
    __swig_setmethods__["k"] = _pygmssl.sm2_sign_st_k_set
    __swig_getmethods__["k"] = _pygmssl.sm2_sign_st_k_get
    if _newclass:
        k = _swig_property(_pygmssl.sm2_sign_st_k_get, _pygmssl.sm2_sign_st_k_set)
    __swig_setmethods__["private_key"] = _pygmssl.sm2_sign_st_private_key_set
    __swig_getmethods__["private_key"] = _pygmssl.sm2_sign_st_private_key_get
    if _newclass:
        private_key = _swig_property(_pygmssl.sm2_sign_st_private_key_get, _pygmssl.sm2_sign_st_private_key_set)
    __swig_setmethods__["public_key"] = _pygmssl.sm2_sign_st_public_key_set
    __swig_getmethods__["public_key"] = _pygmssl.sm2_sign_st_public_key_get
    if _newclass:
        public_key = _swig_property(_pygmssl.sm2_sign_st_public_key_get, _pygmssl.sm2_sign_st_public_key_set)
    __swig_setmethods__["Z"] = _pygmssl.sm2_sign_st_Z_set
    __swig_getmethods__["Z"] = _pygmssl.sm2_sign_st_Z_get
    if _newclass:
        Z = _swig_property(_pygmssl.sm2_sign_st_Z_get, _pygmssl.sm2_sign_st_Z_set)
    __swig_setmethods__["r"] = _pygmssl.sm2_sign_st_r_set
    __swig_getmethods__["r"] = _pygmssl.sm2_sign_st_r_get
    if _newclass:
        r = _swig_property(_pygmssl.sm2_sign_st_r_get, _pygmssl.sm2_sign_st_r_set)
    __swig_setmethods__["s"] = _pygmssl.sm2_sign_st_s_set
    __swig_getmethods__["s"] = _pygmssl.sm2_sign_st_s_get
    if _newclass:
        s = _swig_property(_pygmssl.sm2_sign_st_s_get, _pygmssl.sm2_sign_st_s_set)
    __swig_setmethods__["R"] = _pygmssl.sm2_sign_st_R_set
    __swig_getmethods__["R"] = _pygmssl.sm2_sign_st_R_get
    if _newclass:
        R = _swig_property(_pygmssl.sm2_sign_st_R_get, _pygmssl.sm2_sign_st_R_set)

    def __init__(self):
        this = _pygmssl.new_sm2_sign_st()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm2_sign_st
    __del__ = lambda self: None
sm2_sign_st_swigregister = _pygmssl.sm2_sign_st_swigregister
sm2_sign_st_swigregister(sm2_sign_st)

class message_st(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, message_st, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, message_st, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _pygmssl.message_st_message_set
    __swig_getmethods__["message"] = _pygmssl.message_st_message_get
    if _newclass:
        message = _swig_property(_pygmssl.message_st_message_get, _pygmssl.message_st_message_set)
    __swig_setmethods__["message_byte_length"] = _pygmssl.message_st_message_byte_length_set
    __swig_getmethods__["message_byte_length"] = _pygmssl.message_st_message_byte_length_get
    if _newclass:
        message_byte_length = _swig_property(_pygmssl.message_st_message_byte_length_get, _pygmssl.message_st_message_byte_length_set)
    __swig_setmethods__["decrypt"] = _pygmssl.message_st_decrypt_set
    __swig_getmethods__["decrypt"] = _pygmssl.message_st_decrypt_get
    if _newclass:
        decrypt = _swig_property(_pygmssl.message_st_decrypt_get, _pygmssl.message_st_decrypt_set)
    __swig_setmethods__["klen_bit"] = _pygmssl.message_st_klen_bit_set
    __swig_getmethods__["klen_bit"] = _pygmssl.message_st_klen_bit_get
    if _newclass:
        klen_bit = _swig_property(_pygmssl.message_st_klen_bit_get, _pygmssl.message_st_klen_bit_set)
    __swig_setmethods__["k"] = _pygmssl.message_st_k_set
    __swig_getmethods__["k"] = _pygmssl.message_st_k_get
    if _newclass:
        k = _swig_property(_pygmssl.message_st_k_get, _pygmssl.message_st_k_set)
    __swig_setmethods__["private_key"] = _pygmssl.message_st_private_key_set
    __swig_getmethods__["private_key"] = _pygmssl.message_st_private_key_get
    if _newclass:
        private_key = _swig_property(_pygmssl.message_st_private_key_get, _pygmssl.message_st_private_key_set)
    __swig_setmethods__["public_key"] = _pygmssl.message_st_public_key_set
    __swig_getmethods__["public_key"] = _pygmssl.message_st_public_key_get
    if _newclass:
        public_key = _swig_property(_pygmssl.message_st_public_key_get, _pygmssl.message_st_public_key_set)
    __swig_setmethods__["C"] = _pygmssl.message_st_C_set
    __swig_getmethods__["C"] = _pygmssl.message_st_C_get
    if _newclass:
        C = _swig_property(_pygmssl.message_st_C_get, _pygmssl.message_st_C_set)
    __swig_setmethods__["C_1"] = _pygmssl.message_st_C_1_set
    __swig_getmethods__["C_1"] = _pygmssl.message_st_C_1_get
    if _newclass:
        C_1 = _swig_property(_pygmssl.message_st_C_1_get, _pygmssl.message_st_C_1_set)
    __swig_setmethods__["C_2"] = _pygmssl.message_st_C_2_set
    __swig_getmethods__["C_2"] = _pygmssl.message_st_C_2_get
    if _newclass:
        C_2 = _swig_property(_pygmssl.message_st_C_2_get, _pygmssl.message_st_C_2_set)
    __swig_setmethods__["C_3"] = _pygmssl.message_st_C_3_set
    __swig_getmethods__["C_3"] = _pygmssl.message_st_C_3_get
    if _newclass:
        C_3 = _swig_property(_pygmssl.message_st_C_3_get, _pygmssl.message_st_C_3_set)

    def __init__(self):
        this = _pygmssl.new_message_st()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_message_st
    __del__ = lambda self: None
message_st_swigregister = _pygmssl.message_st_swigregister
message_st_swigregister(message_st)

class sm2_dh_st(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm2_dh_st, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm2_dh_st, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _pygmssl.sm2_dh_st_ID_set
    __swig_getmethods__["ID"] = _pygmssl.sm2_dh_st_ID_get
    if _newclass:
        ID = _swig_property(_pygmssl.sm2_dh_st_ID_get, _pygmssl.sm2_dh_st_ID_set)
    __swig_setmethods__["ENTL"] = _pygmssl.sm2_dh_st_ENTL_set
    __swig_getmethods__["ENTL"] = _pygmssl.sm2_dh_st_ENTL_get
    if _newclass:
        ENTL = _swig_property(_pygmssl.sm2_dh_st_ENTL_get, _pygmssl.sm2_dh_st_ENTL_set)
    __swig_setmethods__["klen_bit"] = _pygmssl.sm2_dh_st_klen_bit_set
    __swig_getmethods__["klen_bit"] = _pygmssl.sm2_dh_st_klen_bit_get
    if _newclass:
        klen_bit = _swig_property(_pygmssl.sm2_dh_st_klen_bit_get, _pygmssl.sm2_dh_st_klen_bit_set)
    __swig_setmethods__["r"] = _pygmssl.sm2_dh_st_r_set
    __swig_getmethods__["r"] = _pygmssl.sm2_dh_st_r_get
    if _newclass:
        r = _swig_property(_pygmssl.sm2_dh_st_r_get, _pygmssl.sm2_dh_st_r_set)
    __swig_setmethods__["private_key"] = _pygmssl.sm2_dh_st_private_key_set
    __swig_getmethods__["private_key"] = _pygmssl.sm2_dh_st_private_key_get
    if _newclass:
        private_key = _swig_property(_pygmssl.sm2_dh_st_private_key_get, _pygmssl.sm2_dh_st_private_key_set)
    __swig_setmethods__["public_key"] = _pygmssl.sm2_dh_st_public_key_set
    __swig_getmethods__["public_key"] = _pygmssl.sm2_dh_st_public_key_get
    if _newclass:
        public_key = _swig_property(_pygmssl.sm2_dh_st_public_key_get, _pygmssl.sm2_dh_st_public_key_set)
    __swig_setmethods__["K"] = _pygmssl.sm2_dh_st_K_set
    __swig_getmethods__["K"] = _pygmssl.sm2_dh_st_K_get
    if _newclass:
        K = _swig_property(_pygmssl.sm2_dh_st_K_get, _pygmssl.sm2_dh_st_K_set)
    __swig_setmethods__["Z"] = _pygmssl.sm2_dh_st_Z_set
    __swig_getmethods__["Z"] = _pygmssl.sm2_dh_st_Z_get
    if _newclass:
        Z = _swig_property(_pygmssl.sm2_dh_st_Z_get, _pygmssl.sm2_dh_st_Z_set)
    __swig_setmethods__["R"] = _pygmssl.sm2_dh_st_R_set
    __swig_getmethods__["R"] = _pygmssl.sm2_dh_st_R_get
    if _newclass:
        R = _swig_property(_pygmssl.sm2_dh_st_R_get, _pygmssl.sm2_dh_st_R_set)
    __swig_setmethods__["hash_tmp_data"] = _pygmssl.sm2_dh_st_hash_tmp_data_set
    __swig_getmethods__["hash_tmp_data"] = _pygmssl.sm2_dh_st_hash_tmp_data_get
    if _newclass:
        hash_tmp_data = _swig_property(_pygmssl.sm2_dh_st_hash_tmp_data_get, _pygmssl.sm2_dh_st_hash_tmp_data_set)

    def __init__(self):
        this = _pygmssl.new_sm2_dh_st()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm2_dh_st
    __del__ = lambda self: None
sm2_dh_st_swigregister = _pygmssl.sm2_dh_st_swigregister
sm2_dh_st_swigregister(sm2_dh_st)

class sm2_dh_hash_st(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm2_dh_hash_st, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm2_dh_hash_st, name)
    __repr__ = _swig_repr
    __swig_setmethods__["S_1"] = _pygmssl.sm2_dh_hash_st_S_1_set
    __swig_getmethods__["S_1"] = _pygmssl.sm2_dh_hash_st_S_1_get
    if _newclass:
        S_1 = _swig_property(_pygmssl.sm2_dh_hash_st_S_1_get, _pygmssl.sm2_dh_hash_st_S_1_set)
    __swig_setmethods__["S_A"] = _pygmssl.sm2_dh_hash_st_S_A_set
    __swig_getmethods__["S_A"] = _pygmssl.sm2_dh_hash_st_S_A_get
    if _newclass:
        S_A = _swig_property(_pygmssl.sm2_dh_hash_st_S_A_get, _pygmssl.sm2_dh_hash_st_S_A_set)
    __swig_setmethods__["S_2"] = _pygmssl.sm2_dh_hash_st_S_2_set
    __swig_getmethods__["S_2"] = _pygmssl.sm2_dh_hash_st_S_2_get
    if _newclass:
        S_2 = _swig_property(_pygmssl.sm2_dh_hash_st_S_2_get, _pygmssl.sm2_dh_hash_st_S_2_set)
    __swig_setmethods__["S_B"] = _pygmssl.sm2_dh_hash_st_S_B_set
    __swig_getmethods__["S_B"] = _pygmssl.sm2_dh_hash_st_S_B_get
    if _newclass:
        S_B = _swig_property(_pygmssl.sm2_dh_hash_st_S_B_get, _pygmssl.sm2_dh_hash_st_S_B_set)

    def __init__(self):
        this = _pygmssl.new_sm2_dh_hash_st()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm2_dh_hash_st
    __del__ = lambda self: None
sm2_dh_hash_st_swigregister = _pygmssl.sm2_dh_hash_st_swigregister
sm2_dh_hash_st_swigregister(sm2_dh_hash_st)


def xy_ecpoint_new(ecp):
    return _pygmssl.xy_ecpoint_new(ecp)
xy_ecpoint_new = _pygmssl.xy_ecpoint_new

def xy_ecpoint_free(xyp):
    return _pygmssl.xy_ecpoint_free(xyp)
xy_ecpoint_free = _pygmssl.xy_ecpoint_free

def xy_ecpoint_mul_bignum(result, a, number, ecp):
    return _pygmssl.xy_ecpoint_mul_bignum(result, a, number, ecp)
xy_ecpoint_mul_bignum = _pygmssl.xy_ecpoint_mul_bignum

def xy_ecpoint_add_xy_ecpoint(result, a, b, ecp):
    return _pygmssl.xy_ecpoint_add_xy_ecpoint(result, a, b, ecp)
xy_ecpoint_add_xy_ecpoint = _pygmssl.xy_ecpoint_add_xy_ecpoint

def xy_ecpoint_init_xy(result, x, y, ecp):
    return _pygmssl.xy_ecpoint_init_xy(result, x, y, ecp)
xy_ecpoint_init_xy = _pygmssl.xy_ecpoint_init_xy

def xy_ecpoint_init_ec_point(result, ec_point, ecp):
    return _pygmssl.xy_ecpoint_init_ec_point(result, ec_point, ecp)
xy_ecpoint_init_ec_point = _pygmssl.xy_ecpoint_init_ec_point

def ec_param_new():
    return _pygmssl.ec_param_new()
ec_param_new = _pygmssl.ec_param_new

def ec_param_free(ecp):
    return _pygmssl.ec_param_free(ecp)
ec_param_free = _pygmssl.ec_param_free

def ec_param_init(ecp, string_value, type, point_bit_length):
    return _pygmssl.ec_param_init(ecp, string_value, type, point_bit_length)
ec_param_init = _pygmssl.ec_param_init

def sm2_ec_key_new(ecp):
    return _pygmssl.sm2_ec_key_new(ecp)
sm2_ec_key_new = _pygmssl.sm2_ec_key_new

def sm2_ec_key_free(eck):
    return _pygmssl.sm2_ec_key_free(eck)
sm2_ec_key_free = _pygmssl.sm2_ec_key_free

def sm2_ec_key_init(eck, string_value, ecp):
    return _pygmssl.sm2_ec_key_init(eck, string_value, ecp)
sm2_ec_key_init = _pygmssl.sm2_ec_key_init

def out_hex(list1):
    return _pygmssl.out_hex(list1)
out_hex = _pygmssl.out_hex

def rotate_left(a, k):
    return _pygmssl.rotate_left(a, k)
rotate_left = _pygmssl.rotate_left

def init_T_j():
    return _pygmssl.init_T_j()
init_T_j = _pygmssl.init_T_j

def FF_j(X, Y, Z, j):
    return _pygmssl.FF_j(X, Y, Z, j)
FF_j = _pygmssl.FF_j

def GG_j(X, Y, Z, j):
    return _pygmssl.GG_j(X, Y, Z, j)
GG_j = _pygmssl.GG_j

def P_0(X):
    return _pygmssl.P_0(X)
P_0 = _pygmssl.P_0

def P_1(X):
    return _pygmssl.P_1(X)
P_1 = _pygmssl.P_1

def CF(V_i, B_i, V_i_1):
    return _pygmssl.CF(V_i, B_i, V_i_1)
CF = _pygmssl.CF

def SM3_Init():
    return _pygmssl.SM3_Init()
SM3_Init = _pygmssl.SM3_Init

def SM3_Update(message, length):
    return _pygmssl.SM3_Update(message, length)
SM3_Update = _pygmssl.SM3_Update

def SM3_Final_dword(out_hash):
    return _pygmssl.SM3_Final_dword(out_hash)
SM3_Final_dword = _pygmssl.SM3_Final_dword

def SM3_Final_byte(out_hash):
    return _pygmssl.SM3_Final_byte(out_hash)
SM3_Final_byte = _pygmssl.SM3_Final_byte

def SM3_Final(out_hash):
    return _pygmssl.SM3_Final(out_hash)
SM3_Final = _pygmssl.SM3_Final

def SM3_hash(msg, len1, out_hash):
    return _pygmssl.SM3_hash(msg, len1, out_hash)
SM3_hash = _pygmssl.SM3_hash

def show_bignum(bn, point_byte_length):
    return _pygmssl.show_bignum(bn, point_byte_length)
show_bignum = _pygmssl.show_bignum

def show_string(string1, length1):
    return _pygmssl.show_string(string1, length1)
show_string = _pygmssl.show_string

def KDF(str1, klen, strlen1):
    return _pygmssl.KDF(str1, klen, strlen1)
KDF = _pygmssl.KDF

def sm2_bn2bin(bn, bin_string, point_byte_length):
    return _pygmssl.sm2_bn2bin(bn, bin_string, point_byte_length)
sm2_bn2bin = _pygmssl.sm2_bn2bin

def sm2_hex2bin(hex_string, bin_string, point_byte_length):
    return _pygmssl.sm2_hex2bin(hex_string, bin_string, point_byte_length)
sm2_hex2bin = _pygmssl.sm2_hex2bin

def EC_POINT_is_on_curve(group, point, ctx):
    return _pygmssl.EC_POINT_is_on_curve(group, point, ctx)
EC_POINT_is_on_curve = _pygmssl.EC_POINT_is_on_curve
class py_ec_param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, py_ec_param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, py_ec_param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ecp"] = _pygmssl.py_ec_param_ecp_set
    __swig_getmethods__["ecp"] = _pygmssl.py_ec_param_ecp_get
    if _newclass:
        ecp = _swig_property(_pygmssl.py_ec_param_ecp_get, _pygmssl.py_ec_param_ecp_set)

    def __init__(self, py_string_value, type, point_bit_length):
        this = _pygmssl.new_py_ec_param(py_string_value, type, point_bit_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_py_ec_param
    __del__ = lambda self: None
py_ec_param_swigregister = _pygmssl.py_ec_param_swigregister
py_ec_param_swigregister(py_ec_param)
cvar = _pygmssl.cvar

class py_xy_ecpoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, py_xy_ecpoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, py_xy_ecpoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xyp"] = _pygmssl.py_xy_ecpoint_xyp_set
    __swig_getmethods__["xyp"] = _pygmssl.py_xy_ecpoint_xyp_get
    if _newclass:
        xyp = _swig_property(_pygmssl.py_xy_ecpoint_xyp_get, _pygmssl.py_xy_ecpoint_xyp_set)

    def __init__(self, ecp):
        this = _pygmssl.new_py_xy_ecpoint(ecp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        mul_bignum = staticmethod(_pygmssl.py_xy_ecpoint_mul_bignum)
    else:
        mul_bignum = _pygmssl.py_xy_ecpoint_mul_bignum
    if _newclass:
        add_xy_ecpoint = staticmethod(_pygmssl.py_xy_ecpoint_add_xy_ecpoint)
    else:
        add_xy_ecpoint = _pygmssl.py_xy_ecpoint_add_xy_ecpoint
    if _newclass:
        init_xy = staticmethod(_pygmssl.py_xy_ecpoint_init_xy)
    else:
        init_xy = _pygmssl.py_xy_ecpoint_init_xy
    if _newclass:
        init_ec_point = staticmethod(_pygmssl.py_xy_ecpoint_init_ec_point)
    else:
        init_ec_point = _pygmssl.py_xy_ecpoint_init_ec_point
    __swig_destroy__ = _pygmssl.delete_py_xy_ecpoint
    __del__ = lambda self: None
py_xy_ecpoint_swigregister = _pygmssl.py_xy_ecpoint_swigregister
py_xy_ecpoint_swigregister(py_xy_ecpoint)

def py_xy_ecpoint_mul_bignum(result, a, number, ecp):
    return _pygmssl.py_xy_ecpoint_mul_bignum(result, a, number, ecp)
py_xy_ecpoint_mul_bignum = _pygmssl.py_xy_ecpoint_mul_bignum

def py_xy_ecpoint_add_xy_ecpoint(result, a, b, ecp):
    return _pygmssl.py_xy_ecpoint_add_xy_ecpoint(result, a, b, ecp)
py_xy_ecpoint_add_xy_ecpoint = _pygmssl.py_xy_ecpoint_add_xy_ecpoint

def py_xy_ecpoint_init_xy(result, x, y, ecp):
    return _pygmssl.py_xy_ecpoint_init_xy(result, x, y, ecp)
py_xy_ecpoint_init_xy = _pygmssl.py_xy_ecpoint_init_xy

def py_xy_ecpoint_init_ec_point(result, ec_point, ecp):
    return _pygmssl.py_xy_ecpoint_init_ec_point(result, ec_point, ecp)
py_xy_ecpoint_init_ec_point = _pygmssl.py_xy_ecpoint_init_ec_point

class PYSM2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PYSM2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PYSM2, name)
    __repr__ = _swig_repr
    if _newclass:
        hex2bn = staticmethod(_pygmssl.PYSM2_hex2bn)
    else:
        hex2bn = _pygmssl.PYSM2_hex2bn
    if _newclass:
        ec_group_new_curve_gfp = staticmethod(_pygmssl.PYSM2_ec_group_new_curve_gfp)
    else:
        ec_group_new_curve_gfp = _pygmssl.PYSM2_ec_group_new_curve_gfp
    if _newclass:
        ec_point_new = staticmethod(_pygmssl.PYSM2_ec_point_new)
    else:
        ec_point_new = _pygmssl.PYSM2_ec_point_new
    if _newclass:
        ec_point_free = staticmethod(_pygmssl.PYSM2_ec_point_free)
    else:
        ec_point_free = _pygmssl.PYSM2_ec_point_free
    if _newclass:
        bn_ctx_new = staticmethod(_pygmssl.PYSM2_bn_ctx_new)
    else:
        bn_ctx_new = _pygmssl.PYSM2_bn_ctx_new
    if _newclass:
        bn_ctx_free = staticmethod(_pygmssl.PYSM2_bn_ctx_free)
    else:
        bn_ctx_free = _pygmssl.PYSM2_bn_ctx_free
    if _newclass:
        bn_free = staticmethod(_pygmssl.PYSM2_bn_free)
    else:
        bn_free = _pygmssl.PYSM2_bn_free
    if _newclass:
        ec_point_set_affine_coordinates_gfp = staticmethod(_pygmssl.PYSM2_ec_point_set_affine_coordinates_gfp)
    else:
        ec_point_set_affine_coordinates_gfp = _pygmssl.PYSM2_ec_point_set_affine_coordinates_gfp
    if _newclass:
        EC_GROUP_new_curve_GF2m = staticmethod(_pygmssl.PYSM2_EC_GROUP_new_curve_GF2m)
    else:
        EC_GROUP_new_curve_GF2m = _pygmssl.PYSM2_EC_GROUP_new_curve_GF2m
    if _newclass:
        ec_point_set_affine_coordinates_gf2m = staticmethod(_pygmssl.PYSM2_ec_point_set_affine_coordinates_gf2m)
    else:
        ec_point_set_affine_coordinates_gf2m = _pygmssl.PYSM2_ec_point_set_affine_coordinates_gf2m
    if _newclass:
        ec_group_set_generator = staticmethod(_pygmssl.PYSM2_ec_group_set_generator)
    else:
        ec_group_set_generator = _pygmssl.PYSM2_ec_group_set_generator
    if _newclass:
        sm2_sign = staticmethod(_pygmssl.PYSM2_sm2_sign)
    else:
        sm2_sign = _pygmssl.PYSM2_sm2_sign
    if _newclass:
        sm2_verify = staticmethod(_pygmssl.PYSM2_sm2_verify)
    else:
        sm2_verify = _pygmssl.PYSM2_sm2_verify
    if _newclass:
        sm2_encrypt = staticmethod(_pygmssl.PYSM2_sm2_encrypt)
    else:
        sm2_encrypt = _pygmssl.PYSM2_sm2_encrypt
    if _newclass:
        sm2_decrypt = staticmethod(_pygmssl.PYSM2_sm2_decrypt)
    else:
        sm2_decrypt = _pygmssl.PYSM2_sm2_decrypt
    if _newclass:
        dh_step1 = staticmethod(_pygmssl.PYSM2_dh_step1)
    else:
        dh_step1 = _pygmssl.PYSM2_dh_step1
    if _newclass:
        dh_step2 = staticmethod(_pygmssl.PYSM2_dh_step2)
    else:
        dh_step2 = _pygmssl.PYSM2_dh_step2

    def __init__(self):
        this = _pygmssl.new_PYSM2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_PYSM2
    __del__ = lambda self: None
PYSM2_swigregister = _pygmssl.PYSM2_swigregister
PYSM2_swigregister(PYSM2)

def PYSM2_hex2bn(str):
    return _pygmssl.PYSM2_hex2bn(str)
PYSM2_hex2bn = _pygmssl.PYSM2_hex2bn

def PYSM2_ec_group_new_curve_gfp(p, a, b, ctx):
    return _pygmssl.PYSM2_ec_group_new_curve_gfp(p, a, b, ctx)
PYSM2_ec_group_new_curve_gfp = _pygmssl.PYSM2_ec_group_new_curve_gfp

def PYSM2_ec_point_new(group):
    return _pygmssl.PYSM2_ec_point_new(group)
PYSM2_ec_point_new = _pygmssl.PYSM2_ec_point_new

def PYSM2_ec_point_free(point):
    return _pygmssl.PYSM2_ec_point_free(point)
PYSM2_ec_point_free = _pygmssl.PYSM2_ec_point_free

def PYSM2_bn_ctx_new():
    return _pygmssl.PYSM2_bn_ctx_new()
PYSM2_bn_ctx_new = _pygmssl.PYSM2_bn_ctx_new

def PYSM2_bn_ctx_free(c):
    return _pygmssl.PYSM2_bn_ctx_free(c)
PYSM2_bn_ctx_free = _pygmssl.PYSM2_bn_ctx_free

def PYSM2_bn_free(a):
    return _pygmssl.PYSM2_bn_free(a)
PYSM2_bn_free = _pygmssl.PYSM2_bn_free

def PYSM2_ec_point_set_affine_coordinates_gfp(group, p, x, y, ctx):
    return _pygmssl.PYSM2_ec_point_set_affine_coordinates_gfp(group, p, x, y, ctx)
PYSM2_ec_point_set_affine_coordinates_gfp = _pygmssl.PYSM2_ec_point_set_affine_coordinates_gfp

def PYSM2_EC_GROUP_new_curve_GF2m(p, a, b, ctx):
    return _pygmssl.PYSM2_EC_GROUP_new_curve_GF2m(p, a, b, ctx)
PYSM2_EC_GROUP_new_curve_GF2m = _pygmssl.PYSM2_EC_GROUP_new_curve_GF2m

def PYSM2_ec_point_set_affine_coordinates_gf2m(group, p, x, y, ctx):
    return _pygmssl.PYSM2_ec_point_set_affine_coordinates_gf2m(group, p, x, y, ctx)
PYSM2_ec_point_set_affine_coordinates_gf2m = _pygmssl.PYSM2_ec_point_set_affine_coordinates_gf2m

def PYSM2_ec_group_set_generator(group, generator, order, cofactor):
    return _pygmssl.PYSM2_ec_group_set_generator(group, generator, order, cofactor)
PYSM2_ec_group_set_generator = _pygmssl.PYSM2_ec_group_set_generator

def PYSM2_sm2_sign(ecp, sign, message_digest):
    return _pygmssl.PYSM2_sm2_sign(ecp, sign, message_digest)
PYSM2_sm2_sign = _pygmssl.PYSM2_sm2_sign

def PYSM2_sm2_verify(ecp, sign):
    return _pygmssl.PYSM2_sm2_verify(ecp, sign)
PYSM2_sm2_verify = _pygmssl.PYSM2_sm2_verify

def PYSM2_sm2_encrypt(ecp, message_data):
    return _pygmssl.PYSM2_sm2_encrypt(ecp, message_data)
PYSM2_sm2_encrypt = _pygmssl.PYSM2_sm2_encrypt

def PYSM2_sm2_decrypt(ecp, message_data):
    return _pygmssl.PYSM2_sm2_decrypt(ecp, message_data)
PYSM2_sm2_decrypt = _pygmssl.PYSM2_sm2_decrypt

def PYSM2_dh_step1(dh_data, dh_d, dh_r, ecp):
    return _pygmssl.PYSM2_dh_step1(dh_data, dh_d, dh_r, ecp)
PYSM2_dh_step1 = _pygmssl.PYSM2_dh_step1

def PYSM2_dh_step2(dh_data_A, dh_data_B, ecp, order):
    return _pygmssl.PYSM2_dh_step2(dh_data_A, dh_data_B, ecp, order)
PYSM2_dh_step2 = _pygmssl.PYSM2_dh_step2

class sm4_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sm4_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sm4_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _pygmssl.sm4_context_mode_set
    __swig_getmethods__["mode"] = _pygmssl.sm4_context_mode_get
    if _newclass:
        mode = _swig_property(_pygmssl.sm4_context_mode_get, _pygmssl.sm4_context_mode_set)
    __swig_setmethods__["sk"] = _pygmssl.sm4_context_sk_set
    __swig_getmethods__["sk"] = _pygmssl.sm4_context_sk_get
    if _newclass:
        sk = _swig_property(_pygmssl.sm4_context_sk_get, _pygmssl.sm4_context_sk_set)

    def __init__(self):
        this = _pygmssl.new_sm4_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_sm4_context
    __del__ = lambda self: None
sm4_context_swigregister = _pygmssl.sm4_context_swigregister
sm4_context_swigregister(sm4_context)

class PYSM4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PYSM4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PYSM4, name)
    __repr__ = _swig_repr
    if _newclass:
        sm4Sbox = staticmethod(_pygmssl.PYSM4_sm4Sbox)
    else:
        sm4Sbox = _pygmssl.PYSM4_sm4Sbox
    if _newclass:
        sm4Lt = staticmethod(_pygmssl.PYSM4_sm4Lt)
    else:
        sm4Lt = _pygmssl.PYSM4_sm4Lt
    if _newclass:
        sm4F = staticmethod(_pygmssl.PYSM4_sm4F)
    else:
        sm4F = _pygmssl.PYSM4_sm4F
    if _newclass:
        sm4CalciRK = staticmethod(_pygmssl.PYSM4_sm4CalciRK)
    else:
        sm4CalciRK = _pygmssl.PYSM4_sm4CalciRK
    if _newclass:
        setkey = staticmethod(_pygmssl.PYSM4_setkey)
    else:
        setkey = _pygmssl.PYSM4_setkey
    if _newclass:
        one_round = staticmethod(_pygmssl.PYSM4_one_round)
    else:
        one_round = _pygmssl.PYSM4_one_round

    def setkey_enc(self, ctx, key):
        return _pygmssl.PYSM4_setkey_enc(self, ctx, key)

    def setkey_dec(self, ctx, key):
        return _pygmssl.PYSM4_setkey_dec(self, ctx, key)

    def crypt_ecb(self, ctx, mode, length, input, output):
        return _pygmssl.PYSM4_crypt_ecb(self, ctx, mode, length, input, output)

    def crypt_cbc(self, ctx, mode, length, iv, input, output):
        return _pygmssl.PYSM4_crypt_cbc(self, ctx, mode, length, iv, input, output)

    def __init__(self):
        this = _pygmssl.new_PYSM4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_PYSM4
    __del__ = lambda self: None
PYSM4_swigregister = _pygmssl.PYSM4_swigregister
PYSM4_swigregister(PYSM4)
SM4_ENCRYPT = _pygmssl.SM4_ENCRYPT
SM4_DECRYPT = _pygmssl.SM4_DECRYPT

def PYSM4_sm4Sbox(inch):
    return _pygmssl.PYSM4_sm4Sbox(inch)
PYSM4_sm4Sbox = _pygmssl.PYSM4_sm4Sbox

def PYSM4_sm4Lt(ka):
    return _pygmssl.PYSM4_sm4Lt(ka)
PYSM4_sm4Lt = _pygmssl.PYSM4_sm4Lt

def PYSM4_sm4F(x0, x1, x2, x3, rk):
    return _pygmssl.PYSM4_sm4F(x0, x1, x2, x3, rk)
PYSM4_sm4F = _pygmssl.PYSM4_sm4F

def PYSM4_sm4CalciRK(ka):
    return _pygmssl.PYSM4_sm4CalciRK(ka)
PYSM4_sm4CalciRK = _pygmssl.PYSM4_sm4CalciRK

def PYSM4_setkey(SK, key):
    return _pygmssl.PYSM4_setkey(SK, key)
PYSM4_setkey = _pygmssl.PYSM4_setkey

def PYSM4_one_round(sk, input, output):
    return _pygmssl.PYSM4_one_round(sk, input, output)
PYSM4_one_round = _pygmssl.PYSM4_one_round

RSA_PKCS1_PADDING = _pygmssl.RSA_PKCS1_PADDING
RSA_SSLV23_PADDING = _pygmssl.RSA_SSLV23_PADDING
RSA_NO_PADDING = _pygmssl.RSA_NO_PADDING
RSA_PKCS1_OAEP_PADDING = _pygmssl.RSA_PKCS1_OAEP_PADDING
RSA_X931_PADDING = _pygmssl.RSA_X931_PADDING
RSA_PKCS1_PSS_PADDING = _pygmssl.RSA_PKCS1_PSS_PADDING
RSA_PKCS1_PADDING_SIZE = _pygmssl.RSA_PKCS1_PADDING_SIZE
class PYRSA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PYRSA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PYRSA, name)
    __repr__ = _swig_repr
    if _newclass:
        public_encrypt = staticmethod(_pygmssl.PYRSA_public_encrypt)
    else:
        public_encrypt = _pygmssl.PYRSA_public_encrypt

    def __init__(self):
        this = _pygmssl.new_PYRSA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pygmssl.delete_PYRSA
    __del__ = lambda self: None
PYRSA_swigregister = _pygmssl.PYRSA_swigregister
PYRSA_swigregister(PYRSA)

def PYRSA_public_encrypt(input, key, padding):
    return _pygmssl.PYRSA_public_encrypt(input, key, padding)
PYRSA_public_encrypt = _pygmssl.PYRSA_public_encrypt

# This file is compatible with both classic and new-style classes.


