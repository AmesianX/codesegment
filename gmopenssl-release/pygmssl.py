# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pygmssl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pygmssl')
    _pygmssl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pygmssl', [dirname(__file__)])
        except ImportError:
            import _pygmssl
            return _pygmssl
        try:
            _mod = imp.load_module('_pygmssl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pygmssl = swig_import_helper()
    del swig_import_helper
else:
    import _pygmssl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def PEM_get_EVP_CIPHER_INFO(header, cipher):
    return _pygmssl.PEM_get_EVP_CIPHER_INFO(header, cipher)
PEM_get_EVP_CIPHER_INFO = _pygmssl.PEM_get_EVP_CIPHER_INFO

def PEM_do_header(cipher, data, len, callback, u):
    return _pygmssl.PEM_do_header(cipher, data, len, callback, u)
PEM_do_header = _pygmssl.PEM_do_header

def PEM_read_bio(bp, name, header, data, len):
    return _pygmssl.PEM_read_bio(bp, name, header, data, len)
PEM_read_bio = _pygmssl.PEM_read_bio

def PEM_write_bio(bp, name, hdr, data, len):
    return _pygmssl.PEM_write_bio(bp, name, hdr, data, len)
PEM_write_bio = _pygmssl.PEM_write_bio

def PEM_bytes_read_bio(pdata, plen, pnm, name, bp, cb, u):
    return _pygmssl.PEM_bytes_read_bio(pdata, plen, pnm, name, bp, cb, u)
PEM_bytes_read_bio = _pygmssl.PEM_bytes_read_bio

def PEM_ASN1_read_bio(d2i, name, bp, x, cb, u):
    return _pygmssl.PEM_ASN1_read_bio(d2i, name, bp, x, cb, u)
PEM_ASN1_read_bio = _pygmssl.PEM_ASN1_read_bio

def PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u):
    return _pygmssl.PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u)
PEM_ASN1_write_bio = _pygmssl.PEM_ASN1_write_bio

def PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cd, u):
    return _pygmssl.PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cd, u)
PEM_X509_INFO_write_bio = _pygmssl.PEM_X509_INFO_write_bio

def PEM_read(fp, name, header, data, len):
    return _pygmssl.PEM_read(fp, name, header, data, len)
PEM_read = _pygmssl.PEM_read

def PEM_write(fp, name, hdr, data, len):
    return _pygmssl.PEM_write(fp, name, hdr, data, len)
PEM_write = _pygmssl.PEM_write

def PEM_ASN1_read(d2i, name, fp, x, cb, u):
    return _pygmssl.PEM_ASN1_read(d2i, name, fp, x, cb, u)
PEM_ASN1_read = _pygmssl.PEM_ASN1_read

def PEM_ASN1_write(i2d, name, fp, x, enc, kstr, klen, callback, u):
    return _pygmssl.PEM_ASN1_write(i2d, name, fp, x, enc, kstr, klen, callback, u)
PEM_ASN1_write = _pygmssl.PEM_ASN1_write

def PEM_SignInit(ctx, type):
    return _pygmssl.PEM_SignInit(ctx, type)
PEM_SignInit = _pygmssl.PEM_SignInit

def PEM_SignUpdate(ctx, d, cnt):
    return _pygmssl.PEM_SignUpdate(ctx, d, cnt)
PEM_SignUpdate = _pygmssl.PEM_SignUpdate

def PEM_SignFinal(ctx, sigret, siglen, pkey):
    return _pygmssl.PEM_SignFinal(ctx, sigret, siglen, pkey)
PEM_SignFinal = _pygmssl.PEM_SignFinal

def PEM_def_callback(buf, num, w, key):
    return _pygmssl.PEM_def_callback(buf, num, w, key)
PEM_def_callback = _pygmssl.PEM_def_callback

def PEM_proc_type(buf, type):
    return _pygmssl.PEM_proc_type(buf, type)
PEM_proc_type = _pygmssl.PEM_proc_type

def PEM_dek_info(buf, type, len, str):
    return _pygmssl.PEM_dek_info(buf, type, len, str)
PEM_dek_info = _pygmssl.PEM_dek_info

def PEM_write_bio_PrivateKey_traditional(bp, x, enc, kstr, klen, cb, u):
    return _pygmssl.PEM_write_bio_PrivateKey_traditional(bp, x, enc, kstr, klen, cb, u)
PEM_write_bio_PrivateKey_traditional = _pygmssl.PEM_write_bio_PrivateKey_traditional

def PEM_write_bio_PKCS8PrivateKey_nid(bp, x, nid, kstr, klen, cb, u):
    return _pygmssl.PEM_write_bio_PKCS8PrivateKey_nid(bp, x, nid, kstr, klen, cb, u)
PEM_write_bio_PKCS8PrivateKey_nid = _pygmssl.PEM_write_bio_PKCS8PrivateKey_nid

def PEM_write_bio_PKCS8PrivateKey(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _pygmssl.PEM_write_bio_PKCS8PrivateKey(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
PEM_write_bio_PKCS8PrivateKey = _pygmssl.PEM_write_bio_PKCS8PrivateKey

def i2d_PKCS8PrivateKey_bio(bp, x, enc, kstr, klen, cb, u):
    return _pygmssl.i2d_PKCS8PrivateKey_bio(bp, x, enc, kstr, klen, cb, u)
i2d_PKCS8PrivateKey_bio = _pygmssl.i2d_PKCS8PrivateKey_bio

def i2d_PKCS8PrivateKey_nid_bio(bp, x, nid, kstr, klen, cb, u):
    return _pygmssl.i2d_PKCS8PrivateKey_nid_bio(bp, x, nid, kstr, klen, cb, u)
i2d_PKCS8PrivateKey_nid_bio = _pygmssl.i2d_PKCS8PrivateKey_nid_bio

def d2i_PKCS8PrivateKey_bio(bp, x, cb, u):
    return _pygmssl.d2i_PKCS8PrivateKey_bio(bp, x, cb, u)
d2i_PKCS8PrivateKey_bio = _pygmssl.d2i_PKCS8PrivateKey_bio

def i2d_PKCS8PrivateKey_fp(fp, x, enc, kstr, klen, cb, u):
    return _pygmssl.i2d_PKCS8PrivateKey_fp(fp, x, enc, kstr, klen, cb, u)
i2d_PKCS8PrivateKey_fp = _pygmssl.i2d_PKCS8PrivateKey_fp

def i2d_PKCS8PrivateKey_nid_fp(fp, x, nid, kstr, klen, cb, u):
    return _pygmssl.i2d_PKCS8PrivateKey_nid_fp(fp, x, nid, kstr, klen, cb, u)
i2d_PKCS8PrivateKey_nid_fp = _pygmssl.i2d_PKCS8PrivateKey_nid_fp

def PEM_write_PKCS8PrivateKey_nid(fp, x, nid, kstr, klen, cb, u):
    return _pygmssl.PEM_write_PKCS8PrivateKey_nid(fp, x, nid, kstr, klen, cb, u)
PEM_write_PKCS8PrivateKey_nid = _pygmssl.PEM_write_PKCS8PrivateKey_nid

def d2i_PKCS8PrivateKey_fp(fp, x, cb, u):
    return _pygmssl.d2i_PKCS8PrivateKey_fp(fp, x, cb, u)
d2i_PKCS8PrivateKey_fp = _pygmssl.d2i_PKCS8PrivateKey_fp

def PEM_write_PKCS8PrivateKey(fp, x, enc, kstr, klen, cd, u):
    return _pygmssl.PEM_write_PKCS8PrivateKey(fp, x, enc, kstr, klen, cd, u)
PEM_write_PKCS8PrivateKey = _pygmssl.PEM_write_PKCS8PrivateKey

def PEM_read_bio_Parameters(bp, x):
    return _pygmssl.PEM_read_bio_Parameters(bp, x)
PEM_read_bio_Parameters = _pygmssl.PEM_read_bio_Parameters

def PEM_write_bio_Parameters(bp, x):
    return _pygmssl.PEM_write_bio_Parameters(bp, x)
PEM_write_bio_Parameters = _pygmssl.PEM_write_bio_Parameters

def b2i_PrivateKey(arg1, length):
    return _pygmssl.b2i_PrivateKey(arg1, length)
b2i_PrivateKey = _pygmssl.b2i_PrivateKey

def b2i_PublicKey(arg1, length):
    return _pygmssl.b2i_PublicKey(arg1, length)
b2i_PublicKey = _pygmssl.b2i_PublicKey

def b2i_PrivateKey_bio(arg1):
    return _pygmssl.b2i_PrivateKey_bio(arg1)
b2i_PrivateKey_bio = _pygmssl.b2i_PrivateKey_bio

def b2i_PublicKey_bio(arg1):
    return _pygmssl.b2i_PublicKey_bio(arg1)
b2i_PublicKey_bio = _pygmssl.b2i_PublicKey_bio

def i2b_PrivateKey_bio(out, pk):
    return _pygmssl.i2b_PrivateKey_bio(out, pk)
i2b_PrivateKey_bio = _pygmssl.i2b_PrivateKey_bio

def i2b_PublicKey_bio(out, pk):
    return _pygmssl.i2b_PublicKey_bio(out, pk)
i2b_PublicKey_bio = _pygmssl.i2b_PublicKey_bio

def b2i_PVK_bio(arg1, cb, u):
    return _pygmssl.b2i_PVK_bio(arg1, cb, u)
b2i_PVK_bio = _pygmssl.b2i_PVK_bio

def i2b_PVK_bio(out, pk, enclevel, cb, u):
    return _pygmssl.i2b_PVK_bio(out, pk, enclevel, cb, u)
i2b_PVK_bio = _pygmssl.i2b_PVK_bio

def ERR_load_PEM_strings():
    return _pygmssl.ERR_load_PEM_strings()
ERR_load_PEM_strings = _pygmssl.ERR_load_PEM_strings

def PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len):
    return _pygmssl.PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len)
PKCS7_ISSUER_AND_SERIAL_digest = _pygmssl.PKCS7_ISSUER_AND_SERIAL_digest

def d2i_PKCS7_fp(fp, p7):
    return _pygmssl.d2i_PKCS7_fp(fp, p7)
d2i_PKCS7_fp = _pygmssl.d2i_PKCS7_fp

def i2d_PKCS7_fp(fp, p7):
    return _pygmssl.i2d_PKCS7_fp(fp, p7)
i2d_PKCS7_fp = _pygmssl.i2d_PKCS7_fp

def PKCS7_dup(p7):
    return _pygmssl.PKCS7_dup(p7)
PKCS7_dup = _pygmssl.PKCS7_dup

def d2i_PKCS7_bio(bp, p7):
    return _pygmssl.d2i_PKCS7_bio(bp, p7)
d2i_PKCS7_bio = _pygmssl.d2i_PKCS7_bio

def i2d_PKCS7_bio(bp, p7):
    return _pygmssl.i2d_PKCS7_bio(bp, p7)
i2d_PKCS7_bio = _pygmssl.i2d_PKCS7_bio

def i2d_PKCS7_bio_stream(out, p7, arg3, flags):
    return _pygmssl.i2d_PKCS7_bio_stream(out, p7, arg3, flags)
i2d_PKCS7_bio_stream = _pygmssl.i2d_PKCS7_bio_stream

def PEM_write_bio_PKCS7_stream(out, p7, arg3, flags):
    return _pygmssl.PEM_write_bio_PKCS7_stream(out, p7, arg3, flags)
PEM_write_bio_PKCS7_stream = _pygmssl.PEM_write_bio_PKCS7_stream

def PKCS7_ctrl(p7, cmd, larg, parg):
    return _pygmssl.PKCS7_ctrl(p7, cmd, larg, parg)
PKCS7_ctrl = _pygmssl.PKCS7_ctrl

def PKCS7_set_type(p7, type):
    return _pygmssl.PKCS7_set_type(p7, type)
PKCS7_set_type = _pygmssl.PKCS7_set_type

def PKCS7_set0_type_other(p7, type, other):
    return _pygmssl.PKCS7_set0_type_other(p7, type, other)
PKCS7_set0_type_other = _pygmssl.PKCS7_set0_type_other

def PKCS7_set_content(p7, p7_data):
    return _pygmssl.PKCS7_set_content(p7, p7_data)
PKCS7_set_content = _pygmssl.PKCS7_set_content

def PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst):
    return _pygmssl.PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst)
PKCS7_SIGNER_INFO_set = _pygmssl.PKCS7_SIGNER_INFO_set

def PKCS7_SIGNER_INFO_sign(si):
    return _pygmssl.PKCS7_SIGNER_INFO_sign(si)
PKCS7_SIGNER_INFO_sign = _pygmssl.PKCS7_SIGNER_INFO_sign

def PKCS7_add_signer(p7, p7i):
    return _pygmssl.PKCS7_add_signer(p7, p7i)
PKCS7_add_signer = _pygmssl.PKCS7_add_signer

def PKCS7_add_certificate(p7, x509):
    return _pygmssl.PKCS7_add_certificate(p7, x509)
PKCS7_add_certificate = _pygmssl.PKCS7_add_certificate

def PKCS7_add_crl(p7, x509):
    return _pygmssl.PKCS7_add_crl(p7, x509)
PKCS7_add_crl = _pygmssl.PKCS7_add_crl

def PKCS7_content_new(p7, nid):
    return _pygmssl.PKCS7_content_new(p7, nid)
PKCS7_content_new = _pygmssl.PKCS7_content_new

def PKCS7_dataVerify(cert_store, ctx, bio, p7, si):
    return _pygmssl.PKCS7_dataVerify(cert_store, ctx, bio, p7, si)
PKCS7_dataVerify = _pygmssl.PKCS7_dataVerify

def PKCS7_signatureVerify(bio, p7, si, x509):
    return _pygmssl.PKCS7_signatureVerify(bio, p7, si, x509)
PKCS7_signatureVerify = _pygmssl.PKCS7_signatureVerify

def PKCS7_dataInit(p7, bio):
    return _pygmssl.PKCS7_dataInit(p7, bio)
PKCS7_dataInit = _pygmssl.PKCS7_dataInit

def PKCS7_dataFinal(p7, bio):
    return _pygmssl.PKCS7_dataFinal(p7, bio)
PKCS7_dataFinal = _pygmssl.PKCS7_dataFinal

def PKCS7_dataDecode(p7, pkey, in_bio, pcert):
    return _pygmssl.PKCS7_dataDecode(p7, pkey, in_bio, pcert)
PKCS7_dataDecode = _pygmssl.PKCS7_dataDecode

def PKCS7_add_signature(p7, x509, pkey, dgst):
    return _pygmssl.PKCS7_add_signature(p7, x509, pkey, dgst)
PKCS7_add_signature = _pygmssl.PKCS7_add_signature

def PKCS7_cert_from_signer_info(p7, si):
    return _pygmssl.PKCS7_cert_from_signer_info(p7, si)
PKCS7_cert_from_signer_info = _pygmssl.PKCS7_cert_from_signer_info

def PKCS7_set_digest(p7, md):
    return _pygmssl.PKCS7_set_digest(p7, md)
PKCS7_set_digest = _pygmssl.PKCS7_set_digest

def PKCS7_add_recipient(p7, x509):
    return _pygmssl.PKCS7_add_recipient(p7, x509)
PKCS7_add_recipient = _pygmssl.PKCS7_add_recipient

def PKCS7_SIGNER_INFO_get0_algs(si, pk, pdig, psig):
    return _pygmssl.PKCS7_SIGNER_INFO_get0_algs(si, pk, pdig, psig)
PKCS7_SIGNER_INFO_get0_algs = _pygmssl.PKCS7_SIGNER_INFO_get0_algs

def PKCS7_RECIP_INFO_get0_alg(ri, penc):
    return _pygmssl.PKCS7_RECIP_INFO_get0_alg(ri, penc)
PKCS7_RECIP_INFO_get0_alg = _pygmssl.PKCS7_RECIP_INFO_get0_alg

def PKCS7_add_recipient_info(p7, ri):
    return _pygmssl.PKCS7_add_recipient_info(p7, ri)
PKCS7_add_recipient_info = _pygmssl.PKCS7_add_recipient_info

def PKCS7_RECIP_INFO_set(p7i, x509):
    return _pygmssl.PKCS7_RECIP_INFO_set(p7i, x509)
PKCS7_RECIP_INFO_set = _pygmssl.PKCS7_RECIP_INFO_set

def PKCS7_set_cipher(p7, cipher):
    return _pygmssl.PKCS7_set_cipher(p7, cipher)
PKCS7_set_cipher = _pygmssl.PKCS7_set_cipher

def PKCS7_stream(boundary, p7):
    return _pygmssl.PKCS7_stream(boundary, p7)
PKCS7_stream = _pygmssl.PKCS7_stream

def PKCS7_get_issuer_and_serial(p7, idx):
    return _pygmssl.PKCS7_get_issuer_and_serial(p7, idx)
PKCS7_get_issuer_and_serial = _pygmssl.PKCS7_get_issuer_and_serial

def PKCS7_add_signed_attribute(p7si, nid, type, data):
    return _pygmssl.PKCS7_add_signed_attribute(p7si, nid, type, data)
PKCS7_add_signed_attribute = _pygmssl.PKCS7_add_signed_attribute

def PKCS7_add_attribute(p7si, nid, atrtype, value):
    return _pygmssl.PKCS7_add_attribute(p7si, nid, atrtype, value)
PKCS7_add_attribute = _pygmssl.PKCS7_add_attribute

def PKCS7_get_attribute(si, nid):
    return _pygmssl.PKCS7_get_attribute(si, nid)
PKCS7_get_attribute = _pygmssl.PKCS7_get_attribute

def PKCS7_get_signed_attribute(si, nid):
    return _pygmssl.PKCS7_get_signed_attribute(si, nid)
PKCS7_get_signed_attribute = _pygmssl.PKCS7_get_signed_attribute

def PKCS7_sign_add_signer(p7, signcert, pkey, md, flags):
    return _pygmssl.PKCS7_sign_add_signer(p7, signcert, pkey, md, flags)
PKCS7_sign_add_signer = _pygmssl.PKCS7_sign_add_signer

def PKCS7_final(p7, data, flags):
    return _pygmssl.PKCS7_final(p7, data, flags)
PKCS7_final = _pygmssl.PKCS7_final

def PKCS7_decrypt(p7, pkey, cert, data, flags):
    return _pygmssl.PKCS7_decrypt(p7, pkey, cert, data, flags)
PKCS7_decrypt = _pygmssl.PKCS7_decrypt

def PKCS7_add_attrib_content_type(si, coid):
    return _pygmssl.PKCS7_add_attrib_content_type(si, coid)
PKCS7_add_attrib_content_type = _pygmssl.PKCS7_add_attrib_content_type

def PKCS7_add0_attrib_signing_time(si, t):
    return _pygmssl.PKCS7_add0_attrib_signing_time(si, t)
PKCS7_add0_attrib_signing_time = _pygmssl.PKCS7_add0_attrib_signing_time

def PKCS7_add1_attrib_digest(si, md, mdlen):
    return _pygmssl.PKCS7_add1_attrib_digest(si, md, mdlen)
PKCS7_add1_attrib_digest = _pygmssl.PKCS7_add1_attrib_digest

def SMIME_write_PKCS7(bio, p7, data, flags):
    return _pygmssl.SMIME_write_PKCS7(bio, p7, data, flags)
SMIME_write_PKCS7 = _pygmssl.SMIME_write_PKCS7

def SMIME_read_PKCS7(bio, bcont):
    return _pygmssl.SMIME_read_PKCS7(bio, bcont)
SMIME_read_PKCS7 = _pygmssl.SMIME_read_PKCS7

def BIO_new_PKCS7(out, p7):
    return _pygmssl.BIO_new_PKCS7(out, p7)
BIO_new_PKCS7 = _pygmssl.BIO_new_PKCS7

def ERR_load_PKCS7_strings():
    return _pygmssl.ERR_load_PKCS7_strings()
ERR_load_PKCS7_strings = _pygmssl.ERR_load_PKCS7_strings

def PKCS8_get_attr(p8, attr_nid):
    return _pygmssl.PKCS8_get_attr(p8, attr_nid)
PKCS8_get_attr = _pygmssl.PKCS8_get_attr

def PKCS12_mac_present(p12):
    return _pygmssl.PKCS12_mac_present(p12)
PKCS12_mac_present = _pygmssl.PKCS12_mac_present

def PKCS12_get0_mac(pmac, pmacalg, psalt, piter, p12):
    return _pygmssl.PKCS12_get0_mac(pmac, pmacalg, psalt, piter, p12)
PKCS12_get0_mac = _pygmssl.PKCS12_get0_mac

def PKCS12_SAFEBAG_get0_attr(bag, attr_nid):
    return _pygmssl.PKCS12_SAFEBAG_get0_attr(bag, attr_nid)
PKCS12_SAFEBAG_get0_attr = _pygmssl.PKCS12_SAFEBAG_get0_attr

def PKCS12_SAFEBAG_get0_type(bag):
    return _pygmssl.PKCS12_SAFEBAG_get0_type(bag)
PKCS12_SAFEBAG_get0_type = _pygmssl.PKCS12_SAFEBAG_get0_type

def PKCS12_SAFEBAG_get_nid(bag):
    return _pygmssl.PKCS12_SAFEBAG_get_nid(bag)
PKCS12_SAFEBAG_get_nid = _pygmssl.PKCS12_SAFEBAG_get_nid

def PKCS12_SAFEBAG_get_bag_nid(bag):
    return _pygmssl.PKCS12_SAFEBAG_get_bag_nid(bag)
PKCS12_SAFEBAG_get_bag_nid = _pygmssl.PKCS12_SAFEBAG_get_bag_nid

def PKCS12_SAFEBAG_get1_cert(bag):
    return _pygmssl.PKCS12_SAFEBAG_get1_cert(bag)
PKCS12_SAFEBAG_get1_cert = _pygmssl.PKCS12_SAFEBAG_get1_cert

def PKCS12_SAFEBAG_get1_crl(bag):
    return _pygmssl.PKCS12_SAFEBAG_get1_crl(bag)
PKCS12_SAFEBAG_get1_crl = _pygmssl.PKCS12_SAFEBAG_get1_crl

def PKCS12_SAFEBAG_get0_p8inf(bag):
    return _pygmssl.PKCS12_SAFEBAG_get0_p8inf(bag)
PKCS12_SAFEBAG_get0_p8inf = _pygmssl.PKCS12_SAFEBAG_get0_p8inf

def PKCS12_SAFEBAG_get0_pkcs8(bag):
    return _pygmssl.PKCS12_SAFEBAG_get0_pkcs8(bag)
PKCS12_SAFEBAG_get0_pkcs8 = _pygmssl.PKCS12_SAFEBAG_get0_pkcs8

def PKCS12_SAFEBAG_create_cert(x509):
    return _pygmssl.PKCS12_SAFEBAG_create_cert(x509)
PKCS12_SAFEBAG_create_cert = _pygmssl.PKCS12_SAFEBAG_create_cert

def PKCS12_SAFEBAG_create_crl(crl):
    return _pygmssl.PKCS12_SAFEBAG_create_crl(crl)
PKCS12_SAFEBAG_create_crl = _pygmssl.PKCS12_SAFEBAG_create_crl

def PKCS12_SAFEBAG_create0_p8inf(p8):
    return _pygmssl.PKCS12_SAFEBAG_create0_p8inf(p8)
PKCS12_SAFEBAG_create0_p8inf = _pygmssl.PKCS12_SAFEBAG_create0_p8inf

def PKCS12_SAFEBAG_create0_pkcs8(p8):
    return _pygmssl.PKCS12_SAFEBAG_create0_pkcs8(p8)
PKCS12_SAFEBAG_create0_pkcs8 = _pygmssl.PKCS12_SAFEBAG_create0_pkcs8

def PKCS12_SAFEBAG_create_pkcs8_encrypt(pbe_nid, arg2, passlen, salt, saltlen, iter, p8inf):
    return _pygmssl.PKCS12_SAFEBAG_create_pkcs8_encrypt(pbe_nid, arg2, passlen, salt, saltlen, iter, p8inf)
PKCS12_SAFEBAG_create_pkcs8_encrypt = _pygmssl.PKCS12_SAFEBAG_create_pkcs8_encrypt

def PKCS12_item_pack_safebag(obj, it, nid1, nid2):
    return _pygmssl.PKCS12_item_pack_safebag(obj, it, nid1, nid2)
PKCS12_item_pack_safebag = _pygmssl.PKCS12_item_pack_safebag

def PKCS8_decrypt(p8, arg2, passlen):
    return _pygmssl.PKCS8_decrypt(p8, arg2, passlen)
PKCS8_decrypt = _pygmssl.PKCS8_decrypt

def PKCS12_decrypt_skey(bag, arg2, passlen):
    return _pygmssl.PKCS12_decrypt_skey(bag, arg2, passlen)
PKCS12_decrypt_skey = _pygmssl.PKCS12_decrypt_skey

def PKCS8_encrypt(pbe_nid, cipher, arg3, passlen, salt, saltlen, iter, p8):
    return _pygmssl.PKCS8_encrypt(pbe_nid, cipher, arg3, passlen, salt, saltlen, iter, p8)
PKCS8_encrypt = _pygmssl.PKCS8_encrypt

def PKCS8_set0_pbe(arg1, passlen, p8inf, pbe):
    return _pygmssl.PKCS8_set0_pbe(arg1, passlen, p8inf, pbe)
PKCS8_set0_pbe = _pygmssl.PKCS8_set0_pbe

def PKCS12_add_localkeyid(bag, name, namelen):
    return _pygmssl.PKCS12_add_localkeyid(bag, name, namelen)
PKCS12_add_localkeyid = _pygmssl.PKCS12_add_localkeyid

def PKCS12_add_friendlyname_asc(bag, name, namelen):
    return _pygmssl.PKCS12_add_friendlyname_asc(bag, name, namelen)
PKCS12_add_friendlyname_asc = _pygmssl.PKCS12_add_friendlyname_asc

def PKCS12_add_friendlyname_utf8(bag, name, namelen):
    return _pygmssl.PKCS12_add_friendlyname_utf8(bag, name, namelen)
PKCS12_add_friendlyname_utf8 = _pygmssl.PKCS12_add_friendlyname_utf8

def PKCS12_add_CSPName_asc(bag, name, namelen):
    return _pygmssl.PKCS12_add_CSPName_asc(bag, name, namelen)
PKCS12_add_CSPName_asc = _pygmssl.PKCS12_add_CSPName_asc

def PKCS12_add_friendlyname_uni(bag, name, namelen):
    return _pygmssl.PKCS12_add_friendlyname_uni(bag, name, namelen)
PKCS12_add_friendlyname_uni = _pygmssl.PKCS12_add_friendlyname_uni

def PKCS8_add_keyusage(p8, usage):
    return _pygmssl.PKCS8_add_keyusage(p8, usage)
PKCS8_add_keyusage = _pygmssl.PKCS8_add_keyusage

def PKCS12_get_friendlyname(bag):
    return _pygmssl.PKCS12_get_friendlyname(bag)
PKCS12_get_friendlyname = _pygmssl.PKCS12_get_friendlyname

def PKCS12_pbe_crypt(algor, arg2, passlen, arg4, inlen, data, datalen, en_de):
    return _pygmssl.PKCS12_pbe_crypt(algor, arg2, passlen, arg4, inlen, data, datalen, en_de)
PKCS12_pbe_crypt = _pygmssl.PKCS12_pbe_crypt

def PKCS12_item_decrypt_d2i(algor, it, arg3, passlen, oct, zbuf):
    return _pygmssl.PKCS12_item_decrypt_d2i(algor, it, arg3, passlen, oct, zbuf)
PKCS12_item_decrypt_d2i = _pygmssl.PKCS12_item_decrypt_d2i

def PKCS12_item_i2d_encrypt(algor, it, arg3, passlen, obj, zbuf):
    return _pygmssl.PKCS12_item_i2d_encrypt(algor, it, arg3, passlen, obj, zbuf)
PKCS12_item_i2d_encrypt = _pygmssl.PKCS12_item_i2d_encrypt

def PKCS12_init(mode):
    return _pygmssl.PKCS12_init(mode)
PKCS12_init = _pygmssl.PKCS12_init

def PKCS12_key_gen_asc(arg1, passlen, salt, saltlen, id, iter, n, out, md_type):
    return _pygmssl.PKCS12_key_gen_asc(arg1, passlen, salt, saltlen, id, iter, n, out, md_type)
PKCS12_key_gen_asc = _pygmssl.PKCS12_key_gen_asc

def PKCS12_key_gen_uni(arg1, passlen, salt, saltlen, id, iter, n, out, md_type):
    return _pygmssl.PKCS12_key_gen_uni(arg1, passlen, salt, saltlen, id, iter, n, out, md_type)
PKCS12_key_gen_uni = _pygmssl.PKCS12_key_gen_uni

def PKCS12_key_gen_utf8(arg1, passlen, salt, saltlen, id, iter, n, out, md_type):
    return _pygmssl.PKCS12_key_gen_utf8(arg1, passlen, salt, saltlen, id, iter, n, out, md_type)
PKCS12_key_gen_utf8 = _pygmssl.PKCS12_key_gen_utf8

def PKCS12_PBE_keyivgen(ctx, arg2, passlen, param, cipher, md_type, en_de):
    return _pygmssl.PKCS12_PBE_keyivgen(ctx, arg2, passlen, param, cipher, md_type, en_de)
PKCS12_PBE_keyivgen = _pygmssl.PKCS12_PBE_keyivgen

def PKCS12_gen_mac(p12, arg2, passlen, mac, maclen):
    return _pygmssl.PKCS12_gen_mac(p12, arg2, passlen, mac, maclen)
PKCS12_gen_mac = _pygmssl.PKCS12_gen_mac

def PKCS12_verify_mac(p12, arg2, passlen):
    return _pygmssl.PKCS12_verify_mac(p12, arg2, passlen)
PKCS12_verify_mac = _pygmssl.PKCS12_verify_mac

def PKCS12_set_mac(p12, arg2, passlen, salt, saltlen, iter, md_type):
    return _pygmssl.PKCS12_set_mac(p12, arg2, passlen, salt, saltlen, iter, md_type)
PKCS12_set_mac = _pygmssl.PKCS12_set_mac

def PKCS12_setup_mac(p12, iter, salt, saltlen, md_type):
    return _pygmssl.PKCS12_setup_mac(p12, iter, salt, saltlen, md_type)
PKCS12_setup_mac = _pygmssl.PKCS12_setup_mac

def OPENSSL_asc2uni(asc, asclen, uni, unilen):
    return _pygmssl.OPENSSL_asc2uni(asc, asclen, uni, unilen)
OPENSSL_asc2uni = _pygmssl.OPENSSL_asc2uni

def OPENSSL_uni2asc(uni, unilen):
    return _pygmssl.OPENSSL_uni2asc(uni, unilen)
OPENSSL_uni2asc = _pygmssl.OPENSSL_uni2asc

def OPENSSL_utf82uni(asc, asclen, uni, unilen):
    return _pygmssl.OPENSSL_utf82uni(asc, asclen, uni, unilen)
OPENSSL_utf82uni = _pygmssl.OPENSSL_utf82uni

def OPENSSL_uni2utf8(uni, unilen):
    return _pygmssl.OPENSSL_uni2utf8(uni, unilen)
OPENSSL_uni2utf8 = _pygmssl.OPENSSL_uni2utf8

def PKCS12_PBE_add():
    return _pygmssl.PKCS12_PBE_add()
PKCS12_PBE_add = _pygmssl.PKCS12_PBE_add

def i2d_PKCS12_bio(bp, p12):
    return _pygmssl.i2d_PKCS12_bio(bp, p12)
i2d_PKCS12_bio = _pygmssl.i2d_PKCS12_bio

def i2d_PKCS12_fp(fp, p12):
    return _pygmssl.i2d_PKCS12_fp(fp, p12)
i2d_PKCS12_fp = _pygmssl.i2d_PKCS12_fp

def d2i_PKCS12_bio(bp, p12):
    return _pygmssl.d2i_PKCS12_bio(bp, p12)
d2i_PKCS12_bio = _pygmssl.d2i_PKCS12_bio

def d2i_PKCS12_fp(fp, p12):
    return _pygmssl.d2i_PKCS12_fp(fp, p12)
d2i_PKCS12_fp = _pygmssl.d2i_PKCS12_fp

def PKCS12_newpass(p12, oldpass, newpass):
    return _pygmssl.PKCS12_newpass(p12, oldpass, newpass)
PKCS12_newpass = _pygmssl.PKCS12_newpass

def ERR_load_PKCS12_strings():
    return _pygmssl.ERR_load_PKCS12_strings()
ERR_load_PKCS12_strings = _pygmssl.ERR_load_PKCS12_strings

def X509_CRL_set_default_method(meth):
    return _pygmssl.X509_CRL_set_default_method(meth)
X509_CRL_set_default_method = _pygmssl.X509_CRL_set_default_method

def X509_CRL_METHOD_free(m):
    return _pygmssl.X509_CRL_METHOD_free(m)
X509_CRL_METHOD_free = _pygmssl.X509_CRL_METHOD_free

def X509_CRL_set_meth_data(crl, dat):
    return _pygmssl.X509_CRL_set_meth_data(crl, dat)
X509_CRL_set_meth_data = _pygmssl.X509_CRL_set_meth_data

def X509_CRL_get_meth_data(crl):
    return _pygmssl.X509_CRL_get_meth_data(crl)
X509_CRL_get_meth_data = _pygmssl.X509_CRL_get_meth_data

def X509_verify_cert_error_string(n):
    return _pygmssl.X509_verify_cert_error_string(n)
X509_verify_cert_error_string = _pygmssl.X509_verify_cert_error_string

def X509_verify(a, r):
    return _pygmssl.X509_verify(a, r)
X509_verify = _pygmssl.X509_verify

def X509_REQ_verify(a, r):
    return _pygmssl.X509_REQ_verify(a, r)
X509_REQ_verify = _pygmssl.X509_REQ_verify

def X509_CRL_verify(a, r):
    return _pygmssl.X509_CRL_verify(a, r)
X509_CRL_verify = _pygmssl.X509_CRL_verify

def NETSCAPE_SPKI_verify(a, r):
    return _pygmssl.NETSCAPE_SPKI_verify(a, r)
NETSCAPE_SPKI_verify = _pygmssl.NETSCAPE_SPKI_verify

def NETSCAPE_SPKI_b64_decode(str, len):
    return _pygmssl.NETSCAPE_SPKI_b64_decode(str, len)
NETSCAPE_SPKI_b64_decode = _pygmssl.NETSCAPE_SPKI_b64_decode

def NETSCAPE_SPKI_b64_encode(x):
    return _pygmssl.NETSCAPE_SPKI_b64_encode(x)
NETSCAPE_SPKI_b64_encode = _pygmssl.NETSCAPE_SPKI_b64_encode

def NETSCAPE_SPKI_get_pubkey(x):
    return _pygmssl.NETSCAPE_SPKI_get_pubkey(x)
NETSCAPE_SPKI_get_pubkey = _pygmssl.NETSCAPE_SPKI_get_pubkey

def NETSCAPE_SPKI_set_pubkey(x, pkey):
    return _pygmssl.NETSCAPE_SPKI_set_pubkey(x, pkey)
NETSCAPE_SPKI_set_pubkey = _pygmssl.NETSCAPE_SPKI_set_pubkey

def NETSCAPE_SPKI_print(out, spki):
    return _pygmssl.NETSCAPE_SPKI_print(out, spki)
NETSCAPE_SPKI_print = _pygmssl.NETSCAPE_SPKI_print

def X509_signature_dump(bp, sig, indent):
    return _pygmssl.X509_signature_dump(bp, sig, indent)
X509_signature_dump = _pygmssl.X509_signature_dump

def X509_signature_print(bp, alg, sig):
    return _pygmssl.X509_signature_print(bp, alg, sig)
X509_signature_print = _pygmssl.X509_signature_print

def X509_sign(x, pkey, md):
    return _pygmssl.X509_sign(x, pkey, md)
X509_sign = _pygmssl.X509_sign

def X509_sign_ctx(x, ctx):
    return _pygmssl.X509_sign_ctx(x, ctx)
X509_sign_ctx = _pygmssl.X509_sign_ctx

def X509_http_nbio(rctx, pcert):
    return _pygmssl.X509_http_nbio(rctx, pcert)
X509_http_nbio = _pygmssl.X509_http_nbio

def X509_REQ_sign(x, pkey, md):
    return _pygmssl.X509_REQ_sign(x, pkey, md)
X509_REQ_sign = _pygmssl.X509_REQ_sign

def X509_REQ_sign_ctx(x, ctx):
    return _pygmssl.X509_REQ_sign_ctx(x, ctx)
X509_REQ_sign_ctx = _pygmssl.X509_REQ_sign_ctx

def X509_CRL_sign(x, pkey, md):
    return _pygmssl.X509_CRL_sign(x, pkey, md)
X509_CRL_sign = _pygmssl.X509_CRL_sign

def X509_CRL_sign_ctx(x, ctx):
    return _pygmssl.X509_CRL_sign_ctx(x, ctx)
X509_CRL_sign_ctx = _pygmssl.X509_CRL_sign_ctx

def X509_CRL_http_nbio(rctx, pcrl):
    return _pygmssl.X509_CRL_http_nbio(rctx, pcrl)
X509_CRL_http_nbio = _pygmssl.X509_CRL_http_nbio

def NETSCAPE_SPKI_sign(x, pkey, md):
    return _pygmssl.NETSCAPE_SPKI_sign(x, pkey, md)
NETSCAPE_SPKI_sign = _pygmssl.NETSCAPE_SPKI_sign

def X509_pubkey_digest(data, type, md, len):
    return _pygmssl.X509_pubkey_digest(data, type, md, len)
X509_pubkey_digest = _pygmssl.X509_pubkey_digest

def X509_digest(data, type, md, len):
    return _pygmssl.X509_digest(data, type, md, len)
X509_digest = _pygmssl.X509_digest

def X509_CRL_digest(data, type, md, len):
    return _pygmssl.X509_CRL_digest(data, type, md, len)
X509_CRL_digest = _pygmssl.X509_CRL_digest

def X509_REQ_digest(data, type, md, len):
    return _pygmssl.X509_REQ_digest(data, type, md, len)
X509_REQ_digest = _pygmssl.X509_REQ_digest

def X509_NAME_digest(data, type, md, len):
    return _pygmssl.X509_NAME_digest(data, type, md, len)
X509_NAME_digest = _pygmssl.X509_NAME_digest

def d2i_X509_fp(fp, x509):
    return _pygmssl.d2i_X509_fp(fp, x509)
d2i_X509_fp = _pygmssl.d2i_X509_fp

def i2d_X509_fp(fp, x509):
    return _pygmssl.i2d_X509_fp(fp, x509)
i2d_X509_fp = _pygmssl.i2d_X509_fp

def d2i_X509_CRL_fp(fp, crl):
    return _pygmssl.d2i_X509_CRL_fp(fp, crl)
d2i_X509_CRL_fp = _pygmssl.d2i_X509_CRL_fp

def i2d_X509_CRL_fp(fp, crl):
    return _pygmssl.i2d_X509_CRL_fp(fp, crl)
i2d_X509_CRL_fp = _pygmssl.i2d_X509_CRL_fp

def d2i_X509_REQ_fp(fp, req):
    return _pygmssl.d2i_X509_REQ_fp(fp, req)
d2i_X509_REQ_fp = _pygmssl.d2i_X509_REQ_fp

def i2d_X509_REQ_fp(fp, req):
    return _pygmssl.i2d_X509_REQ_fp(fp, req)
i2d_X509_REQ_fp = _pygmssl.i2d_X509_REQ_fp

def d2i_RSAPrivateKey_fp(fp, rsa):
    return _pygmssl.d2i_RSAPrivateKey_fp(fp, rsa)
d2i_RSAPrivateKey_fp = _pygmssl.d2i_RSAPrivateKey_fp

def i2d_RSAPrivateKey_fp(fp, rsa):
    return _pygmssl.i2d_RSAPrivateKey_fp(fp, rsa)
i2d_RSAPrivateKey_fp = _pygmssl.i2d_RSAPrivateKey_fp

def d2i_RSAPublicKey_fp(fp, rsa):
    return _pygmssl.d2i_RSAPublicKey_fp(fp, rsa)
d2i_RSAPublicKey_fp = _pygmssl.d2i_RSAPublicKey_fp

def i2d_RSAPublicKey_fp(fp, rsa):
    return _pygmssl.i2d_RSAPublicKey_fp(fp, rsa)
i2d_RSAPublicKey_fp = _pygmssl.i2d_RSAPublicKey_fp

def d2i_RSA_PUBKEY_fp(fp, rsa):
    return _pygmssl.d2i_RSA_PUBKEY_fp(fp, rsa)
d2i_RSA_PUBKEY_fp = _pygmssl.d2i_RSA_PUBKEY_fp

def i2d_RSA_PUBKEY_fp(fp, rsa):
    return _pygmssl.i2d_RSA_PUBKEY_fp(fp, rsa)
i2d_RSA_PUBKEY_fp = _pygmssl.i2d_RSA_PUBKEY_fp

def d2i_DSA_PUBKEY_fp(fp, dsa):
    return _pygmssl.d2i_DSA_PUBKEY_fp(fp, dsa)
d2i_DSA_PUBKEY_fp = _pygmssl.d2i_DSA_PUBKEY_fp

def i2d_DSA_PUBKEY_fp(fp, dsa):
    return _pygmssl.i2d_DSA_PUBKEY_fp(fp, dsa)
i2d_DSA_PUBKEY_fp = _pygmssl.i2d_DSA_PUBKEY_fp

def d2i_DSAPrivateKey_fp(fp, dsa):
    return _pygmssl.d2i_DSAPrivateKey_fp(fp, dsa)
d2i_DSAPrivateKey_fp = _pygmssl.d2i_DSAPrivateKey_fp

def i2d_DSAPrivateKey_fp(fp, dsa):
    return _pygmssl.i2d_DSAPrivateKey_fp(fp, dsa)
i2d_DSAPrivateKey_fp = _pygmssl.i2d_DSAPrivateKey_fp

def d2i_EC_PUBKEY_fp(fp, eckey):
    return _pygmssl.d2i_EC_PUBKEY_fp(fp, eckey)
d2i_EC_PUBKEY_fp = _pygmssl.d2i_EC_PUBKEY_fp

def i2d_EC_PUBKEY_fp(fp, eckey):
    return _pygmssl.i2d_EC_PUBKEY_fp(fp, eckey)
i2d_EC_PUBKEY_fp = _pygmssl.i2d_EC_PUBKEY_fp

def d2i_ECPrivateKey_fp(fp, eckey):
    return _pygmssl.d2i_ECPrivateKey_fp(fp, eckey)
d2i_ECPrivateKey_fp = _pygmssl.d2i_ECPrivateKey_fp

def i2d_ECPrivateKey_fp(fp, eckey):
    return _pygmssl.i2d_ECPrivateKey_fp(fp, eckey)
i2d_ECPrivateKey_fp = _pygmssl.i2d_ECPrivateKey_fp

def d2i_PKCS8_fp(fp, p8):
    return _pygmssl.d2i_PKCS8_fp(fp, p8)
d2i_PKCS8_fp = _pygmssl.d2i_PKCS8_fp

def i2d_PKCS8_fp(fp, p8):
    return _pygmssl.i2d_PKCS8_fp(fp, p8)
i2d_PKCS8_fp = _pygmssl.i2d_PKCS8_fp

def d2i_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf):
    return _pygmssl.d2i_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf)
d2i_PKCS8_PRIV_KEY_INFO_fp = _pygmssl.d2i_PKCS8_PRIV_KEY_INFO_fp

def i2d_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf):
    return _pygmssl.i2d_PKCS8_PRIV_KEY_INFO_fp(fp, p8inf)
i2d_PKCS8_PRIV_KEY_INFO_fp = _pygmssl.i2d_PKCS8_PRIV_KEY_INFO_fp

def i2d_PKCS8PrivateKeyInfo_fp(fp, key):
    return _pygmssl.i2d_PKCS8PrivateKeyInfo_fp(fp, key)
i2d_PKCS8PrivateKeyInfo_fp = _pygmssl.i2d_PKCS8PrivateKeyInfo_fp

def i2d_PrivateKey_fp(fp, pkey):
    return _pygmssl.i2d_PrivateKey_fp(fp, pkey)
i2d_PrivateKey_fp = _pygmssl.i2d_PrivateKey_fp

def d2i_PrivateKey_fp(fp, a):
    return _pygmssl.d2i_PrivateKey_fp(fp, a)
d2i_PrivateKey_fp = _pygmssl.d2i_PrivateKey_fp

def i2d_PUBKEY_fp(fp, pkey):
    return _pygmssl.i2d_PUBKEY_fp(fp, pkey)
i2d_PUBKEY_fp = _pygmssl.i2d_PUBKEY_fp

def d2i_PUBKEY_fp(fp, a):
    return _pygmssl.d2i_PUBKEY_fp(fp, a)
d2i_PUBKEY_fp = _pygmssl.d2i_PUBKEY_fp

def d2i_X509_bio(bp, x509):
    return _pygmssl.d2i_X509_bio(bp, x509)
d2i_X509_bio = _pygmssl.d2i_X509_bio

def i2d_X509_bio(bp, x509):
    return _pygmssl.i2d_X509_bio(bp, x509)
i2d_X509_bio = _pygmssl.i2d_X509_bio

def d2i_X509_CRL_bio(bp, crl):
    return _pygmssl.d2i_X509_CRL_bio(bp, crl)
d2i_X509_CRL_bio = _pygmssl.d2i_X509_CRL_bio

def i2d_X509_CRL_bio(bp, crl):
    return _pygmssl.i2d_X509_CRL_bio(bp, crl)
i2d_X509_CRL_bio = _pygmssl.i2d_X509_CRL_bio

def d2i_X509_REQ_bio(bp, req):
    return _pygmssl.d2i_X509_REQ_bio(bp, req)
d2i_X509_REQ_bio = _pygmssl.d2i_X509_REQ_bio

def i2d_X509_REQ_bio(bp, req):
    return _pygmssl.i2d_X509_REQ_bio(bp, req)
i2d_X509_REQ_bio = _pygmssl.i2d_X509_REQ_bio

def d2i_RSAPrivateKey_bio(bp, rsa):
    return _pygmssl.d2i_RSAPrivateKey_bio(bp, rsa)
d2i_RSAPrivateKey_bio = _pygmssl.d2i_RSAPrivateKey_bio

def i2d_RSAPrivateKey_bio(bp, rsa):
    return _pygmssl.i2d_RSAPrivateKey_bio(bp, rsa)
i2d_RSAPrivateKey_bio = _pygmssl.i2d_RSAPrivateKey_bio

def d2i_RSAPublicKey_bio(bp, rsa):
    return _pygmssl.d2i_RSAPublicKey_bio(bp, rsa)
d2i_RSAPublicKey_bio = _pygmssl.d2i_RSAPublicKey_bio

def i2d_RSAPublicKey_bio(bp, rsa):
    return _pygmssl.i2d_RSAPublicKey_bio(bp, rsa)
i2d_RSAPublicKey_bio = _pygmssl.i2d_RSAPublicKey_bio

def d2i_RSA_PUBKEY_bio(bp, rsa):
    return _pygmssl.d2i_RSA_PUBKEY_bio(bp, rsa)
d2i_RSA_PUBKEY_bio = _pygmssl.d2i_RSA_PUBKEY_bio

def i2d_RSA_PUBKEY_bio(bp, rsa):
    return _pygmssl.i2d_RSA_PUBKEY_bio(bp, rsa)
i2d_RSA_PUBKEY_bio = _pygmssl.i2d_RSA_PUBKEY_bio

def d2i_DSA_PUBKEY_bio(bp, dsa):
    return _pygmssl.d2i_DSA_PUBKEY_bio(bp, dsa)
d2i_DSA_PUBKEY_bio = _pygmssl.d2i_DSA_PUBKEY_bio

def i2d_DSA_PUBKEY_bio(bp, dsa):
    return _pygmssl.i2d_DSA_PUBKEY_bio(bp, dsa)
i2d_DSA_PUBKEY_bio = _pygmssl.i2d_DSA_PUBKEY_bio

def d2i_DSAPrivateKey_bio(bp, dsa):
    return _pygmssl.d2i_DSAPrivateKey_bio(bp, dsa)
d2i_DSAPrivateKey_bio = _pygmssl.d2i_DSAPrivateKey_bio

def i2d_DSAPrivateKey_bio(bp, dsa):
    return _pygmssl.i2d_DSAPrivateKey_bio(bp, dsa)
i2d_DSAPrivateKey_bio = _pygmssl.i2d_DSAPrivateKey_bio

def d2i_EC_PUBKEY_bio(bp, eckey):
    return _pygmssl.d2i_EC_PUBKEY_bio(bp, eckey)
d2i_EC_PUBKEY_bio = _pygmssl.d2i_EC_PUBKEY_bio

def i2d_EC_PUBKEY_bio(bp, eckey):
    return _pygmssl.i2d_EC_PUBKEY_bio(bp, eckey)
i2d_EC_PUBKEY_bio = _pygmssl.i2d_EC_PUBKEY_bio

def d2i_ECPrivateKey_bio(bp, eckey):
    return _pygmssl.d2i_ECPrivateKey_bio(bp, eckey)
d2i_ECPrivateKey_bio = _pygmssl.d2i_ECPrivateKey_bio

def i2d_ECPrivateKey_bio(bp, eckey):
    return _pygmssl.i2d_ECPrivateKey_bio(bp, eckey)
i2d_ECPrivateKey_bio = _pygmssl.i2d_ECPrivateKey_bio

def d2i_PKCS8_bio(bp, p8):
    return _pygmssl.d2i_PKCS8_bio(bp, p8)
d2i_PKCS8_bio = _pygmssl.d2i_PKCS8_bio

def i2d_PKCS8_bio(bp, p8):
    return _pygmssl.i2d_PKCS8_bio(bp, p8)
i2d_PKCS8_bio = _pygmssl.i2d_PKCS8_bio

def d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf):
    return _pygmssl.d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf)
d2i_PKCS8_PRIV_KEY_INFO_bio = _pygmssl.d2i_PKCS8_PRIV_KEY_INFO_bio

def i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf):
    return _pygmssl.i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf)
i2d_PKCS8_PRIV_KEY_INFO_bio = _pygmssl.i2d_PKCS8_PRIV_KEY_INFO_bio

def i2d_PKCS8PrivateKeyInfo_bio(bp, key):
    return _pygmssl.i2d_PKCS8PrivateKeyInfo_bio(bp, key)
i2d_PKCS8PrivateKeyInfo_bio = _pygmssl.i2d_PKCS8PrivateKeyInfo_bio

def i2d_PrivateKey_bio(bp, pkey):
    return _pygmssl.i2d_PrivateKey_bio(bp, pkey)
i2d_PrivateKey_bio = _pygmssl.i2d_PrivateKey_bio

def d2i_PrivateKey_bio(bp, a):
    return _pygmssl.d2i_PrivateKey_bio(bp, a)
d2i_PrivateKey_bio = _pygmssl.d2i_PrivateKey_bio

def i2d_PUBKEY_bio(bp, pkey):
    return _pygmssl.i2d_PUBKEY_bio(bp, pkey)
i2d_PUBKEY_bio = _pygmssl.i2d_PUBKEY_bio

def d2i_PUBKEY_bio(bp, a):
    return _pygmssl.d2i_PUBKEY_bio(bp, a)
d2i_PUBKEY_bio = _pygmssl.d2i_PUBKEY_bio

def X509_dup(x509):
    return _pygmssl.X509_dup(x509)
X509_dup = _pygmssl.X509_dup

def X509_ATTRIBUTE_dup(xa):
    return _pygmssl.X509_ATTRIBUTE_dup(xa)
X509_ATTRIBUTE_dup = _pygmssl.X509_ATTRIBUTE_dup

def X509_EXTENSION_dup(ex):
    return _pygmssl.X509_EXTENSION_dup(ex)
X509_EXTENSION_dup = _pygmssl.X509_EXTENSION_dup

def X509_CRL_dup(crl):
    return _pygmssl.X509_CRL_dup(crl)
X509_CRL_dup = _pygmssl.X509_CRL_dup

def X509_REVOKED_dup(rev):
    return _pygmssl.X509_REVOKED_dup(rev)
X509_REVOKED_dup = _pygmssl.X509_REVOKED_dup

def X509_REQ_dup(req):
    return _pygmssl.X509_REQ_dup(req)
X509_REQ_dup = _pygmssl.X509_REQ_dup

def X509_ALGOR_dup(xn):
    return _pygmssl.X509_ALGOR_dup(xn)
X509_ALGOR_dup = _pygmssl.X509_ALGOR_dup

def X509_ALGOR_set0(alg, aobj, ptype, pval):
    return _pygmssl.X509_ALGOR_set0(alg, aobj, ptype, pval)
X509_ALGOR_set0 = _pygmssl.X509_ALGOR_set0

def X509_ALGOR_get0(paobj, pptype, ppval, algor):
    return _pygmssl.X509_ALGOR_get0(paobj, pptype, ppval, algor)
X509_ALGOR_get0 = _pygmssl.X509_ALGOR_get0

def X509_ALGOR_set_md(alg, md):
    return _pygmssl.X509_ALGOR_set_md(alg, md)
X509_ALGOR_set_md = _pygmssl.X509_ALGOR_set_md

def X509_ALGOR_cmp(a, b):
    return _pygmssl.X509_ALGOR_cmp(a, b)
X509_ALGOR_cmp = _pygmssl.X509_ALGOR_cmp

def X509_NAME_dup(xn):
    return _pygmssl.X509_NAME_dup(xn)
X509_NAME_dup = _pygmssl.X509_NAME_dup

def X509_NAME_ENTRY_dup(ne):
    return _pygmssl.X509_NAME_ENTRY_dup(ne)
X509_NAME_ENTRY_dup = _pygmssl.X509_NAME_ENTRY_dup

def X509_cmp_time(s, t):
    return _pygmssl.X509_cmp_time(s, t)
X509_cmp_time = _pygmssl.X509_cmp_time

def X509_cmp_current_time(s):
    return _pygmssl.X509_cmp_current_time(s)
X509_cmp_current_time = _pygmssl.X509_cmp_current_time

def X509_time_adj(s, adj, t):
    return _pygmssl.X509_time_adj(s, adj, t)
X509_time_adj = _pygmssl.X509_time_adj

def X509_time_adj_ex(s, offset_day, offset_sec, t):
    return _pygmssl.X509_time_adj_ex(s, offset_day, offset_sec, t)
X509_time_adj_ex = _pygmssl.X509_time_adj_ex

def X509_gmtime_adj(s, adj):
    return _pygmssl.X509_gmtime_adj(s, adj)
X509_gmtime_adj = _pygmssl.X509_gmtime_adj

def X509_get_default_cert_area():
    return _pygmssl.X509_get_default_cert_area()
X509_get_default_cert_area = _pygmssl.X509_get_default_cert_area

def X509_get_default_cert_dir():
    return _pygmssl.X509_get_default_cert_dir()
X509_get_default_cert_dir = _pygmssl.X509_get_default_cert_dir

def X509_get_default_cert_file():
    return _pygmssl.X509_get_default_cert_file()
X509_get_default_cert_file = _pygmssl.X509_get_default_cert_file

def X509_get_default_cert_dir_env():
    return _pygmssl.X509_get_default_cert_dir_env()
X509_get_default_cert_dir_env = _pygmssl.X509_get_default_cert_dir_env

def X509_get_default_cert_file_env():
    return _pygmssl.X509_get_default_cert_file_env()
X509_get_default_cert_file_env = _pygmssl.X509_get_default_cert_file_env

def X509_get_default_private_dir():
    return _pygmssl.X509_get_default_private_dir()
X509_get_default_private_dir = _pygmssl.X509_get_default_private_dir

def X509_to_X509_REQ(x, pkey, md):
    return _pygmssl.X509_to_X509_REQ(x, pkey, md)
X509_to_X509_REQ = _pygmssl.X509_to_X509_REQ

def X509_REQ_to_X509(r, days, pkey):
    return _pygmssl.X509_REQ_to_X509(r, days, pkey)
X509_REQ_to_X509 = _pygmssl.X509_REQ_to_X509

def X509_PUBKEY_set(x, pkey):
    return _pygmssl.X509_PUBKEY_set(x, pkey)
X509_PUBKEY_set = _pygmssl.X509_PUBKEY_set

def X509_PUBKEY_get0(key):
    return _pygmssl.X509_PUBKEY_get0(key)
X509_PUBKEY_get0 = _pygmssl.X509_PUBKEY_get0

def X509_PUBKEY_get(key):
    return _pygmssl.X509_PUBKEY_get(key)
X509_PUBKEY_get = _pygmssl.X509_PUBKEY_get

def X509_get_pathlen(x):
    return _pygmssl.X509_get_pathlen(x)
X509_get_pathlen = _pygmssl.X509_get_pathlen

def i2d_PUBKEY(a, pp):
    return _pygmssl.i2d_PUBKEY(a, pp)
i2d_PUBKEY = _pygmssl.i2d_PUBKEY

def d2i_PUBKEY(a, pp, length):
    return _pygmssl.d2i_PUBKEY(a, pp, length)
d2i_PUBKEY = _pygmssl.d2i_PUBKEY

def i2d_RSA_PUBKEY(a, pp):
    return _pygmssl.i2d_RSA_PUBKEY(a, pp)
i2d_RSA_PUBKEY = _pygmssl.i2d_RSA_PUBKEY

def d2i_RSA_PUBKEY(a, pp, length):
    return _pygmssl.d2i_RSA_PUBKEY(a, pp, length)
d2i_RSA_PUBKEY = _pygmssl.d2i_RSA_PUBKEY

def i2d_DSA_PUBKEY(a, pp):
    return _pygmssl.i2d_DSA_PUBKEY(a, pp)
i2d_DSA_PUBKEY = _pygmssl.i2d_DSA_PUBKEY

def d2i_DSA_PUBKEY(a, pp, length):
    return _pygmssl.d2i_DSA_PUBKEY(a, pp, length)
d2i_DSA_PUBKEY = _pygmssl.d2i_DSA_PUBKEY

def i2d_EC_PUBKEY(a, pp):
    return _pygmssl.i2d_EC_PUBKEY(a, pp)
i2d_EC_PUBKEY = _pygmssl.i2d_EC_PUBKEY

def d2i_EC_PUBKEY(a, pp, length):
    return _pygmssl.d2i_EC_PUBKEY(a, pp, length)
d2i_EC_PUBKEY = _pygmssl.d2i_EC_PUBKEY

def i2d_PAILLIER_PUBKEY(a, pp):
    return _pygmssl.i2d_PAILLIER_PUBKEY(a, pp)
i2d_PAILLIER_PUBKEY = _pygmssl.i2d_PAILLIER_PUBKEY

def d2i_PAILLIER_PUBKEY(a, pp, length):
    return _pygmssl.d2i_PAILLIER_PUBKEY(a, pp, length)
d2i_PAILLIER_PUBKEY = _pygmssl.d2i_PAILLIER_PUBKEY

def X509_SIG_get0(sig, palg, pdigest):
    return _pygmssl.X509_SIG_get0(sig, palg, pdigest)
X509_SIG_get0 = _pygmssl.X509_SIG_get0

def X509_SIG_getm(sig, palg, pdigest):
    return _pygmssl.X509_SIG_getm(sig, palg, pdigest)
X509_SIG_getm = _pygmssl.X509_SIG_getm

def X509_ATTRIBUTE_create(nid, atrtype, value):
    return _pygmssl.X509_ATTRIBUTE_create(nid, atrtype, value)
X509_ATTRIBUTE_create = _pygmssl.X509_ATTRIBUTE_create

def X509_NAME_set(xn, name):
    return _pygmssl.X509_NAME_set(xn, name)
X509_NAME_set = _pygmssl.X509_NAME_set

def X509_set_ex_data(r, idx, arg):
    return _pygmssl.X509_set_ex_data(r, idx, arg)
X509_set_ex_data = _pygmssl.X509_set_ex_data

def X509_get_ex_data(r, idx):
    return _pygmssl.X509_get_ex_data(r, idx)
X509_get_ex_data = _pygmssl.X509_get_ex_data

def i2d_X509_AUX(a, pp):
    return _pygmssl.i2d_X509_AUX(a, pp)
i2d_X509_AUX = _pygmssl.i2d_X509_AUX

def d2i_X509_AUX(a, pp, length):
    return _pygmssl.d2i_X509_AUX(a, pp, length)
d2i_X509_AUX = _pygmssl.d2i_X509_AUX

def i2d_re_X509_tbs(x, pp):
    return _pygmssl.i2d_re_X509_tbs(x, pp)
i2d_re_X509_tbs = _pygmssl.i2d_re_X509_tbs

def X509_get0_signature(psig, palg, x):
    return _pygmssl.X509_get0_signature(psig, palg, x)
X509_get0_signature = _pygmssl.X509_get0_signature

def X509_get_signature_nid(x):
    return _pygmssl.X509_get_signature_nid(x)
X509_get_signature_nid = _pygmssl.X509_get_signature_nid

def X509_trusted(x):
    return _pygmssl.X509_trusted(x)
X509_trusted = _pygmssl.X509_trusted

def X509_alias_set1(x, name, len):
    return _pygmssl.X509_alias_set1(x, name, len)
X509_alias_set1 = _pygmssl.X509_alias_set1

def X509_keyid_set1(x, id, len):
    return _pygmssl.X509_keyid_set1(x, id, len)
X509_keyid_set1 = _pygmssl.X509_keyid_set1

def X509_alias_get0(x, len):
    return _pygmssl.X509_alias_get0(x, len)
X509_alias_get0 = _pygmssl.X509_alias_get0

def X509_keyid_get0(x, len):
    return _pygmssl.X509_keyid_get0(x, len)
X509_keyid_get0 = _pygmssl.X509_keyid_get0

def X509_TRUST_set_default(trust):
    return _pygmssl.X509_TRUST_set_default(trust)
X509_TRUST_set_default = _pygmssl.X509_TRUST_set_default

def X509_TRUST_set(t, trust):
    return _pygmssl.X509_TRUST_set(t, trust)
X509_TRUST_set = _pygmssl.X509_TRUST_set

def X509_add1_trust_object(x, obj):
    return _pygmssl.X509_add1_trust_object(x, obj)
X509_add1_trust_object = _pygmssl.X509_add1_trust_object

def X509_add1_reject_object(x, obj):
    return _pygmssl.X509_add1_reject_object(x, obj)
X509_add1_reject_object = _pygmssl.X509_add1_reject_object

def X509_trust_clear(x):
    return _pygmssl.X509_trust_clear(x)
X509_trust_clear = _pygmssl.X509_trust_clear

def X509_reject_clear(x):
    return _pygmssl.X509_reject_clear(x)
X509_reject_clear = _pygmssl.X509_reject_clear

def X509_CRL_add0_revoked(crl, rev):
    return _pygmssl.X509_CRL_add0_revoked(crl, rev)
X509_CRL_add0_revoked = _pygmssl.X509_CRL_add0_revoked

def X509_CRL_get0_by_serial(crl, ret, serial):
    return _pygmssl.X509_CRL_get0_by_serial(crl, ret, serial)
X509_CRL_get0_by_serial = _pygmssl.X509_CRL_get0_by_serial

def X509_CRL_get0_by_cert(crl, ret, x):
    return _pygmssl.X509_CRL_get0_by_cert(crl, ret, x)
X509_CRL_get0_by_cert = _pygmssl.X509_CRL_get0_by_cert

def X509_PKEY_new():
    return _pygmssl.X509_PKEY_new()
X509_PKEY_new = _pygmssl.X509_PKEY_new

def X509_PKEY_free(a):
    return _pygmssl.X509_PKEY_free(a)
X509_PKEY_free = _pygmssl.X509_PKEY_free

def X509_INFO_new():
    return _pygmssl.X509_INFO_new()
X509_INFO_new = _pygmssl.X509_INFO_new

def X509_INFO_free(a):
    return _pygmssl.X509_INFO_free(a)
X509_INFO_free = _pygmssl.X509_INFO_free

def X509_NAME_oneline(a, buf, size):
    return _pygmssl.X509_NAME_oneline(a, buf, size)
X509_NAME_oneline = _pygmssl.X509_NAME_oneline

def ASN1_verify(i2d, algor1, signature, data, pkey):
    return _pygmssl.ASN1_verify(i2d, algor1, signature, data, pkey)
ASN1_verify = _pygmssl.ASN1_verify

def ASN1_digest(i2d, type, data, md, len):
    return _pygmssl.ASN1_digest(i2d, type, data, md, len)
ASN1_digest = _pygmssl.ASN1_digest

def ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type):
    return _pygmssl.ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type)
ASN1_sign = _pygmssl.ASN1_sign

def ASN1_item_digest(it, type, data, md, len):
    return _pygmssl.ASN1_item_digest(it, type, data, md, len)
ASN1_item_digest = _pygmssl.ASN1_item_digest

def ASN1_item_verify(it, algor1, signature, data, pkey):
    return _pygmssl.ASN1_item_verify(it, algor1, signature, data, pkey)
ASN1_item_verify = _pygmssl.ASN1_item_verify

def ASN1_item_sign(it, algor1, algor2, signature, data, pkey, type):
    return _pygmssl.ASN1_item_sign(it, algor1, algor2, signature, data, pkey, type)
ASN1_item_sign = _pygmssl.ASN1_item_sign

def ASN1_item_sign_ctx(it, algor1, algor2, signature, asn, ctx):
    return _pygmssl.ASN1_item_sign_ctx(it, algor1, algor2, signature, asn, ctx)
ASN1_item_sign_ctx = _pygmssl.ASN1_item_sign_ctx

def X509_get_version(x):
    return _pygmssl.X509_get_version(x)
X509_get_version = _pygmssl.X509_get_version

def X509_set_version(x, version):
    return _pygmssl.X509_set_version(x, version)
X509_set_version = _pygmssl.X509_set_version

def X509_set_serialNumber(x, serial):
    return _pygmssl.X509_set_serialNumber(x, serial)
X509_set_serialNumber = _pygmssl.X509_set_serialNumber

def X509_get_serialNumber(x):
    return _pygmssl.X509_get_serialNumber(x)
X509_get_serialNumber = _pygmssl.X509_get_serialNumber

def X509_get0_serialNumber(x):
    return _pygmssl.X509_get0_serialNumber(x)
X509_get0_serialNumber = _pygmssl.X509_get0_serialNumber

def X509_set_issuer_name(x, name):
    return _pygmssl.X509_set_issuer_name(x, name)
X509_set_issuer_name = _pygmssl.X509_set_issuer_name

def X509_get_issuer_name(a):
    return _pygmssl.X509_get_issuer_name(a)
X509_get_issuer_name = _pygmssl.X509_get_issuer_name

def X509_set_subject_name(x, name):
    return _pygmssl.X509_set_subject_name(x, name)
X509_set_subject_name = _pygmssl.X509_set_subject_name

def X509_get_subject_name(a):
    return _pygmssl.X509_get_subject_name(a)
X509_get_subject_name = _pygmssl.X509_get_subject_name

def X509_get0_notBefore(x):
    return _pygmssl.X509_get0_notBefore(x)
X509_get0_notBefore = _pygmssl.X509_get0_notBefore

def X509_getm_notBefore(x):
    return _pygmssl.X509_getm_notBefore(x)
X509_getm_notBefore = _pygmssl.X509_getm_notBefore

def X509_set1_notBefore(x, tm):
    return _pygmssl.X509_set1_notBefore(x, tm)
X509_set1_notBefore = _pygmssl.X509_set1_notBefore

def X509_get0_notAfter(x):
    return _pygmssl.X509_get0_notAfter(x)
X509_get0_notAfter = _pygmssl.X509_get0_notAfter

def X509_getm_notAfter(x):
    return _pygmssl.X509_getm_notAfter(x)
X509_getm_notAfter = _pygmssl.X509_getm_notAfter

def X509_set1_notAfter(x, tm):
    return _pygmssl.X509_set1_notAfter(x, tm)
X509_set1_notAfter = _pygmssl.X509_set1_notAfter

def X509_set_pubkey(x, pkey):
    return _pygmssl.X509_set_pubkey(x, pkey)
X509_set_pubkey = _pygmssl.X509_set_pubkey

def X509_up_ref(x):
    return _pygmssl.X509_up_ref(x)
X509_up_ref = _pygmssl.X509_up_ref

def X509_get_signature_type(x):
    return _pygmssl.X509_get_signature_type(x)
X509_get_signature_type = _pygmssl.X509_get_signature_type

def X509_get_X509_PUBKEY(x):
    return _pygmssl.X509_get_X509_PUBKEY(x)
X509_get_X509_PUBKEY = _pygmssl.X509_get_X509_PUBKEY

def X509_get0_uids(x, piuid, psuid):
    return _pygmssl.X509_get0_uids(x, piuid, psuid)
X509_get0_uids = _pygmssl.X509_get0_uids

def X509_get0_tbs_sigalg(x):
    return _pygmssl.X509_get0_tbs_sigalg(x)
X509_get0_tbs_sigalg = _pygmssl.X509_get0_tbs_sigalg

def X509_get0_pubkey(x):
    return _pygmssl.X509_get0_pubkey(x)
X509_get0_pubkey = _pygmssl.X509_get0_pubkey

def X509_get_pubkey(x):
    return _pygmssl.X509_get_pubkey(x)
X509_get_pubkey = _pygmssl.X509_get_pubkey

def X509_get0_pubkey_bitstr(x):
    return _pygmssl.X509_get0_pubkey_bitstr(x)
X509_get0_pubkey_bitstr = _pygmssl.X509_get0_pubkey_bitstr

def X509_certificate_type(x, pubkey):
    return _pygmssl.X509_certificate_type(x, pubkey)
X509_certificate_type = _pygmssl.X509_certificate_type

def X509_REQ_get_version(req):
    return _pygmssl.X509_REQ_get_version(req)
X509_REQ_get_version = _pygmssl.X509_REQ_get_version

def X509_REQ_set_version(x, version):
    return _pygmssl.X509_REQ_set_version(x, version)
X509_REQ_set_version = _pygmssl.X509_REQ_set_version

def X509_REQ_get_subject_name(req):
    return _pygmssl.X509_REQ_get_subject_name(req)
X509_REQ_get_subject_name = _pygmssl.X509_REQ_get_subject_name

def X509_REQ_set_subject_name(req, name):
    return _pygmssl.X509_REQ_set_subject_name(req, name)
X509_REQ_set_subject_name = _pygmssl.X509_REQ_set_subject_name

def X509_REQ_get0_signature(req, psig, palg):
    return _pygmssl.X509_REQ_get0_signature(req, psig, palg)
X509_REQ_get0_signature = _pygmssl.X509_REQ_get0_signature

def X509_REQ_get_signature_nid(req):
    return _pygmssl.X509_REQ_get_signature_nid(req)
X509_REQ_get_signature_nid = _pygmssl.X509_REQ_get_signature_nid

def i2d_re_X509_REQ_tbs(req, pp):
    return _pygmssl.i2d_re_X509_REQ_tbs(req, pp)
i2d_re_X509_REQ_tbs = _pygmssl.i2d_re_X509_REQ_tbs

def X509_REQ_set_pubkey(x, pkey):
    return _pygmssl.X509_REQ_set_pubkey(x, pkey)
X509_REQ_set_pubkey = _pygmssl.X509_REQ_set_pubkey

def X509_REQ_get_pubkey(req):
    return _pygmssl.X509_REQ_get_pubkey(req)
X509_REQ_get_pubkey = _pygmssl.X509_REQ_get_pubkey

def X509_REQ_get0_pubkey(req):
    return _pygmssl.X509_REQ_get0_pubkey(req)
X509_REQ_get0_pubkey = _pygmssl.X509_REQ_get0_pubkey

def X509_REQ_get_X509_PUBKEY(req):
    return _pygmssl.X509_REQ_get_X509_PUBKEY(req)
X509_REQ_get_X509_PUBKEY = _pygmssl.X509_REQ_get_X509_PUBKEY

def X509_REQ_extension_nid(nid):
    return _pygmssl.X509_REQ_extension_nid(nid)
X509_REQ_extension_nid = _pygmssl.X509_REQ_extension_nid

def X509_REQ_get_extension_nids():
    return _pygmssl.X509_REQ_get_extension_nids()
X509_REQ_get_extension_nids = _pygmssl.X509_REQ_get_extension_nids

def X509_REQ_set_extension_nids(nids):
    return _pygmssl.X509_REQ_set_extension_nids(nids)
X509_REQ_set_extension_nids = _pygmssl.X509_REQ_set_extension_nids

def X509_REQ_get_attr_count(req):
    return _pygmssl.X509_REQ_get_attr_count(req)
X509_REQ_get_attr_count = _pygmssl.X509_REQ_get_attr_count

def X509_REQ_get_attr_by_NID(req, nid, lastpos):
    return _pygmssl.X509_REQ_get_attr_by_NID(req, nid, lastpos)
X509_REQ_get_attr_by_NID = _pygmssl.X509_REQ_get_attr_by_NID

def X509_REQ_get_attr_by_OBJ(req, obj, lastpos):
    return _pygmssl.X509_REQ_get_attr_by_OBJ(req, obj, lastpos)
X509_REQ_get_attr_by_OBJ = _pygmssl.X509_REQ_get_attr_by_OBJ

def X509_REQ_get_attr(req, loc):
    return _pygmssl.X509_REQ_get_attr(req, loc)
X509_REQ_get_attr = _pygmssl.X509_REQ_get_attr

def X509_REQ_delete_attr(req, loc):
    return _pygmssl.X509_REQ_delete_attr(req, loc)
X509_REQ_delete_attr = _pygmssl.X509_REQ_delete_attr

def X509_REQ_add1_attr(req, attr):
    return _pygmssl.X509_REQ_add1_attr(req, attr)
X509_REQ_add1_attr = _pygmssl.X509_REQ_add1_attr

def X509_REQ_add1_attr_by_OBJ(req, obj, type, bytes, len):
    return _pygmssl.X509_REQ_add1_attr_by_OBJ(req, obj, type, bytes, len)
X509_REQ_add1_attr_by_OBJ = _pygmssl.X509_REQ_add1_attr_by_OBJ

def X509_REQ_add1_attr_by_NID(req, nid, type, bytes, len):
    return _pygmssl.X509_REQ_add1_attr_by_NID(req, nid, type, bytes, len)
X509_REQ_add1_attr_by_NID = _pygmssl.X509_REQ_add1_attr_by_NID

def X509_REQ_add1_attr_by_txt(req, attrname, type, bytes, len):
    return _pygmssl.X509_REQ_add1_attr_by_txt(req, attrname, type, bytes, len)
X509_REQ_add1_attr_by_txt = _pygmssl.X509_REQ_add1_attr_by_txt

def X509_CRL_set_version(x, version):
    return _pygmssl.X509_CRL_set_version(x, version)
X509_CRL_set_version = _pygmssl.X509_CRL_set_version

def X509_CRL_set_issuer_name(x, name):
    return _pygmssl.X509_CRL_set_issuer_name(x, name)
X509_CRL_set_issuer_name = _pygmssl.X509_CRL_set_issuer_name

def X509_CRL_set1_lastUpdate(x, tm):
    return _pygmssl.X509_CRL_set1_lastUpdate(x, tm)
X509_CRL_set1_lastUpdate = _pygmssl.X509_CRL_set1_lastUpdate

def X509_CRL_set1_nextUpdate(x, tm):
    return _pygmssl.X509_CRL_set1_nextUpdate(x, tm)
X509_CRL_set1_nextUpdate = _pygmssl.X509_CRL_set1_nextUpdate

def X509_CRL_sort(crl):
    return _pygmssl.X509_CRL_sort(crl)
X509_CRL_sort = _pygmssl.X509_CRL_sort

def X509_CRL_up_ref(crl):
    return _pygmssl.X509_CRL_up_ref(crl)
X509_CRL_up_ref = _pygmssl.X509_CRL_up_ref

def X509_CRL_get_version(crl):
    return _pygmssl.X509_CRL_get_version(crl)
X509_CRL_get_version = _pygmssl.X509_CRL_get_version

def X509_CRL_get0_lastUpdate(crl):
    return _pygmssl.X509_CRL_get0_lastUpdate(crl)
X509_CRL_get0_lastUpdate = _pygmssl.X509_CRL_get0_lastUpdate

def X509_CRL_get0_nextUpdate(crl):
    return _pygmssl.X509_CRL_get0_nextUpdate(crl)
X509_CRL_get0_nextUpdate = _pygmssl.X509_CRL_get0_nextUpdate

def X509_CRL_get_issuer(crl):
    return _pygmssl.X509_CRL_get_issuer(crl)
X509_CRL_get_issuer = _pygmssl.X509_CRL_get_issuer

def X509_CRL_get0_signature(crl, psig, palg):
    return _pygmssl.X509_CRL_get0_signature(crl, psig, palg)
X509_CRL_get0_signature = _pygmssl.X509_CRL_get0_signature

def X509_CRL_get_signature_nid(crl):
    return _pygmssl.X509_CRL_get_signature_nid(crl)
X509_CRL_get_signature_nid = _pygmssl.X509_CRL_get_signature_nid

def i2d_re_X509_CRL_tbs(req, pp):
    return _pygmssl.i2d_re_X509_CRL_tbs(req, pp)
i2d_re_X509_CRL_tbs = _pygmssl.i2d_re_X509_CRL_tbs

def X509_REVOKED_get0_serialNumber(x):
    return _pygmssl.X509_REVOKED_get0_serialNumber(x)
X509_REVOKED_get0_serialNumber = _pygmssl.X509_REVOKED_get0_serialNumber

def X509_REVOKED_set_serialNumber(x, serial):
    return _pygmssl.X509_REVOKED_set_serialNumber(x, serial)
X509_REVOKED_set_serialNumber = _pygmssl.X509_REVOKED_set_serialNumber

def X509_REVOKED_get0_revocationDate(x):
    return _pygmssl.X509_REVOKED_get0_revocationDate(x)
X509_REVOKED_get0_revocationDate = _pygmssl.X509_REVOKED_get0_revocationDate

def X509_REVOKED_set_revocationDate(r, tm):
    return _pygmssl.X509_REVOKED_set_revocationDate(r, tm)
X509_REVOKED_set_revocationDate = _pygmssl.X509_REVOKED_set_revocationDate

def X509_CRL_diff(base, newer, skey, md, flags):
    return _pygmssl.X509_CRL_diff(base, newer, skey, md, flags)
X509_CRL_diff = _pygmssl.X509_CRL_diff

def X509_REQ_check_private_key(x509, pkey):
    return _pygmssl.X509_REQ_check_private_key(x509, pkey)
X509_REQ_check_private_key = _pygmssl.X509_REQ_check_private_key

def X509_check_private_key(x509, pkey):
    return _pygmssl.X509_check_private_key(x509, pkey)
X509_check_private_key = _pygmssl.X509_check_private_key

def X509_CRL_check_suiteb(crl, pk, flags):
    return _pygmssl.X509_CRL_check_suiteb(crl, pk, flags)
X509_CRL_check_suiteb = _pygmssl.X509_CRL_check_suiteb

def X509_issuer_and_serial_cmp(a, b):
    return _pygmssl.X509_issuer_and_serial_cmp(a, b)
X509_issuer_and_serial_cmp = _pygmssl.X509_issuer_and_serial_cmp

def X509_issuer_and_serial_hash(a):
    return _pygmssl.X509_issuer_and_serial_hash(a)
X509_issuer_and_serial_hash = _pygmssl.X509_issuer_and_serial_hash

def X509_issuer_name_cmp(a, b):
    return _pygmssl.X509_issuer_name_cmp(a, b)
X509_issuer_name_cmp = _pygmssl.X509_issuer_name_cmp

def X509_issuer_name_hash(a):
    return _pygmssl.X509_issuer_name_hash(a)
X509_issuer_name_hash = _pygmssl.X509_issuer_name_hash

def X509_subject_name_cmp(a, b):
    return _pygmssl.X509_subject_name_cmp(a, b)
X509_subject_name_cmp = _pygmssl.X509_subject_name_cmp

def X509_subject_name_hash(x):
    return _pygmssl.X509_subject_name_hash(x)
X509_subject_name_hash = _pygmssl.X509_subject_name_hash

def X509_issuer_name_hash_old(a):
    return _pygmssl.X509_issuer_name_hash_old(a)
X509_issuer_name_hash_old = _pygmssl.X509_issuer_name_hash_old

def X509_subject_name_hash_old(x):
    return _pygmssl.X509_subject_name_hash_old(x)
X509_subject_name_hash_old = _pygmssl.X509_subject_name_hash_old

def X509_cmp(a, b):
    return _pygmssl.X509_cmp(a, b)
X509_cmp = _pygmssl.X509_cmp

def X509_NAME_cmp(a, b):
    return _pygmssl.X509_NAME_cmp(a, b)
X509_NAME_cmp = _pygmssl.X509_NAME_cmp

def X509_NAME_hash(x):
    return _pygmssl.X509_NAME_hash(x)
X509_NAME_hash = _pygmssl.X509_NAME_hash

def X509_NAME_hash_old(x):
    return _pygmssl.X509_NAME_hash_old(x)
X509_NAME_hash_old = _pygmssl.X509_NAME_hash_old

def X509_CRL_cmp(a, b):
    return _pygmssl.X509_CRL_cmp(a, b)
X509_CRL_cmp = _pygmssl.X509_CRL_cmp

def X509_CRL_match(a, b):
    return _pygmssl.X509_CRL_match(a, b)
X509_CRL_match = _pygmssl.X509_CRL_match

def X509_aux_print(out, x, indent):
    return _pygmssl.X509_aux_print(out, x, indent)
X509_aux_print = _pygmssl.X509_aux_print

def X509_print_ex_fp(bp, x, nmflag, cflag):
    return _pygmssl.X509_print_ex_fp(bp, x, nmflag, cflag)
X509_print_ex_fp = _pygmssl.X509_print_ex_fp

def X509_print_fp(bp, x):
    return _pygmssl.X509_print_fp(bp, x)
X509_print_fp = _pygmssl.X509_print_fp

def X509_CRL_print_fp(bp, x):
    return _pygmssl.X509_CRL_print_fp(bp, x)
X509_CRL_print_fp = _pygmssl.X509_CRL_print_fp

def X509_REQ_print_fp(bp, req):
    return _pygmssl.X509_REQ_print_fp(bp, req)
X509_REQ_print_fp = _pygmssl.X509_REQ_print_fp

def X509_NAME_print_ex_fp(fp, nm, indent, flags):
    return _pygmssl.X509_NAME_print_ex_fp(fp, nm, indent, flags)
X509_NAME_print_ex_fp = _pygmssl.X509_NAME_print_ex_fp

def X509_NAME_print(bp, name, obase):
    return _pygmssl.X509_NAME_print(bp, name, obase)
X509_NAME_print = _pygmssl.X509_NAME_print

def X509_NAME_print_ex(out, nm, indent, flags):
    return _pygmssl.X509_NAME_print_ex(out, nm, indent, flags)
X509_NAME_print_ex = _pygmssl.X509_NAME_print_ex

def X509_print_ex(bp, x, nmflag, cflag):
    return _pygmssl.X509_print_ex(bp, x, nmflag, cflag)
X509_print_ex = _pygmssl.X509_print_ex

def X509_print(bp, x):
    return _pygmssl.X509_print(bp, x)
X509_print = _pygmssl.X509_print

def X509_ocspid_print(bp, x):
    return _pygmssl.X509_ocspid_print(bp, x)
X509_ocspid_print = _pygmssl.X509_ocspid_print

def X509_CRL_print(bp, x):
    return _pygmssl.X509_CRL_print(bp, x)
X509_CRL_print = _pygmssl.X509_CRL_print

def X509_REQ_print_ex(bp, x, nmflag, cflag):
    return _pygmssl.X509_REQ_print_ex(bp, x, nmflag, cflag)
X509_REQ_print_ex = _pygmssl.X509_REQ_print_ex

def X509_REQ_print(bp, req):
    return _pygmssl.X509_REQ_print(bp, req)
X509_REQ_print = _pygmssl.X509_REQ_print

def X509_NAME_entry_count(name):
    return _pygmssl.X509_NAME_entry_count(name)
X509_NAME_entry_count = _pygmssl.X509_NAME_entry_count

def X509_NAME_get_text_by_NID(name, nid, buf, len):
    return _pygmssl.X509_NAME_get_text_by_NID(name, nid, buf, len)
X509_NAME_get_text_by_NID = _pygmssl.X509_NAME_get_text_by_NID

def X509_NAME_get_text_by_OBJ(name, obj, buf, len):
    return _pygmssl.X509_NAME_get_text_by_OBJ(name, obj, buf, len)
X509_NAME_get_text_by_OBJ = _pygmssl.X509_NAME_get_text_by_OBJ

def X509_NAME_get_index_by_NID(name, nid, lastpos):
    return _pygmssl.X509_NAME_get_index_by_NID(name, nid, lastpos)
X509_NAME_get_index_by_NID = _pygmssl.X509_NAME_get_index_by_NID

def X509_NAME_get_index_by_OBJ(name, obj, lastpos):
    return _pygmssl.X509_NAME_get_index_by_OBJ(name, obj, lastpos)
X509_NAME_get_index_by_OBJ = _pygmssl.X509_NAME_get_index_by_OBJ

def X509_NAME_get_entry(name, loc):
    return _pygmssl.X509_NAME_get_entry(name, loc)
X509_NAME_get_entry = _pygmssl.X509_NAME_get_entry

def X509_NAME_delete_entry(name, loc):
    return _pygmssl.X509_NAME_delete_entry(name, loc)
X509_NAME_delete_entry = _pygmssl.X509_NAME_delete_entry

def X509_NAME_add_entry(name, ne, loc, set):
    return _pygmssl.X509_NAME_add_entry(name, ne, loc, set)
X509_NAME_add_entry = _pygmssl.X509_NAME_add_entry

def X509_NAME_add_entry_by_OBJ(name, obj, type, bytes, len, loc, set):
    return _pygmssl.X509_NAME_add_entry_by_OBJ(name, obj, type, bytes, len, loc, set)
X509_NAME_add_entry_by_OBJ = _pygmssl.X509_NAME_add_entry_by_OBJ

def X509_NAME_add_entry_by_NID(name, nid, type, bytes, len, loc, set):
    return _pygmssl.X509_NAME_add_entry_by_NID(name, nid, type, bytes, len, loc, set)
X509_NAME_add_entry_by_NID = _pygmssl.X509_NAME_add_entry_by_NID

def X509_NAME_ENTRY_create_by_txt(ne, field, type, bytes, len):
    return _pygmssl.X509_NAME_ENTRY_create_by_txt(ne, field, type, bytes, len)
X509_NAME_ENTRY_create_by_txt = _pygmssl.X509_NAME_ENTRY_create_by_txt

def X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len):
    return _pygmssl.X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len)
X509_NAME_ENTRY_create_by_NID = _pygmssl.X509_NAME_ENTRY_create_by_NID

def X509_NAME_add_entry_by_txt(name, field, type, bytes, len, loc, set):
    return _pygmssl.X509_NAME_add_entry_by_txt(name, field, type, bytes, len, loc, set)
X509_NAME_add_entry_by_txt = _pygmssl.X509_NAME_add_entry_by_txt

def X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len):
    return _pygmssl.X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len)
X509_NAME_ENTRY_create_by_OBJ = _pygmssl.X509_NAME_ENTRY_create_by_OBJ

def X509_NAME_ENTRY_set_object(ne, obj):
    return _pygmssl.X509_NAME_ENTRY_set_object(ne, obj)
X509_NAME_ENTRY_set_object = _pygmssl.X509_NAME_ENTRY_set_object

def X509_NAME_ENTRY_set_data(ne, type, bytes, len):
    return _pygmssl.X509_NAME_ENTRY_set_data(ne, type, bytes, len)
X509_NAME_ENTRY_set_data = _pygmssl.X509_NAME_ENTRY_set_data

def X509_NAME_ENTRY_get_object(ne):
    return _pygmssl.X509_NAME_ENTRY_get_object(ne)
X509_NAME_ENTRY_get_object = _pygmssl.X509_NAME_ENTRY_get_object

def X509_NAME_ENTRY_get_data(ne):
    return _pygmssl.X509_NAME_ENTRY_get_data(ne)
X509_NAME_ENTRY_get_data = _pygmssl.X509_NAME_ENTRY_get_data

def X509_NAME_ENTRY_set(ne):
    return _pygmssl.X509_NAME_ENTRY_set(ne)
X509_NAME_ENTRY_set = _pygmssl.X509_NAME_ENTRY_set

def X509_NAME_get0_der(nm, pder, pderlen):
    return _pygmssl.X509_NAME_get0_der(nm, pder, pderlen)
X509_NAME_get0_der = _pygmssl.X509_NAME_get0_der

def X509_get_ext_count(x):
    return _pygmssl.X509_get_ext_count(x)
X509_get_ext_count = _pygmssl.X509_get_ext_count

def X509_get_ext_by_NID(x, nid, lastpos):
    return _pygmssl.X509_get_ext_by_NID(x, nid, lastpos)
X509_get_ext_by_NID = _pygmssl.X509_get_ext_by_NID

def X509_get_ext_by_OBJ(x, obj, lastpos):
    return _pygmssl.X509_get_ext_by_OBJ(x, obj, lastpos)
X509_get_ext_by_OBJ = _pygmssl.X509_get_ext_by_OBJ

def X509_get_ext_by_critical(x, crit, lastpos):
    return _pygmssl.X509_get_ext_by_critical(x, crit, lastpos)
X509_get_ext_by_critical = _pygmssl.X509_get_ext_by_critical

def X509_get_ext(x, loc):
    return _pygmssl.X509_get_ext(x, loc)
X509_get_ext = _pygmssl.X509_get_ext

def X509_delete_ext(x, loc):
    return _pygmssl.X509_delete_ext(x, loc)
X509_delete_ext = _pygmssl.X509_delete_ext

def X509_add_ext(x, ex, loc):
    return _pygmssl.X509_add_ext(x, ex, loc)
X509_add_ext = _pygmssl.X509_add_ext

def X509_get_ext_d2i(x, nid, crit, idx):
    return _pygmssl.X509_get_ext_d2i(x, nid, crit, idx)
X509_get_ext_d2i = _pygmssl.X509_get_ext_d2i

def X509_add1_ext_i2d(x, nid, value, crit, flags):
    return _pygmssl.X509_add1_ext_i2d(x, nid, value, crit, flags)
X509_add1_ext_i2d = _pygmssl.X509_add1_ext_i2d

def X509_CRL_get_ext_count(x):
    return _pygmssl.X509_CRL_get_ext_count(x)
X509_CRL_get_ext_count = _pygmssl.X509_CRL_get_ext_count

def X509_CRL_get_ext_by_NID(x, nid, lastpos):
    return _pygmssl.X509_CRL_get_ext_by_NID(x, nid, lastpos)
X509_CRL_get_ext_by_NID = _pygmssl.X509_CRL_get_ext_by_NID

def X509_CRL_get_ext_by_OBJ(x, obj, lastpos):
    return _pygmssl.X509_CRL_get_ext_by_OBJ(x, obj, lastpos)
X509_CRL_get_ext_by_OBJ = _pygmssl.X509_CRL_get_ext_by_OBJ

def X509_CRL_get_ext_by_critical(x, crit, lastpos):
    return _pygmssl.X509_CRL_get_ext_by_critical(x, crit, lastpos)
X509_CRL_get_ext_by_critical = _pygmssl.X509_CRL_get_ext_by_critical

def X509_CRL_get_ext(x, loc):
    return _pygmssl.X509_CRL_get_ext(x, loc)
X509_CRL_get_ext = _pygmssl.X509_CRL_get_ext

def X509_CRL_delete_ext(x, loc):
    return _pygmssl.X509_CRL_delete_ext(x, loc)
X509_CRL_delete_ext = _pygmssl.X509_CRL_delete_ext

def X509_CRL_add_ext(x, ex, loc):
    return _pygmssl.X509_CRL_add_ext(x, ex, loc)
X509_CRL_add_ext = _pygmssl.X509_CRL_add_ext

def X509_CRL_get_ext_d2i(x, nid, crit, idx):
    return _pygmssl.X509_CRL_get_ext_d2i(x, nid, crit, idx)
X509_CRL_get_ext_d2i = _pygmssl.X509_CRL_get_ext_d2i

def X509_CRL_add1_ext_i2d(x, nid, value, crit, flags):
    return _pygmssl.X509_CRL_add1_ext_i2d(x, nid, value, crit, flags)
X509_CRL_add1_ext_i2d = _pygmssl.X509_CRL_add1_ext_i2d

def X509_REVOKED_get_ext_count(x):
    return _pygmssl.X509_REVOKED_get_ext_count(x)
X509_REVOKED_get_ext_count = _pygmssl.X509_REVOKED_get_ext_count

def X509_REVOKED_get_ext_by_NID(x, nid, lastpos):
    return _pygmssl.X509_REVOKED_get_ext_by_NID(x, nid, lastpos)
X509_REVOKED_get_ext_by_NID = _pygmssl.X509_REVOKED_get_ext_by_NID

def X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos):
    return _pygmssl.X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos)
X509_REVOKED_get_ext_by_OBJ = _pygmssl.X509_REVOKED_get_ext_by_OBJ

def X509_REVOKED_get_ext_by_critical(x, crit, lastpos):
    return _pygmssl.X509_REVOKED_get_ext_by_critical(x, crit, lastpos)
X509_REVOKED_get_ext_by_critical = _pygmssl.X509_REVOKED_get_ext_by_critical

def X509_REVOKED_get_ext(x, loc):
    return _pygmssl.X509_REVOKED_get_ext(x, loc)
X509_REVOKED_get_ext = _pygmssl.X509_REVOKED_get_ext

def X509_REVOKED_delete_ext(x, loc):
    return _pygmssl.X509_REVOKED_delete_ext(x, loc)
X509_REVOKED_delete_ext = _pygmssl.X509_REVOKED_delete_ext

def X509_REVOKED_add_ext(x, ex, loc):
    return _pygmssl.X509_REVOKED_add_ext(x, ex, loc)
X509_REVOKED_add_ext = _pygmssl.X509_REVOKED_add_ext

def X509_REVOKED_get_ext_d2i(x, nid, crit, idx):
    return _pygmssl.X509_REVOKED_get_ext_d2i(x, nid, crit, idx)
X509_REVOKED_get_ext_d2i = _pygmssl.X509_REVOKED_get_ext_d2i

def X509_REVOKED_add1_ext_i2d(x, nid, value, crit, flags):
    return _pygmssl.X509_REVOKED_add1_ext_i2d(x, nid, value, crit, flags)
X509_REVOKED_add1_ext_i2d = _pygmssl.X509_REVOKED_add1_ext_i2d

def X509_EXTENSION_create_by_NID(ex, nid, crit, data):
    return _pygmssl.X509_EXTENSION_create_by_NID(ex, nid, crit, data)
X509_EXTENSION_create_by_NID = _pygmssl.X509_EXTENSION_create_by_NID

def X509_EXTENSION_create_by_OBJ(ex, obj, crit, data):
    return _pygmssl.X509_EXTENSION_create_by_OBJ(ex, obj, crit, data)
X509_EXTENSION_create_by_OBJ = _pygmssl.X509_EXTENSION_create_by_OBJ

def X509_EXTENSION_set_object(ex, obj):
    return _pygmssl.X509_EXTENSION_set_object(ex, obj)
X509_EXTENSION_set_object = _pygmssl.X509_EXTENSION_set_object

def X509_EXTENSION_set_critical(ex, crit):
    return _pygmssl.X509_EXTENSION_set_critical(ex, crit)
X509_EXTENSION_set_critical = _pygmssl.X509_EXTENSION_set_critical

def X509_EXTENSION_set_data(ex, data):
    return _pygmssl.X509_EXTENSION_set_data(ex, data)
X509_EXTENSION_set_data = _pygmssl.X509_EXTENSION_set_data

def X509_EXTENSION_get_object(ex):
    return _pygmssl.X509_EXTENSION_get_object(ex)
X509_EXTENSION_get_object = _pygmssl.X509_EXTENSION_get_object

def X509_EXTENSION_get_data(ne):
    return _pygmssl.X509_EXTENSION_get_data(ne)
X509_EXTENSION_get_data = _pygmssl.X509_EXTENSION_get_data

def X509_EXTENSION_get_critical(ex):
    return _pygmssl.X509_EXTENSION_get_critical(ex)
X509_EXTENSION_get_critical = _pygmssl.X509_EXTENSION_get_critical

def X509_ATTRIBUTE_create_by_NID(attr, nid, atrtype, data, len):
    return _pygmssl.X509_ATTRIBUTE_create_by_NID(attr, nid, atrtype, data, len)
X509_ATTRIBUTE_create_by_NID = _pygmssl.X509_ATTRIBUTE_create_by_NID

def X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len):
    return _pygmssl.X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len)
X509_ATTRIBUTE_create_by_OBJ = _pygmssl.X509_ATTRIBUTE_create_by_OBJ

def X509_ATTRIBUTE_create_by_txt(attr, atrname, type, bytes, len):
    return _pygmssl.X509_ATTRIBUTE_create_by_txt(attr, atrname, type, bytes, len)
X509_ATTRIBUTE_create_by_txt = _pygmssl.X509_ATTRIBUTE_create_by_txt

def X509_ATTRIBUTE_set1_object(attr, obj):
    return _pygmssl.X509_ATTRIBUTE_set1_object(attr, obj)
X509_ATTRIBUTE_set1_object = _pygmssl.X509_ATTRIBUTE_set1_object

def X509_ATTRIBUTE_set1_data(attr, attrtype, data, len):
    return _pygmssl.X509_ATTRIBUTE_set1_data(attr, attrtype, data, len)
X509_ATTRIBUTE_set1_data = _pygmssl.X509_ATTRIBUTE_set1_data

def X509_ATTRIBUTE_get0_data(attr, idx, atrtype, data):
    return _pygmssl.X509_ATTRIBUTE_get0_data(attr, idx, atrtype, data)
X509_ATTRIBUTE_get0_data = _pygmssl.X509_ATTRIBUTE_get0_data

def X509_ATTRIBUTE_count(attr):
    return _pygmssl.X509_ATTRIBUTE_count(attr)
X509_ATTRIBUTE_count = _pygmssl.X509_ATTRIBUTE_count

def X509_ATTRIBUTE_get0_object(attr):
    return _pygmssl.X509_ATTRIBUTE_get0_object(attr)
X509_ATTRIBUTE_get0_object = _pygmssl.X509_ATTRIBUTE_get0_object

def X509_ATTRIBUTE_get0_type(attr, idx):
    return _pygmssl.X509_ATTRIBUTE_get0_type(attr, idx)
X509_ATTRIBUTE_get0_type = _pygmssl.X509_ATTRIBUTE_get0_type

def EVP_PKEY_get_attr_count(key):
    return _pygmssl.EVP_PKEY_get_attr_count(key)
EVP_PKEY_get_attr_count = _pygmssl.EVP_PKEY_get_attr_count

def EVP_PKEY_get_attr_by_NID(key, nid, lastpos):
    return _pygmssl.EVP_PKEY_get_attr_by_NID(key, nid, lastpos)
EVP_PKEY_get_attr_by_NID = _pygmssl.EVP_PKEY_get_attr_by_NID

def EVP_PKEY_get_attr_by_OBJ(key, obj, lastpos):
    return _pygmssl.EVP_PKEY_get_attr_by_OBJ(key, obj, lastpos)
EVP_PKEY_get_attr_by_OBJ = _pygmssl.EVP_PKEY_get_attr_by_OBJ

def EVP_PKEY_get_attr(key, loc):
    return _pygmssl.EVP_PKEY_get_attr(key, loc)
EVP_PKEY_get_attr = _pygmssl.EVP_PKEY_get_attr

def EVP_PKEY_delete_attr(key, loc):
    return _pygmssl.EVP_PKEY_delete_attr(key, loc)
EVP_PKEY_delete_attr = _pygmssl.EVP_PKEY_delete_attr

def EVP_PKEY_add1_attr(key, attr):
    return _pygmssl.EVP_PKEY_add1_attr(key, attr)
EVP_PKEY_add1_attr = _pygmssl.EVP_PKEY_add1_attr

def EVP_PKEY_add1_attr_by_OBJ(key, obj, type, bytes, len):
    return _pygmssl.EVP_PKEY_add1_attr_by_OBJ(key, obj, type, bytes, len)
EVP_PKEY_add1_attr_by_OBJ = _pygmssl.EVP_PKEY_add1_attr_by_OBJ

def EVP_PKEY_add1_attr_by_NID(key, nid, type, bytes, len):
    return _pygmssl.EVP_PKEY_add1_attr_by_NID(key, nid, type, bytes, len)
EVP_PKEY_add1_attr_by_NID = _pygmssl.EVP_PKEY_add1_attr_by_NID

def EVP_PKEY_add1_attr_by_txt(key, attrname, type, bytes, len):
    return _pygmssl.EVP_PKEY_add1_attr_by_txt(key, attrname, type, bytes, len)
EVP_PKEY_add1_attr_by_txt = _pygmssl.EVP_PKEY_add1_attr_by_txt

def X509_verify_cert(ctx):
    return _pygmssl.X509_verify_cert(ctx)
X509_verify_cert = _pygmssl.X509_verify_cert

def PKCS5_pbe_set0_algor(algor, alg, iter, salt, saltlen):
    return _pygmssl.PKCS5_pbe_set0_algor(algor, alg, iter, salt, saltlen)
PKCS5_pbe_set0_algor = _pygmssl.PKCS5_pbe_set0_algor

def PKCS5_pbe_set(alg, iter, salt, saltlen):
    return _pygmssl.PKCS5_pbe_set(alg, iter, salt, saltlen)
PKCS5_pbe_set = _pygmssl.PKCS5_pbe_set

def PKCS5_pbe2_set(cipher, iter, salt, saltlen):
    return _pygmssl.PKCS5_pbe2_set(cipher, iter, salt, saltlen)
PKCS5_pbe2_set = _pygmssl.PKCS5_pbe2_set

def PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, aiv, prf_nid):
    return _pygmssl.PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, aiv, prf_nid)
PKCS5_pbe2_set_iv = _pygmssl.PKCS5_pbe2_set_iv

def PKCS5_pbe2_set_scrypt(cipher, salt, saltlen, aiv, N, r, p):
    return _pygmssl.PKCS5_pbe2_set_scrypt(cipher, salt, saltlen, aiv, N, r, p)
PKCS5_pbe2_set_scrypt = _pygmssl.PKCS5_pbe2_set_scrypt

def PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen):
    return _pygmssl.PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen)
PKCS5_pbkdf2_set = _pygmssl.PKCS5_pbkdf2_set

def EVP_PKCS82PKEY(p8):
    return _pygmssl.EVP_PKCS82PKEY(p8)
EVP_PKCS82PKEY = _pygmssl.EVP_PKCS82PKEY

def EVP_PKEY2PKCS8(pkey):
    return _pygmssl.EVP_PKEY2PKCS8(pkey)
EVP_PKEY2PKCS8 = _pygmssl.EVP_PKEY2PKCS8

def PKCS8_pkey_set0(priv, aobj, version, ptype, pval, penc, penclen):
    return _pygmssl.PKCS8_pkey_set0(priv, aobj, version, ptype, pval, penc, penclen)
PKCS8_pkey_set0 = _pygmssl.PKCS8_pkey_set0

def PKCS8_pkey_get0(ppkalg, pk, ppklen, pa, p8):
    return _pygmssl.PKCS8_pkey_get0(ppkalg, pk, ppklen, pa, p8)
PKCS8_pkey_get0 = _pygmssl.PKCS8_pkey_get0

def PKCS8_pkey_add1_attr_by_NID(p8, nid, type, bytes, len):
    return _pygmssl.PKCS8_pkey_add1_attr_by_NID(p8, nid, type, bytes, len)
PKCS8_pkey_add1_attr_by_NID = _pygmssl.PKCS8_pkey_add1_attr_by_NID

def X509_PUBKEY_set0_param(pub, aobj, ptype, pval, penc, penclen):
    return _pygmssl.X509_PUBKEY_set0_param(pub, aobj, ptype, pval, penc, penclen)
X509_PUBKEY_set0_param = _pygmssl.X509_PUBKEY_set0_param

def X509_PUBKEY_get0_param(ppkalg, pk, ppklen, pa, pub):
    return _pygmssl.X509_PUBKEY_get0_param(ppkalg, pk, ppklen, pa, pub)
X509_PUBKEY_get0_param = _pygmssl.X509_PUBKEY_get0_param

def X509_check_trust(x, id, flags):
    return _pygmssl.X509_check_trust(x, id, flags)
X509_check_trust = _pygmssl.X509_check_trust

def X509_TRUST_get_count():
    return _pygmssl.X509_TRUST_get_count()
X509_TRUST_get_count = _pygmssl.X509_TRUST_get_count

def X509_TRUST_get0(idx):
    return _pygmssl.X509_TRUST_get0(idx)
X509_TRUST_get0 = _pygmssl.X509_TRUST_get0

def X509_TRUST_get_by_id(id):
    return _pygmssl.X509_TRUST_get_by_id(id)
X509_TRUST_get_by_id = _pygmssl.X509_TRUST_get_by_id

def X509_TRUST_cleanup():
    return _pygmssl.X509_TRUST_cleanup()
X509_TRUST_cleanup = _pygmssl.X509_TRUST_cleanup

def X509_TRUST_get_flags(xp):
    return _pygmssl.X509_TRUST_get_flags(xp)
X509_TRUST_get_flags = _pygmssl.X509_TRUST_get_flags

def X509_TRUST_get0_name(xp):
    return _pygmssl.X509_TRUST_get0_name(xp)
X509_TRUST_get0_name = _pygmssl.X509_TRUST_get0_name

def X509_TRUST_get_trust(xp):
    return _pygmssl.X509_TRUST_get_trust(xp)
X509_TRUST_get_trust = _pygmssl.X509_TRUST_get_trust

def ERR_load_X509_strings():
    return _pygmssl.ERR_load_X509_strings()
ERR_load_X509_strings = _pygmssl.ERR_load_X509_strings

def X509_OBJECT_up_ref_count(a):
    return _pygmssl.X509_OBJECT_up_ref_count(a)
X509_OBJECT_up_ref_count = _pygmssl.X509_OBJECT_up_ref_count

def X509_OBJECT_new():
    return _pygmssl.X509_OBJECT_new()
X509_OBJECT_new = _pygmssl.X509_OBJECT_new

def X509_OBJECT_free(a):
    return _pygmssl.X509_OBJECT_free(a)
X509_OBJECT_free = _pygmssl.X509_OBJECT_free

def X509_OBJECT_get_type(a):
    return _pygmssl.X509_OBJECT_get_type(a)
X509_OBJECT_get_type = _pygmssl.X509_OBJECT_get_type

def X509_OBJECT_get0_X509(a):
    return _pygmssl.X509_OBJECT_get0_X509(a)
X509_OBJECT_get0_X509 = _pygmssl.X509_OBJECT_get0_X509

def X509_OBJECT_get0_X509_CRL(a):
    return _pygmssl.X509_OBJECT_get0_X509_CRL(a)
X509_OBJECT_get0_X509_CRL = _pygmssl.X509_OBJECT_get0_X509_CRL

def X509_STORE_new():
    return _pygmssl.X509_STORE_new()
X509_STORE_new = _pygmssl.X509_STORE_new

def X509_STORE_free(v):
    return _pygmssl.X509_STORE_free(v)
X509_STORE_free = _pygmssl.X509_STORE_free

def X509_STORE_lock(ctx):
    return _pygmssl.X509_STORE_lock(ctx)
X509_STORE_lock = _pygmssl.X509_STORE_lock

def X509_STORE_unlock(ctx):
    return _pygmssl.X509_STORE_unlock(ctx)
X509_STORE_unlock = _pygmssl.X509_STORE_unlock

def X509_STORE_up_ref(v):
    return _pygmssl.X509_STORE_up_ref(v)
X509_STORE_up_ref = _pygmssl.X509_STORE_up_ref

def X509_STORE_set_flags(ctx, flags):
    return _pygmssl.X509_STORE_set_flags(ctx, flags)
X509_STORE_set_flags = _pygmssl.X509_STORE_set_flags

def X509_STORE_set_purpose(ctx, purpose):
    return _pygmssl.X509_STORE_set_purpose(ctx, purpose)
X509_STORE_set_purpose = _pygmssl.X509_STORE_set_purpose

def X509_STORE_set_trust(ctx, trust):
    return _pygmssl.X509_STORE_set_trust(ctx, trust)
X509_STORE_set_trust = _pygmssl.X509_STORE_set_trust

def X509_STORE_set1_param(ctx, pm):
    return _pygmssl.X509_STORE_set1_param(ctx, pm)
X509_STORE_set1_param = _pygmssl.X509_STORE_set1_param

def X509_STORE_get0_param(ctx):
    return _pygmssl.X509_STORE_get0_param(ctx)
X509_STORE_get0_param = _pygmssl.X509_STORE_get0_param

def X509_STORE_set_verify(ctx, verify):
    return _pygmssl.X509_STORE_set_verify(ctx, verify)
X509_STORE_set_verify = _pygmssl.X509_STORE_set_verify

def X509_STORE_CTX_set_verify(ctx, verify):
    return _pygmssl.X509_STORE_CTX_set_verify(ctx, verify)
X509_STORE_CTX_set_verify = _pygmssl.X509_STORE_CTX_set_verify

def X509_STORE_get_verify(ctx):
    return _pygmssl.X509_STORE_get_verify(ctx)
X509_STORE_get_verify = _pygmssl.X509_STORE_get_verify

def X509_STORE_set_verify_cb(ctx, verify_cb):
    return _pygmssl.X509_STORE_set_verify_cb(ctx, verify_cb)
X509_STORE_set_verify_cb = _pygmssl.X509_STORE_set_verify_cb

def X509_STORE_get_verify_cb(ctx):
    return _pygmssl.X509_STORE_get_verify_cb(ctx)
X509_STORE_get_verify_cb = _pygmssl.X509_STORE_get_verify_cb

def X509_STORE_set_get_issuer(ctx, get_issuer):
    return _pygmssl.X509_STORE_set_get_issuer(ctx, get_issuer)
X509_STORE_set_get_issuer = _pygmssl.X509_STORE_set_get_issuer

def X509_STORE_get_get_issuer(ctx):
    return _pygmssl.X509_STORE_get_get_issuer(ctx)
X509_STORE_get_get_issuer = _pygmssl.X509_STORE_get_get_issuer

def X509_STORE_set_check_issued(ctx, check_issued):
    return _pygmssl.X509_STORE_set_check_issued(ctx, check_issued)
X509_STORE_set_check_issued = _pygmssl.X509_STORE_set_check_issued

def X509_STORE_get_check_issued(ctx):
    return _pygmssl.X509_STORE_get_check_issued(ctx)
X509_STORE_get_check_issued = _pygmssl.X509_STORE_get_check_issued

def X509_STORE_set_check_revocation(ctx, check_revocation):
    return _pygmssl.X509_STORE_set_check_revocation(ctx, check_revocation)
X509_STORE_set_check_revocation = _pygmssl.X509_STORE_set_check_revocation

def X509_STORE_get_check_revocation(ctx):
    return _pygmssl.X509_STORE_get_check_revocation(ctx)
X509_STORE_get_check_revocation = _pygmssl.X509_STORE_get_check_revocation

def X509_STORE_set_get_crl(ctx, get_crl):
    return _pygmssl.X509_STORE_set_get_crl(ctx, get_crl)
X509_STORE_set_get_crl = _pygmssl.X509_STORE_set_get_crl

def X509_STORE_get_get_crl(ctx):
    return _pygmssl.X509_STORE_get_get_crl(ctx)
X509_STORE_get_get_crl = _pygmssl.X509_STORE_get_get_crl

def X509_STORE_set_check_crl(ctx, check_crl):
    return _pygmssl.X509_STORE_set_check_crl(ctx, check_crl)
X509_STORE_set_check_crl = _pygmssl.X509_STORE_set_check_crl

def X509_STORE_get_check_crl(ctx):
    return _pygmssl.X509_STORE_get_check_crl(ctx)
X509_STORE_get_check_crl = _pygmssl.X509_STORE_get_check_crl

def X509_STORE_set_cert_crl(ctx, cert_crl):
    return _pygmssl.X509_STORE_set_cert_crl(ctx, cert_crl)
X509_STORE_set_cert_crl = _pygmssl.X509_STORE_set_cert_crl

def X509_STORE_get_cert_crl(ctx):
    return _pygmssl.X509_STORE_get_cert_crl(ctx)
X509_STORE_get_cert_crl = _pygmssl.X509_STORE_get_cert_crl

def X509_STORE_set_check_policy(ctx, check_policy):
    return _pygmssl.X509_STORE_set_check_policy(ctx, check_policy)
X509_STORE_set_check_policy = _pygmssl.X509_STORE_set_check_policy

def X509_STORE_get_check_policy(ctx):
    return _pygmssl.X509_STORE_get_check_policy(ctx)
X509_STORE_get_check_policy = _pygmssl.X509_STORE_get_check_policy

def X509_STORE_set_lookup_certs(ctx, lookup_certs):
    return _pygmssl.X509_STORE_set_lookup_certs(ctx, lookup_certs)
X509_STORE_set_lookup_certs = _pygmssl.X509_STORE_set_lookup_certs

def X509_STORE_get_lookup_certs(ctx):
    return _pygmssl.X509_STORE_get_lookup_certs(ctx)
X509_STORE_get_lookup_certs = _pygmssl.X509_STORE_get_lookup_certs

def X509_STORE_set_lookup_crls(ctx, lookup_crls):
    return _pygmssl.X509_STORE_set_lookup_crls(ctx, lookup_crls)
X509_STORE_set_lookup_crls = _pygmssl.X509_STORE_set_lookup_crls

def X509_STORE_get_lookup_crls(ctx):
    return _pygmssl.X509_STORE_get_lookup_crls(ctx)
X509_STORE_get_lookup_crls = _pygmssl.X509_STORE_get_lookup_crls

def X509_STORE_set_cleanup(ctx, cleanup):
    return _pygmssl.X509_STORE_set_cleanup(ctx, cleanup)
X509_STORE_set_cleanup = _pygmssl.X509_STORE_set_cleanup

def X509_STORE_get_cleanup(ctx):
    return _pygmssl.X509_STORE_get_cleanup(ctx)
X509_STORE_get_cleanup = _pygmssl.X509_STORE_get_cleanup

def X509_STORE_set_ex_data(ctx, idx, data):
    return _pygmssl.X509_STORE_set_ex_data(ctx, idx, data)
X509_STORE_set_ex_data = _pygmssl.X509_STORE_set_ex_data

def X509_STORE_get_ex_data(ctx, idx):
    return _pygmssl.X509_STORE_get_ex_data(ctx, idx)
X509_STORE_get_ex_data = _pygmssl.X509_STORE_get_ex_data

def X509_STORE_CTX_new():
    return _pygmssl.X509_STORE_CTX_new()
X509_STORE_CTX_new = _pygmssl.X509_STORE_CTX_new

def X509_STORE_CTX_get1_issuer(issuer, ctx, x):
    return _pygmssl.X509_STORE_CTX_get1_issuer(issuer, ctx, x)
X509_STORE_CTX_get1_issuer = _pygmssl.X509_STORE_CTX_get1_issuer

def X509_STORE_CTX_free(ctx):
    return _pygmssl.X509_STORE_CTX_free(ctx)
X509_STORE_CTX_free = _pygmssl.X509_STORE_CTX_free

def X509_STORE_CTX_cleanup(ctx):
    return _pygmssl.X509_STORE_CTX_cleanup(ctx)
X509_STORE_CTX_cleanup = _pygmssl.X509_STORE_CTX_cleanup

def X509_STORE_CTX_get0_store(ctx):
    return _pygmssl.X509_STORE_CTX_get0_store(ctx)
X509_STORE_CTX_get0_store = _pygmssl.X509_STORE_CTX_get0_store

def X509_STORE_CTX_get0_cert(ctx):
    return _pygmssl.X509_STORE_CTX_get0_cert(ctx)
X509_STORE_CTX_get0_cert = _pygmssl.X509_STORE_CTX_get0_cert

def X509_STORE_CTX_set_verify_cb(ctx, verify):
    return _pygmssl.X509_STORE_CTX_set_verify_cb(ctx, verify)
X509_STORE_CTX_set_verify_cb = _pygmssl.X509_STORE_CTX_set_verify_cb

def X509_STORE_CTX_get_verify_cb(ctx):
    return _pygmssl.X509_STORE_CTX_get_verify_cb(ctx)
X509_STORE_CTX_get_verify_cb = _pygmssl.X509_STORE_CTX_get_verify_cb

def X509_STORE_CTX_get_verify(ctx):
    return _pygmssl.X509_STORE_CTX_get_verify(ctx)
X509_STORE_CTX_get_verify = _pygmssl.X509_STORE_CTX_get_verify

def X509_STORE_CTX_get_get_issuer(ctx):
    return _pygmssl.X509_STORE_CTX_get_get_issuer(ctx)
X509_STORE_CTX_get_get_issuer = _pygmssl.X509_STORE_CTX_get_get_issuer

def X509_STORE_CTX_get_check_issued(ctx):
    return _pygmssl.X509_STORE_CTX_get_check_issued(ctx)
X509_STORE_CTX_get_check_issued = _pygmssl.X509_STORE_CTX_get_check_issued

def X509_STORE_CTX_get_check_revocation(ctx):
    return _pygmssl.X509_STORE_CTX_get_check_revocation(ctx)
X509_STORE_CTX_get_check_revocation = _pygmssl.X509_STORE_CTX_get_check_revocation

def X509_STORE_CTX_get_get_crl(ctx):
    return _pygmssl.X509_STORE_CTX_get_get_crl(ctx)
X509_STORE_CTX_get_get_crl = _pygmssl.X509_STORE_CTX_get_get_crl

def X509_STORE_CTX_get_check_crl(ctx):
    return _pygmssl.X509_STORE_CTX_get_check_crl(ctx)
X509_STORE_CTX_get_check_crl = _pygmssl.X509_STORE_CTX_get_check_crl

def X509_STORE_CTX_get_cert_crl(ctx):
    return _pygmssl.X509_STORE_CTX_get_cert_crl(ctx)
X509_STORE_CTX_get_cert_crl = _pygmssl.X509_STORE_CTX_get_cert_crl

def X509_STORE_CTX_get_check_policy(ctx):
    return _pygmssl.X509_STORE_CTX_get_check_policy(ctx)
X509_STORE_CTX_get_check_policy = _pygmssl.X509_STORE_CTX_get_check_policy

def X509_STORE_CTX_get_lookup_certs(ctx):
    return _pygmssl.X509_STORE_CTX_get_lookup_certs(ctx)
X509_STORE_CTX_get_lookup_certs = _pygmssl.X509_STORE_CTX_get_lookup_certs

def X509_STORE_CTX_get_lookup_crls(ctx):
    return _pygmssl.X509_STORE_CTX_get_lookup_crls(ctx)
X509_STORE_CTX_get_lookup_crls = _pygmssl.X509_STORE_CTX_get_lookup_crls

def X509_STORE_CTX_get_cleanup(ctx):
    return _pygmssl.X509_STORE_CTX_get_cleanup(ctx)
X509_STORE_CTX_get_cleanup = _pygmssl.X509_STORE_CTX_get_cleanup

def X509_STORE_add_lookup(v, m):
    return _pygmssl.X509_STORE_add_lookup(v, m)
X509_STORE_add_lookup = _pygmssl.X509_STORE_add_lookup

def X509_LOOKUP_hash_dir():
    return _pygmssl.X509_LOOKUP_hash_dir()
X509_LOOKUP_hash_dir = _pygmssl.X509_LOOKUP_hash_dir

def X509_LOOKUP_file():
    return _pygmssl.X509_LOOKUP_file()
X509_LOOKUP_file = _pygmssl.X509_LOOKUP_file

def X509_STORE_add_cert(ctx, x):
    return _pygmssl.X509_STORE_add_cert(ctx, x)
X509_STORE_add_cert = _pygmssl.X509_STORE_add_cert

def X509_STORE_add_crl(ctx, x):
    return _pygmssl.X509_STORE_add_crl(ctx, x)
X509_STORE_add_crl = _pygmssl.X509_STORE_add_crl

def X509_STORE_CTX_get_by_subject(vs, type, name, ret):
    return _pygmssl.X509_STORE_CTX_get_by_subject(vs, type, name, ret)
X509_STORE_CTX_get_by_subject = _pygmssl.X509_STORE_CTX_get_by_subject

def X509_STORE_CTX_get_obj_by_subject(vs, type, name):
    return _pygmssl.X509_STORE_CTX_get_obj_by_subject(vs, type, name)
X509_STORE_CTX_get_obj_by_subject = _pygmssl.X509_STORE_CTX_get_obj_by_subject

def X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret):
    return _pygmssl.X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret)
X509_LOOKUP_ctrl = _pygmssl.X509_LOOKUP_ctrl

def X509_load_cert_file(ctx, file, type):
    return _pygmssl.X509_load_cert_file(ctx, file, type)
X509_load_cert_file = _pygmssl.X509_load_cert_file

def X509_load_crl_file(ctx, file, type):
    return _pygmssl.X509_load_crl_file(ctx, file, type)
X509_load_crl_file = _pygmssl.X509_load_crl_file

def X509_load_cert_crl_file(ctx, file, type):
    return _pygmssl.X509_load_cert_crl_file(ctx, file, type)
X509_load_cert_crl_file = _pygmssl.X509_load_cert_crl_file

def X509_LOOKUP_new(method):
    return _pygmssl.X509_LOOKUP_new(method)
X509_LOOKUP_new = _pygmssl.X509_LOOKUP_new

def X509_LOOKUP_free(ctx):
    return _pygmssl.X509_LOOKUP_free(ctx)
X509_LOOKUP_free = _pygmssl.X509_LOOKUP_free

def X509_LOOKUP_init(ctx):
    return _pygmssl.X509_LOOKUP_init(ctx)
X509_LOOKUP_init = _pygmssl.X509_LOOKUP_init

def X509_LOOKUP_by_subject(ctx, type, name, ret):
    return _pygmssl.X509_LOOKUP_by_subject(ctx, type, name, ret)
X509_LOOKUP_by_subject = _pygmssl.X509_LOOKUP_by_subject

def X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret):
    return _pygmssl.X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret)
X509_LOOKUP_by_issuer_serial = _pygmssl.X509_LOOKUP_by_issuer_serial

def X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret):
    return _pygmssl.X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret)
X509_LOOKUP_by_fingerprint = _pygmssl.X509_LOOKUP_by_fingerprint

def X509_LOOKUP_by_alias(ctx, type, str, len, ret):
    return _pygmssl.X509_LOOKUP_by_alias(ctx, type, str, len, ret)
X509_LOOKUP_by_alias = _pygmssl.X509_LOOKUP_by_alias

def X509_LOOKUP_shutdown(ctx):
    return _pygmssl.X509_LOOKUP_shutdown(ctx)
X509_LOOKUP_shutdown = _pygmssl.X509_LOOKUP_shutdown

def X509_STORE_load_locations(ctx, file, dir):
    return _pygmssl.X509_STORE_load_locations(ctx, file, dir)
X509_STORE_load_locations = _pygmssl.X509_STORE_load_locations

def X509_STORE_set_default_paths(ctx):
    return _pygmssl.X509_STORE_set_default_paths(ctx)
X509_STORE_set_default_paths = _pygmssl.X509_STORE_set_default_paths

def X509_STORE_CTX_set_ex_data(ctx, idx, data):
    return _pygmssl.X509_STORE_CTX_set_ex_data(ctx, idx, data)
X509_STORE_CTX_set_ex_data = _pygmssl.X509_STORE_CTX_set_ex_data

def X509_STORE_CTX_get_ex_data(ctx, idx):
    return _pygmssl.X509_STORE_CTX_get_ex_data(ctx, idx)
X509_STORE_CTX_get_ex_data = _pygmssl.X509_STORE_CTX_get_ex_data

def X509_STORE_CTX_get_error(ctx):
    return _pygmssl.X509_STORE_CTX_get_error(ctx)
X509_STORE_CTX_get_error = _pygmssl.X509_STORE_CTX_get_error

def X509_STORE_CTX_set_error(ctx, s):
    return _pygmssl.X509_STORE_CTX_set_error(ctx, s)
X509_STORE_CTX_set_error = _pygmssl.X509_STORE_CTX_set_error

def X509_STORE_CTX_get_error_depth(ctx):
    return _pygmssl.X509_STORE_CTX_get_error_depth(ctx)
X509_STORE_CTX_get_error_depth = _pygmssl.X509_STORE_CTX_get_error_depth

def X509_STORE_CTX_set_error_depth(ctx, depth):
    return _pygmssl.X509_STORE_CTX_set_error_depth(ctx, depth)
X509_STORE_CTX_set_error_depth = _pygmssl.X509_STORE_CTX_set_error_depth

def X509_STORE_CTX_get_current_cert(ctx):
    return _pygmssl.X509_STORE_CTX_get_current_cert(ctx)
X509_STORE_CTX_get_current_cert = _pygmssl.X509_STORE_CTX_get_current_cert

def X509_STORE_CTX_set_current_cert(ctx, x):
    return _pygmssl.X509_STORE_CTX_set_current_cert(ctx, x)
X509_STORE_CTX_set_current_cert = _pygmssl.X509_STORE_CTX_set_current_cert

def X509_STORE_CTX_get0_current_issuer(ctx):
    return _pygmssl.X509_STORE_CTX_get0_current_issuer(ctx)
X509_STORE_CTX_get0_current_issuer = _pygmssl.X509_STORE_CTX_get0_current_issuer

def X509_STORE_CTX_get0_current_crl(ctx):
    return _pygmssl.X509_STORE_CTX_get0_current_crl(ctx)
X509_STORE_CTX_get0_current_crl = _pygmssl.X509_STORE_CTX_get0_current_crl

def X509_STORE_CTX_get0_parent_ctx(ctx):
    return _pygmssl.X509_STORE_CTX_get0_parent_ctx(ctx)
X509_STORE_CTX_get0_parent_ctx = _pygmssl.X509_STORE_CTX_get0_parent_ctx

def X509_STORE_CTX_set_cert(c, x):
    return _pygmssl.X509_STORE_CTX_set_cert(c, x)
X509_STORE_CTX_set_cert = _pygmssl.X509_STORE_CTX_set_cert

def X509_STORE_CTX_set_purpose(ctx, purpose):
    return _pygmssl.X509_STORE_CTX_set_purpose(ctx, purpose)
X509_STORE_CTX_set_purpose = _pygmssl.X509_STORE_CTX_set_purpose

def X509_STORE_CTX_set_trust(ctx, trust):
    return _pygmssl.X509_STORE_CTX_set_trust(ctx, trust)
X509_STORE_CTX_set_trust = _pygmssl.X509_STORE_CTX_set_trust

def X509_STORE_CTX_purpose_inherit(ctx, def_purpose, purpose, trust):
    return _pygmssl.X509_STORE_CTX_purpose_inherit(ctx, def_purpose, purpose, trust)
X509_STORE_CTX_purpose_inherit = _pygmssl.X509_STORE_CTX_purpose_inherit

def X509_STORE_CTX_set_flags(ctx, flags):
    return _pygmssl.X509_STORE_CTX_set_flags(ctx, flags)
X509_STORE_CTX_set_flags = _pygmssl.X509_STORE_CTX_set_flags

def X509_STORE_CTX_set_time(ctx, flags, t):
    return _pygmssl.X509_STORE_CTX_set_time(ctx, flags, t)
X509_STORE_CTX_set_time = _pygmssl.X509_STORE_CTX_set_time

def X509_STORE_CTX_get0_policy_tree(ctx):
    return _pygmssl.X509_STORE_CTX_get0_policy_tree(ctx)
X509_STORE_CTX_get0_policy_tree = _pygmssl.X509_STORE_CTX_get0_policy_tree

def X509_STORE_CTX_get_explicit_policy(ctx):
    return _pygmssl.X509_STORE_CTX_get_explicit_policy(ctx)
X509_STORE_CTX_get_explicit_policy = _pygmssl.X509_STORE_CTX_get_explicit_policy

def X509_STORE_CTX_get_num_untrusted(ctx):
    return _pygmssl.X509_STORE_CTX_get_num_untrusted(ctx)
X509_STORE_CTX_get_num_untrusted = _pygmssl.X509_STORE_CTX_get_num_untrusted

def X509_STORE_CTX_get0_param(ctx):
    return _pygmssl.X509_STORE_CTX_get0_param(ctx)
X509_STORE_CTX_get0_param = _pygmssl.X509_STORE_CTX_get0_param

def X509_STORE_CTX_set0_param(ctx, param):
    return _pygmssl.X509_STORE_CTX_set0_param(ctx, param)
X509_STORE_CTX_set0_param = _pygmssl.X509_STORE_CTX_set0_param

def X509_STORE_CTX_set_default(ctx, name):
    return _pygmssl.X509_STORE_CTX_set_default(ctx, name)
X509_STORE_CTX_set_default = _pygmssl.X509_STORE_CTX_set_default

def X509_STORE_CTX_set0_dane(ctx, dane):
    return _pygmssl.X509_STORE_CTX_set0_dane(ctx, dane)
X509_STORE_CTX_set0_dane = _pygmssl.X509_STORE_CTX_set0_dane

def X509_VERIFY_PARAM_new():
    return _pygmssl.X509_VERIFY_PARAM_new()
X509_VERIFY_PARAM_new = _pygmssl.X509_VERIFY_PARAM_new

def X509_VERIFY_PARAM_free(param):
    return _pygmssl.X509_VERIFY_PARAM_free(param)
X509_VERIFY_PARAM_free = _pygmssl.X509_VERIFY_PARAM_free

def X509_VERIFY_PARAM_inherit(to, arg2):
    return _pygmssl.X509_VERIFY_PARAM_inherit(to, arg2)
X509_VERIFY_PARAM_inherit = _pygmssl.X509_VERIFY_PARAM_inherit

def X509_VERIFY_PARAM_set1(to, arg2):
    return _pygmssl.X509_VERIFY_PARAM_set1(to, arg2)
X509_VERIFY_PARAM_set1 = _pygmssl.X509_VERIFY_PARAM_set1

def X509_VERIFY_PARAM_set1_name(param, name):
    return _pygmssl.X509_VERIFY_PARAM_set1_name(param, name)
X509_VERIFY_PARAM_set1_name = _pygmssl.X509_VERIFY_PARAM_set1_name

def X509_VERIFY_PARAM_set_flags(param, flags):
    return _pygmssl.X509_VERIFY_PARAM_set_flags(param, flags)
X509_VERIFY_PARAM_set_flags = _pygmssl.X509_VERIFY_PARAM_set_flags

def X509_VERIFY_PARAM_clear_flags(param, flags):
    return _pygmssl.X509_VERIFY_PARAM_clear_flags(param, flags)
X509_VERIFY_PARAM_clear_flags = _pygmssl.X509_VERIFY_PARAM_clear_flags

def X509_VERIFY_PARAM_get_flags(param):
    return _pygmssl.X509_VERIFY_PARAM_get_flags(param)
X509_VERIFY_PARAM_get_flags = _pygmssl.X509_VERIFY_PARAM_get_flags

def X509_VERIFY_PARAM_set_purpose(param, purpose):
    return _pygmssl.X509_VERIFY_PARAM_set_purpose(param, purpose)
X509_VERIFY_PARAM_set_purpose = _pygmssl.X509_VERIFY_PARAM_set_purpose

def X509_VERIFY_PARAM_set_trust(param, trust):
    return _pygmssl.X509_VERIFY_PARAM_set_trust(param, trust)
X509_VERIFY_PARAM_set_trust = _pygmssl.X509_VERIFY_PARAM_set_trust

def X509_VERIFY_PARAM_set_depth(param, depth):
    return _pygmssl.X509_VERIFY_PARAM_set_depth(param, depth)
X509_VERIFY_PARAM_set_depth = _pygmssl.X509_VERIFY_PARAM_set_depth

def X509_VERIFY_PARAM_set_auth_level(param, auth_level):
    return _pygmssl.X509_VERIFY_PARAM_set_auth_level(param, auth_level)
X509_VERIFY_PARAM_set_auth_level = _pygmssl.X509_VERIFY_PARAM_set_auth_level

def X509_VERIFY_PARAM_get_time(param):
    return _pygmssl.X509_VERIFY_PARAM_get_time(param)
X509_VERIFY_PARAM_get_time = _pygmssl.X509_VERIFY_PARAM_get_time

def X509_VERIFY_PARAM_set_time(param, t):
    return _pygmssl.X509_VERIFY_PARAM_set_time(param, t)
X509_VERIFY_PARAM_set_time = _pygmssl.X509_VERIFY_PARAM_set_time

def X509_VERIFY_PARAM_add0_policy(param, policy):
    return _pygmssl.X509_VERIFY_PARAM_add0_policy(param, policy)
X509_VERIFY_PARAM_add0_policy = _pygmssl.X509_VERIFY_PARAM_add0_policy

def X509_VERIFY_PARAM_set_inh_flags(param, flags):
    return _pygmssl.X509_VERIFY_PARAM_set_inh_flags(param, flags)
X509_VERIFY_PARAM_set_inh_flags = _pygmssl.X509_VERIFY_PARAM_set_inh_flags

def X509_VERIFY_PARAM_get_inh_flags(param):
    return _pygmssl.X509_VERIFY_PARAM_get_inh_flags(param)
X509_VERIFY_PARAM_get_inh_flags = _pygmssl.X509_VERIFY_PARAM_get_inh_flags

def X509_VERIFY_PARAM_set1_host(param, name, namelen):
    return _pygmssl.X509_VERIFY_PARAM_set1_host(param, name, namelen)
X509_VERIFY_PARAM_set1_host = _pygmssl.X509_VERIFY_PARAM_set1_host

def X509_VERIFY_PARAM_add1_host(param, name, namelen):
    return _pygmssl.X509_VERIFY_PARAM_add1_host(param, name, namelen)
X509_VERIFY_PARAM_add1_host = _pygmssl.X509_VERIFY_PARAM_add1_host

def X509_VERIFY_PARAM_set_hostflags(param, flags):
    return _pygmssl.X509_VERIFY_PARAM_set_hostflags(param, flags)
X509_VERIFY_PARAM_set_hostflags = _pygmssl.X509_VERIFY_PARAM_set_hostflags

def X509_VERIFY_PARAM_get0_peername(arg1):
    return _pygmssl.X509_VERIFY_PARAM_get0_peername(arg1)
X509_VERIFY_PARAM_get0_peername = _pygmssl.X509_VERIFY_PARAM_get0_peername

def X509_VERIFY_PARAM_move_peername(arg1, arg2):
    return _pygmssl.X509_VERIFY_PARAM_move_peername(arg1, arg2)
X509_VERIFY_PARAM_move_peername = _pygmssl.X509_VERIFY_PARAM_move_peername

def X509_VERIFY_PARAM_set1_email(param, email, emaillen):
    return _pygmssl.X509_VERIFY_PARAM_set1_email(param, email, emaillen)
X509_VERIFY_PARAM_set1_email = _pygmssl.X509_VERIFY_PARAM_set1_email

def X509_VERIFY_PARAM_set1_ip(param, ip, iplen):
    return _pygmssl.X509_VERIFY_PARAM_set1_ip(param, ip, iplen)
X509_VERIFY_PARAM_set1_ip = _pygmssl.X509_VERIFY_PARAM_set1_ip

def X509_VERIFY_PARAM_set1_ip_asc(param, ipasc):
    return _pygmssl.X509_VERIFY_PARAM_set1_ip_asc(param, ipasc)
X509_VERIFY_PARAM_set1_ip_asc = _pygmssl.X509_VERIFY_PARAM_set1_ip_asc

def X509_VERIFY_PARAM_get_depth(param):
    return _pygmssl.X509_VERIFY_PARAM_get_depth(param)
X509_VERIFY_PARAM_get_depth = _pygmssl.X509_VERIFY_PARAM_get_depth

def X509_VERIFY_PARAM_get_auth_level(param):
    return _pygmssl.X509_VERIFY_PARAM_get_auth_level(param)
X509_VERIFY_PARAM_get_auth_level = _pygmssl.X509_VERIFY_PARAM_get_auth_level

def X509_VERIFY_PARAM_get0_name(param):
    return _pygmssl.X509_VERIFY_PARAM_get0_name(param)
X509_VERIFY_PARAM_get0_name = _pygmssl.X509_VERIFY_PARAM_get0_name

def X509_VERIFY_PARAM_add0_table(param):
    return _pygmssl.X509_VERIFY_PARAM_add0_table(param)
X509_VERIFY_PARAM_add0_table = _pygmssl.X509_VERIFY_PARAM_add0_table

def X509_VERIFY_PARAM_get_count():
    return _pygmssl.X509_VERIFY_PARAM_get_count()
X509_VERIFY_PARAM_get_count = _pygmssl.X509_VERIFY_PARAM_get_count

def X509_VERIFY_PARAM_get0(id):
    return _pygmssl.X509_VERIFY_PARAM_get0(id)
X509_VERIFY_PARAM_get0 = _pygmssl.X509_VERIFY_PARAM_get0

def X509_VERIFY_PARAM_lookup(name):
    return _pygmssl.X509_VERIFY_PARAM_lookup(name)
X509_VERIFY_PARAM_lookup = _pygmssl.X509_VERIFY_PARAM_lookup

def X509_VERIFY_PARAM_table_cleanup():
    return _pygmssl.X509_VERIFY_PARAM_table_cleanup()
X509_VERIFY_PARAM_table_cleanup = _pygmssl.X509_VERIFY_PARAM_table_cleanup

def X509_policy_tree_free(tree):
    return _pygmssl.X509_policy_tree_free(tree)
X509_policy_tree_free = _pygmssl.X509_policy_tree_free

def X509_policy_tree_level_count(tree):
    return _pygmssl.X509_policy_tree_level_count(tree)
X509_policy_tree_level_count = _pygmssl.X509_policy_tree_level_count

def X509_policy_tree_get0_level(tree, i):
    return _pygmssl.X509_policy_tree_get0_level(tree, i)
X509_policy_tree_get0_level = _pygmssl.X509_policy_tree_get0_level

def X509_policy_level_node_count(level):
    return _pygmssl.X509_policy_level_node_count(level)
X509_policy_level_node_count = _pygmssl.X509_policy_level_node_count

def X509_policy_level_get0_node(level, i):
    return _pygmssl.X509_policy_level_get0_node(level, i)
X509_policy_level_get0_node = _pygmssl.X509_policy_level_get0_node

def X509_policy_node_get0_policy(node):
    return _pygmssl.X509_policy_node_get0_policy(node)
X509_policy_node_get0_policy = _pygmssl.X509_policy_node_get0_policy

def X509_policy_node_get0_parent(node):
    return _pygmssl.X509_policy_node_get0_parent(node)
X509_policy_node_get0_parent = _pygmssl.X509_policy_node_get0_parent

def SXNET_add_id_asc(psx, zone, user, userlen):
    return _pygmssl.SXNET_add_id_asc(psx, zone, user, userlen)
SXNET_add_id_asc = _pygmssl.SXNET_add_id_asc

def SXNET_add_id_ulong(psx, lzone, user, userlen):
    return _pygmssl.SXNET_add_id_ulong(psx, lzone, user, userlen)
SXNET_add_id_ulong = _pygmssl.SXNET_add_id_ulong

def SXNET_add_id_INTEGER(psx, izone, user, userlen):
    return _pygmssl.SXNET_add_id_INTEGER(psx, izone, user, userlen)
SXNET_add_id_INTEGER = _pygmssl.SXNET_add_id_INTEGER

def SXNET_get_id_asc(sx, zone):
    return _pygmssl.SXNET_get_id_asc(sx, zone)
SXNET_get_id_asc = _pygmssl.SXNET_get_id_asc

def SXNET_get_id_ulong(sx, lzone):
    return _pygmssl.SXNET_get_id_ulong(sx, lzone)
SXNET_get_id_ulong = _pygmssl.SXNET_get_id_ulong

def SXNET_get_id_INTEGER(sx, zone):
    return _pygmssl.SXNET_get_id_INTEGER(sx, zone)
SXNET_get_id_INTEGER = _pygmssl.SXNET_get_id_INTEGER

def GENERAL_NAME_dup(a):
    return _pygmssl.GENERAL_NAME_dup(a)
GENERAL_NAME_dup = _pygmssl.GENERAL_NAME_dup

def GENERAL_NAME_cmp(a, b):
    return _pygmssl.GENERAL_NAME_cmp(a, b)
GENERAL_NAME_cmp = _pygmssl.GENERAL_NAME_cmp

def i2s_ASN1_IA5STRING(method, ia5):
    return _pygmssl.i2s_ASN1_IA5STRING(method, ia5)
i2s_ASN1_IA5STRING = _pygmssl.i2s_ASN1_IA5STRING

def s2i_ASN1_IA5STRING(method, ctx, str):
    return _pygmssl.s2i_ASN1_IA5STRING(method, ctx, str)
s2i_ASN1_IA5STRING = _pygmssl.s2i_ASN1_IA5STRING

def GENERAL_NAME_print(out, gen):
    return _pygmssl.GENERAL_NAME_print(out, gen)
GENERAL_NAME_print = _pygmssl.GENERAL_NAME_print

def OTHERNAME_cmp(a, b):
    return _pygmssl.OTHERNAME_cmp(a, b)
OTHERNAME_cmp = _pygmssl.OTHERNAME_cmp

def GENERAL_NAME_set0_value(a, type, value):
    return _pygmssl.GENERAL_NAME_set0_value(a, type, value)
GENERAL_NAME_set0_value = _pygmssl.GENERAL_NAME_set0_value

def GENERAL_NAME_get0_value(a, ptype):
    return _pygmssl.GENERAL_NAME_get0_value(a, ptype)
GENERAL_NAME_get0_value = _pygmssl.GENERAL_NAME_get0_value

def GENERAL_NAME_set0_othername(gen, oid, value):
    return _pygmssl.GENERAL_NAME_set0_othername(gen, oid, value)
GENERAL_NAME_set0_othername = _pygmssl.GENERAL_NAME_set0_othername

def GENERAL_NAME_get0_otherName(gen, poid, pvalue):
    return _pygmssl.GENERAL_NAME_get0_otherName(gen, poid, pvalue)
GENERAL_NAME_get0_otherName = _pygmssl.GENERAL_NAME_get0_otherName

def i2s_ASN1_OCTET_STRING(method, ia5):
    return _pygmssl.i2s_ASN1_OCTET_STRING(method, ia5)
i2s_ASN1_OCTET_STRING = _pygmssl.i2s_ASN1_OCTET_STRING

def s2i_ASN1_OCTET_STRING(method, ctx, str):
    return _pygmssl.s2i_ASN1_OCTET_STRING(method, ctx, str)
s2i_ASN1_OCTET_STRING = _pygmssl.s2i_ASN1_OCTET_STRING

def i2a_ACCESS_DESCRIPTION(bp, a):
    return _pygmssl.i2a_ACCESS_DESCRIPTION(bp, a)
i2a_ACCESS_DESCRIPTION = _pygmssl.i2a_ACCESS_DESCRIPTION

def DIST_POINT_set_dpname(dpn, iname):
    return _pygmssl.DIST_POINT_set_dpname(dpn, iname)
DIST_POINT_set_dpname = _pygmssl.DIST_POINT_set_dpname

def NAME_CONSTRAINTS_check(x, nc):
    return _pygmssl.NAME_CONSTRAINTS_check(x, nc)
NAME_CONSTRAINTS_check = _pygmssl.NAME_CONSTRAINTS_check

def NAME_CONSTRAINTS_check_CN(x, nc):
    return _pygmssl.NAME_CONSTRAINTS_check_CN(x, nc)
NAME_CONSTRAINTS_check_CN = _pygmssl.NAME_CONSTRAINTS_check_CN

def a2i_GENERAL_NAME(out, method, ctx, gen_type, value, is_nc):
    return _pygmssl.a2i_GENERAL_NAME(out, method, ctx, gen_type, value, is_nc)
a2i_GENERAL_NAME = _pygmssl.a2i_GENERAL_NAME

def v2i_GENERAL_NAME(method, ctx, cnf):
    return _pygmssl.v2i_GENERAL_NAME(method, ctx, cnf)
v2i_GENERAL_NAME = _pygmssl.v2i_GENERAL_NAME

def v2i_GENERAL_NAME_ex(out, method, ctx, cnf, is_nc):
    return _pygmssl.v2i_GENERAL_NAME_ex(out, method, ctx, cnf, is_nc)
v2i_GENERAL_NAME_ex = _pygmssl.v2i_GENERAL_NAME_ex

def X509V3_conf_free(val):
    return _pygmssl.X509V3_conf_free(val)
X509V3_conf_free = _pygmssl.X509V3_conf_free

def X509V3_EXT_nconf_nid(conf, ctx, ext_nid, value):
    return _pygmssl.X509V3_EXT_nconf_nid(conf, ctx, ext_nid, value)
X509V3_EXT_nconf_nid = _pygmssl.X509V3_EXT_nconf_nid

def X509V3_EXT_nconf(conf, ctx, name, value):
    return _pygmssl.X509V3_EXT_nconf(conf, ctx, name, value)
X509V3_EXT_nconf = _pygmssl.X509V3_EXT_nconf

def X509V3_EXT_add_nconf(conf, ctx, section, cert):
    return _pygmssl.X509V3_EXT_add_nconf(conf, ctx, section, cert)
X509V3_EXT_add_nconf = _pygmssl.X509V3_EXT_add_nconf

def X509V3_EXT_REQ_add_nconf(conf, ctx, section, req):
    return _pygmssl.X509V3_EXT_REQ_add_nconf(conf, ctx, section, req)
X509V3_EXT_REQ_add_nconf = _pygmssl.X509V3_EXT_REQ_add_nconf

def X509V3_EXT_CRL_add_nconf(conf, ctx, section, crl):
    return _pygmssl.X509V3_EXT_CRL_add_nconf(conf, ctx, section, crl)
X509V3_EXT_CRL_add_nconf = _pygmssl.X509V3_EXT_CRL_add_nconf

def X509V3_get_value_bool(value, asn1_bool):
    return _pygmssl.X509V3_get_value_bool(value, asn1_bool)
X509V3_get_value_bool = _pygmssl.X509V3_get_value_bool

def X509V3_get_value_int(value, aint):
    return _pygmssl.X509V3_get_value_int(value, aint)
X509V3_get_value_int = _pygmssl.X509V3_get_value_int

def X509V3_set_nconf(ctx, conf):
    return _pygmssl.X509V3_set_nconf(ctx, conf)
X509V3_set_nconf = _pygmssl.X509V3_set_nconf

def X509V3_get_string(ctx, name, section):
    return _pygmssl.X509V3_get_string(ctx, name, section)
X509V3_get_string = _pygmssl.X509V3_get_string

def X509V3_string_free(ctx, str):
    return _pygmssl.X509V3_string_free(ctx, str)
X509V3_string_free = _pygmssl.X509V3_string_free

def X509V3_set_ctx(ctx, issuer, subject, req, crl, flags):
    return _pygmssl.X509V3_set_ctx(ctx, issuer, subject, req, crl, flags)
X509V3_set_ctx = _pygmssl.X509V3_set_ctx

def i2s_ASN1_INTEGER(meth, aint):
    return _pygmssl.i2s_ASN1_INTEGER(meth, aint)
i2s_ASN1_INTEGER = _pygmssl.i2s_ASN1_INTEGER

def s2i_ASN1_INTEGER(meth, value):
    return _pygmssl.s2i_ASN1_INTEGER(meth, value)
s2i_ASN1_INTEGER = _pygmssl.s2i_ASN1_INTEGER

def i2s_ASN1_ENUMERATED(meth, aint):
    return _pygmssl.i2s_ASN1_ENUMERATED(meth, aint)
i2s_ASN1_ENUMERATED = _pygmssl.i2s_ASN1_ENUMERATED

def i2s_ASN1_ENUMERATED_TABLE(meth, aint):
    return _pygmssl.i2s_ASN1_ENUMERATED_TABLE(meth, aint)
i2s_ASN1_ENUMERATED_TABLE = _pygmssl.i2s_ASN1_ENUMERATED_TABLE

def X509V3_EXT_add(ext):
    return _pygmssl.X509V3_EXT_add(ext)
X509V3_EXT_add = _pygmssl.X509V3_EXT_add

def X509V3_EXT_add_list(extlist):
    return _pygmssl.X509V3_EXT_add_list(extlist)
X509V3_EXT_add_list = _pygmssl.X509V3_EXT_add_list

def X509V3_EXT_add_alias(nid_to, nid_from):
    return _pygmssl.X509V3_EXT_add_alias(nid_to, nid_from)
X509V3_EXT_add_alias = _pygmssl.X509V3_EXT_add_alias

def X509V3_EXT_cleanup():
    return _pygmssl.X509V3_EXT_cleanup()
X509V3_EXT_cleanup = _pygmssl.X509V3_EXT_cleanup

def X509V3_EXT_get(ext):
    return _pygmssl.X509V3_EXT_get(ext)
X509V3_EXT_get = _pygmssl.X509V3_EXT_get

def X509V3_EXT_get_nid(nid):
    return _pygmssl.X509V3_EXT_get_nid(nid)
X509V3_EXT_get_nid = _pygmssl.X509V3_EXT_get_nid

def X509V3_add_standard_extensions():
    return _pygmssl.X509V3_add_standard_extensions()
X509V3_add_standard_extensions = _pygmssl.X509V3_add_standard_extensions

def X509V3_EXT_d2i(ext):
    return _pygmssl.X509V3_EXT_d2i(ext)
X509V3_EXT_d2i = _pygmssl.X509V3_EXT_d2i

def X509V3_EXT_i2d(ext_nid, crit, ext_struc):
    return _pygmssl.X509V3_EXT_i2d(ext_nid, crit, ext_struc)
X509V3_EXT_i2d = _pygmssl.X509V3_EXT_i2d

def X509_check_ca(x):
    return _pygmssl.X509_check_ca(x)
X509_check_ca = _pygmssl.X509_check_ca

def X509_check_purpose(x, id, ca):
    return _pygmssl.X509_check_purpose(x, id, ca)
X509_check_purpose = _pygmssl.X509_check_purpose

def X509_supported_extension(ex):
    return _pygmssl.X509_supported_extension(ex)
X509_supported_extension = _pygmssl.X509_supported_extension

def X509_PURPOSE_set(p, purpose):
    return _pygmssl.X509_PURPOSE_set(p, purpose)
X509_PURPOSE_set = _pygmssl.X509_PURPOSE_set

def X509_check_issued(issuer, subject):
    return _pygmssl.X509_check_issued(issuer, subject)
X509_check_issued = _pygmssl.X509_check_issued

def X509_check_akid(issuer, akid):
    return _pygmssl.X509_check_akid(issuer, akid)
X509_check_akid = _pygmssl.X509_check_akid

def X509_set_proxy_flag(x):
    return _pygmssl.X509_set_proxy_flag(x)
X509_set_proxy_flag = _pygmssl.X509_set_proxy_flag

def X509_set_proxy_pathlen(x, l):
    return _pygmssl.X509_set_proxy_pathlen(x, l)
X509_set_proxy_pathlen = _pygmssl.X509_set_proxy_pathlen

def X509_get_proxy_pathlen(x):
    return _pygmssl.X509_get_proxy_pathlen(x)
X509_get_proxy_pathlen = _pygmssl.X509_get_proxy_pathlen

def X509_get_extension_flags(x):
    return _pygmssl.X509_get_extension_flags(x)
X509_get_extension_flags = _pygmssl.X509_get_extension_flags

def X509_get_key_usage(x):
    return _pygmssl.X509_get_key_usage(x)
X509_get_key_usage = _pygmssl.X509_get_key_usage

def X509_get_extended_key_usage(x):
    return _pygmssl.X509_get_extended_key_usage(x)
X509_get_extended_key_usage = _pygmssl.X509_get_extended_key_usage

def X509_get0_subject_key_id(x):
    return _pygmssl.X509_get0_subject_key_id(x)
X509_get0_subject_key_id = _pygmssl.X509_get0_subject_key_id

def X509_PURPOSE_get_count():
    return _pygmssl.X509_PURPOSE_get_count()
X509_PURPOSE_get_count = _pygmssl.X509_PURPOSE_get_count

def X509_PURPOSE_get0(idx):
    return _pygmssl.X509_PURPOSE_get0(idx)
X509_PURPOSE_get0 = _pygmssl.X509_PURPOSE_get0

def X509_PURPOSE_get_by_sname(sname):
    return _pygmssl.X509_PURPOSE_get_by_sname(sname)
X509_PURPOSE_get_by_sname = _pygmssl.X509_PURPOSE_get_by_sname

def X509_PURPOSE_get_by_id(id):
    return _pygmssl.X509_PURPOSE_get_by_id(id)
X509_PURPOSE_get_by_id = _pygmssl.X509_PURPOSE_get_by_id

def X509_PURPOSE_get0_name(xp):
    return _pygmssl.X509_PURPOSE_get0_name(xp)
X509_PURPOSE_get0_name = _pygmssl.X509_PURPOSE_get0_name

def X509_PURPOSE_get0_sname(xp):
    return _pygmssl.X509_PURPOSE_get0_sname(xp)
X509_PURPOSE_get0_sname = _pygmssl.X509_PURPOSE_get0_sname

def X509_PURPOSE_get_trust(xp):
    return _pygmssl.X509_PURPOSE_get_trust(xp)
X509_PURPOSE_get_trust = _pygmssl.X509_PURPOSE_get_trust

def X509_PURPOSE_cleanup():
    return _pygmssl.X509_PURPOSE_cleanup()
X509_PURPOSE_cleanup = _pygmssl.X509_PURPOSE_cleanup

def X509_PURPOSE_get_id(arg1):
    return _pygmssl.X509_PURPOSE_get_id(arg1)
X509_PURPOSE_get_id = _pygmssl.X509_PURPOSE_get_id

def X509_check_host(x, chk, chklen, flags, peername):
    return _pygmssl.X509_check_host(x, chk, chklen, flags, peername)
X509_check_host = _pygmssl.X509_check_host

def X509_check_email(x, chk, chklen, flags):
    return _pygmssl.X509_check_email(x, chk, chklen, flags)
X509_check_email = _pygmssl.X509_check_email

def X509_check_ip(x, chk, chklen, flags):
    return _pygmssl.X509_check_ip(x, chk, chklen, flags)
X509_check_ip = _pygmssl.X509_check_ip

def X509_check_ip_asc(x, ipasc, flags):
    return _pygmssl.X509_check_ip_asc(x, ipasc, flags)
X509_check_ip_asc = _pygmssl.X509_check_ip_asc

def a2i_IPADDRESS(ipasc):
    return _pygmssl.a2i_IPADDRESS(ipasc)
a2i_IPADDRESS = _pygmssl.a2i_IPADDRESS

def a2i_IPADDRESS_NC(ipasc):
    return _pygmssl.a2i_IPADDRESS_NC(ipasc)
a2i_IPADDRESS_NC = _pygmssl.a2i_IPADDRESS_NC

def X509_POLICY_NODE_print(out, node, indent):
    return _pygmssl.X509_POLICY_NODE_print(out, node, indent)
X509_POLICY_NODE_print = _pygmssl.X509_POLICY_NODE_print

def X509v3_asid_add_inherit(asid, which):
    return _pygmssl.X509v3_asid_add_inherit(asid, which)
X509v3_asid_add_inherit = _pygmssl.X509v3_asid_add_inherit

def X509v3_asid_add_id_or_range(asid, which, min, max):
    return _pygmssl.X509v3_asid_add_id_or_range(asid, which, min, max)
X509v3_asid_add_id_or_range = _pygmssl.X509v3_asid_add_id_or_range

def X509v3_addr_add_inherit(addr, afi, safi):
    return _pygmssl.X509v3_addr_add_inherit(addr, afi, safi)
X509v3_addr_add_inherit = _pygmssl.X509v3_addr_add_inherit

def X509v3_addr_add_prefix(addr, afi, safi, a, prefixlen):
    return _pygmssl.X509v3_addr_add_prefix(addr, afi, safi, a, prefixlen)
X509v3_addr_add_prefix = _pygmssl.X509v3_addr_add_prefix

def X509v3_addr_add_range(addr, afi, safi, min, max):
    return _pygmssl.X509v3_addr_add_range(addr, afi, safi, min, max)
X509v3_addr_add_range = _pygmssl.X509v3_addr_add_range

def X509v3_addr_get_afi(f):
    return _pygmssl.X509v3_addr_get_afi(f)
X509v3_addr_get_afi = _pygmssl.X509v3_addr_get_afi

def X509v3_addr_get_range(aor, afi, min, max, length):
    return _pygmssl.X509v3_addr_get_range(aor, afi, min, max, length)
X509v3_addr_get_range = _pygmssl.X509v3_addr_get_range

def X509v3_asid_is_canonical(asid):
    return _pygmssl.X509v3_asid_is_canonical(asid)
X509v3_asid_is_canonical = _pygmssl.X509v3_asid_is_canonical

def X509v3_addr_is_canonical(addr):
    return _pygmssl.X509v3_addr_is_canonical(addr)
X509v3_addr_is_canonical = _pygmssl.X509v3_addr_is_canonical

def X509v3_asid_canonize(asid):
    return _pygmssl.X509v3_asid_canonize(asid)
X509v3_asid_canonize = _pygmssl.X509v3_asid_canonize

def X509v3_addr_canonize(addr):
    return _pygmssl.X509v3_addr_canonize(addr)
X509v3_addr_canonize = _pygmssl.X509v3_addr_canonize

def X509v3_asid_inherits(asid):
    return _pygmssl.X509v3_asid_inherits(asid)
X509v3_asid_inherits = _pygmssl.X509v3_asid_inherits

def X509v3_addr_inherits(addr):
    return _pygmssl.X509v3_addr_inherits(addr)
X509v3_addr_inherits = _pygmssl.X509v3_addr_inherits

def X509v3_asid_subset(a, b):
    return _pygmssl.X509v3_asid_subset(a, b)
X509v3_asid_subset = _pygmssl.X509v3_asid_subset

def X509v3_addr_subset(a, b):
    return _pygmssl.X509v3_addr_subset(a, b)
X509v3_addr_subset = _pygmssl.X509v3_addr_subset

def X509v3_asid_validate_path(arg1):
    return _pygmssl.X509v3_asid_validate_path(arg1)
X509v3_asid_validate_path = _pygmssl.X509v3_asid_validate_path

def X509v3_addr_validate_path(arg1):
    return _pygmssl.X509v3_addr_validate_path(arg1)
X509v3_addr_validate_path = _pygmssl.X509v3_addr_validate_path

def BN_set_flags(b, n):
    return _pygmssl.BN_set_flags(b, n)
BN_set_flags = _pygmssl.BN_set_flags

def BN_get_flags(b, n):
    return _pygmssl.BN_get_flags(b, n)
BN_get_flags = _pygmssl.BN_get_flags

def BN_with_flags(dest, b, flags):
    return _pygmssl.BN_with_flags(dest, b, flags)
BN_with_flags = _pygmssl.BN_with_flags

def BN_GENCB_call(cb, a, b):
    return _pygmssl.BN_GENCB_call(cb, a, b)
BN_GENCB_call = _pygmssl.BN_GENCB_call

def BN_GENCB_new():
    return _pygmssl.BN_GENCB_new()
BN_GENCB_new = _pygmssl.BN_GENCB_new

def BN_GENCB_free(cb):
    return _pygmssl.BN_GENCB_free(cb)
BN_GENCB_free = _pygmssl.BN_GENCB_free

def BN_GENCB_get_arg(cb):
    return _pygmssl.BN_GENCB_get_arg(cb)
BN_GENCB_get_arg = _pygmssl.BN_GENCB_get_arg

def BN_abs_is_word(a, w):
    return _pygmssl.BN_abs_is_word(a, w)
BN_abs_is_word = _pygmssl.BN_abs_is_word

def BN_is_zero(a):
    return _pygmssl.BN_is_zero(a)
BN_is_zero = _pygmssl.BN_is_zero

def BN_is_one(a):
    return _pygmssl.BN_is_one(a)
BN_is_one = _pygmssl.BN_is_one

def BN_is_word(a, w):
    return _pygmssl.BN_is_word(a, w)
BN_is_word = _pygmssl.BN_is_word

def BN_is_odd(a):
    return _pygmssl.BN_is_odd(a)
BN_is_odd = _pygmssl.BN_is_odd

def BN_zero_ex(a):
    return _pygmssl.BN_zero_ex(a)
BN_zero_ex = _pygmssl.BN_zero_ex

def BN_value_one():
    return _pygmssl.BN_value_one()
BN_value_one = _pygmssl.BN_value_one

def BN_options():
    return _pygmssl.BN_options()
BN_options = _pygmssl.BN_options

def BN_CTX_new():
    return _pygmssl.BN_CTX_new()
BN_CTX_new = _pygmssl.BN_CTX_new

def BN_CTX_secure_new():
    return _pygmssl.BN_CTX_secure_new()
BN_CTX_secure_new = _pygmssl.BN_CTX_secure_new

def BN_CTX_free(c):
    return _pygmssl.BN_CTX_free(c)
BN_CTX_free = _pygmssl.BN_CTX_free

def BN_CTX_start(ctx):
    return _pygmssl.BN_CTX_start(ctx)
BN_CTX_start = _pygmssl.BN_CTX_start

def BN_CTX_get(ctx):
    return _pygmssl.BN_CTX_get(ctx)
BN_CTX_get = _pygmssl.BN_CTX_get

def BN_CTX_end(ctx):
    return _pygmssl.BN_CTX_end(ctx)
BN_CTX_end = _pygmssl.BN_CTX_end

def BN_rand(rnd, bits, top, bottom):
    return _pygmssl.BN_rand(rnd, bits, top, bottom)
BN_rand = _pygmssl.BN_rand

def BN_pseudo_rand(rnd, bits, top, bottom):
    return _pygmssl.BN_pseudo_rand(rnd, bits, top, bottom)
BN_pseudo_rand = _pygmssl.BN_pseudo_rand

def BN_rand_range(rnd, range):
    return _pygmssl.BN_rand_range(rnd, range)
BN_rand_range = _pygmssl.BN_rand_range

def BN_pseudo_rand_range(rnd, range):
    return _pygmssl.BN_pseudo_rand_range(rnd, range)
BN_pseudo_rand_range = _pygmssl.BN_pseudo_rand_range

def BN_num_bits(a):
    return _pygmssl.BN_num_bits(a)
BN_num_bits = _pygmssl.BN_num_bits

def BN_num_bits_word(l):
    return _pygmssl.BN_num_bits_word(l)
BN_num_bits_word = _pygmssl.BN_num_bits_word

def BN_security_bits(L, N):
    return _pygmssl.BN_security_bits(L, N)
BN_security_bits = _pygmssl.BN_security_bits

def BN_new():
    return _pygmssl.BN_new()
BN_new = _pygmssl.BN_new

def BN_secure_new():
    return _pygmssl.BN_secure_new()
BN_secure_new = _pygmssl.BN_secure_new

def BN_clear_free(a):
    return _pygmssl.BN_clear_free(a)
BN_clear_free = _pygmssl.BN_clear_free

def BN_copy(a, b):
    return _pygmssl.BN_copy(a, b)
BN_copy = _pygmssl.BN_copy

def BN_swap(a, b):
    return _pygmssl.BN_swap(a, b)
BN_swap = _pygmssl.BN_swap

def BN_bin2bn(s, len, ret):
    return _pygmssl.BN_bin2bn(s, len, ret)
BN_bin2bn = _pygmssl.BN_bin2bn

def BN_bn2bin(a, to):
    return _pygmssl.BN_bn2bin(a, to)
BN_bn2bin = _pygmssl.BN_bn2bin

def BN_bn2binpad(a, to, tolen):
    return _pygmssl.BN_bn2binpad(a, to, tolen)
BN_bn2binpad = _pygmssl.BN_bn2binpad

def BN_lebin2bn(s, len, ret):
    return _pygmssl.BN_lebin2bn(s, len, ret)
BN_lebin2bn = _pygmssl.BN_lebin2bn

def BN_bn2lebinpad(a, to, tolen):
    return _pygmssl.BN_bn2lebinpad(a, to, tolen)
BN_bn2lebinpad = _pygmssl.BN_bn2lebinpad

def BN_mpi2bn(s, len, ret):
    return _pygmssl.BN_mpi2bn(s, len, ret)
BN_mpi2bn = _pygmssl.BN_mpi2bn

def BN_bn2mpi(a, to):
    return _pygmssl.BN_bn2mpi(a, to)
BN_bn2mpi = _pygmssl.BN_bn2mpi

def BN_sub(r, a, b):
    return _pygmssl.BN_sub(r, a, b)
BN_sub = _pygmssl.BN_sub

def BN_usub(r, a, b):
    return _pygmssl.BN_usub(r, a, b)
BN_usub = _pygmssl.BN_usub

def BN_uadd(r, a, b):
    return _pygmssl.BN_uadd(r, a, b)
BN_uadd = _pygmssl.BN_uadd

def BN_add(r, a, b):
    return _pygmssl.BN_add(r, a, b)
BN_add = _pygmssl.BN_add

def BN_mul(r, a, b, ctx):
    return _pygmssl.BN_mul(r, a, b, ctx)
BN_mul = _pygmssl.BN_mul

def BN_sqr(r, a, ctx):
    return _pygmssl.BN_sqr(r, a, ctx)
BN_sqr = _pygmssl.BN_sqr

def BN_set_negative(b, n):
    return _pygmssl.BN_set_negative(b, n)
BN_set_negative = _pygmssl.BN_set_negative

def BN_is_negative(b):
    return _pygmssl.BN_is_negative(b)
BN_is_negative = _pygmssl.BN_is_negative

def BN_div(dv, rem, m, d, ctx):
    return _pygmssl.BN_div(dv, rem, m, d, ctx)
BN_div = _pygmssl.BN_div

def BN_nnmod(r, m, d, ctx):
    return _pygmssl.BN_nnmod(r, m, d, ctx)
BN_nnmod = _pygmssl.BN_nnmod

def BN_mod_add(r, a, b, m, ctx):
    return _pygmssl.BN_mod_add(r, a, b, m, ctx)
BN_mod_add = _pygmssl.BN_mod_add

def BN_mod_add_quick(r, a, b, m):
    return _pygmssl.BN_mod_add_quick(r, a, b, m)
BN_mod_add_quick = _pygmssl.BN_mod_add_quick

def BN_mod_sub(r, a, b, m, ctx):
    return _pygmssl.BN_mod_sub(r, a, b, m, ctx)
BN_mod_sub = _pygmssl.BN_mod_sub

def BN_mod_sub_quick(r, a, b, m):
    return _pygmssl.BN_mod_sub_quick(r, a, b, m)
BN_mod_sub_quick = _pygmssl.BN_mod_sub_quick

def BN_mod_mul(r, a, b, m, ctx):
    return _pygmssl.BN_mod_mul(r, a, b, m, ctx)
BN_mod_mul = _pygmssl.BN_mod_mul

def BN_mod_sqr(r, a, m, ctx):
    return _pygmssl.BN_mod_sqr(r, a, m, ctx)
BN_mod_sqr = _pygmssl.BN_mod_sqr

def BN_mod_lshift1(r, a, m, ctx):
    return _pygmssl.BN_mod_lshift1(r, a, m, ctx)
BN_mod_lshift1 = _pygmssl.BN_mod_lshift1

def BN_mod_lshift1_quick(r, a, m):
    return _pygmssl.BN_mod_lshift1_quick(r, a, m)
BN_mod_lshift1_quick = _pygmssl.BN_mod_lshift1_quick

def BN_mod_lshift(r, a, n, m, ctx):
    return _pygmssl.BN_mod_lshift(r, a, n, m, ctx)
BN_mod_lshift = _pygmssl.BN_mod_lshift

def BN_mod_lshift_quick(r, a, n, m):
    return _pygmssl.BN_mod_lshift_quick(r, a, n, m)
BN_mod_lshift_quick = _pygmssl.BN_mod_lshift_quick

def BN_mod_word(a, w):
    return _pygmssl.BN_mod_word(a, w)
BN_mod_word = _pygmssl.BN_mod_word

def BN_div_word(a, w):
    return _pygmssl.BN_div_word(a, w)
BN_div_word = _pygmssl.BN_div_word

def BN_mul_word(a, w):
    return _pygmssl.BN_mul_word(a, w)
BN_mul_word = _pygmssl.BN_mul_word

def BN_add_word(a, w):
    return _pygmssl.BN_add_word(a, w)
BN_add_word = _pygmssl.BN_add_word

def BN_sub_word(a, w):
    return _pygmssl.BN_sub_word(a, w)
BN_sub_word = _pygmssl.BN_sub_word

def BN_set_word(a, w):
    return _pygmssl.BN_set_word(a, w)
BN_set_word = _pygmssl.BN_set_word

def BN_get_word(a):
    return _pygmssl.BN_get_word(a)
BN_get_word = _pygmssl.BN_get_word

def BN_cmp(a, b):
    return _pygmssl.BN_cmp(a, b)
BN_cmp = _pygmssl.BN_cmp

def BN_free(a):
    return _pygmssl.BN_free(a)
BN_free = _pygmssl.BN_free

def BN_is_bit_set(a, n):
    return _pygmssl.BN_is_bit_set(a, n)
BN_is_bit_set = _pygmssl.BN_is_bit_set

def BN_lshift(r, a, n):
    return _pygmssl.BN_lshift(r, a, n)
BN_lshift = _pygmssl.BN_lshift

def BN_lshift1(r, a):
    return _pygmssl.BN_lshift1(r, a)
BN_lshift1 = _pygmssl.BN_lshift1

def BN_exp(r, a, p, ctx):
    return _pygmssl.BN_exp(r, a, p, ctx)
BN_exp = _pygmssl.BN_exp

def BN_mod_exp(r, a, p, m, ctx):
    return _pygmssl.BN_mod_exp(r, a, p, m, ctx)
BN_mod_exp = _pygmssl.BN_mod_exp

def BN_mod_exp_mont(r, a, p, m, ctx, m_ctx):
    return _pygmssl.BN_mod_exp_mont(r, a, p, m, ctx, m_ctx)
BN_mod_exp_mont = _pygmssl.BN_mod_exp_mont

def BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont):
    return _pygmssl.BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont)
BN_mod_exp_mont_consttime = _pygmssl.BN_mod_exp_mont_consttime

def BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx):
    return _pygmssl.BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx)
BN_mod_exp_mont_word = _pygmssl.BN_mod_exp_mont_word

def BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx):
    return _pygmssl.BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx)
BN_mod_exp2_mont = _pygmssl.BN_mod_exp2_mont

def BN_mod_exp_simple(r, a, p, m, ctx):
    return _pygmssl.BN_mod_exp_simple(r, a, p, m, ctx)
BN_mod_exp_simple = _pygmssl.BN_mod_exp_simple

def BN_mask_bits(a, n):
    return _pygmssl.BN_mask_bits(a, n)
BN_mask_bits = _pygmssl.BN_mask_bits

def BN_print(bio, a):
    return _pygmssl.BN_print(bio, a)
BN_print = _pygmssl.BN_print

def BN_reciprocal(r, m, len, ctx):
    return _pygmssl.BN_reciprocal(r, m, len, ctx)
BN_reciprocal = _pygmssl.BN_reciprocal

def BN_rshift(r, a, n):
    return _pygmssl.BN_rshift(r, a, n)
BN_rshift = _pygmssl.BN_rshift

def BN_rshift1(r, a):
    return _pygmssl.BN_rshift1(r, a)
BN_rshift1 = _pygmssl.BN_rshift1

def BN_clear(a):
    return _pygmssl.BN_clear(a)
BN_clear = _pygmssl.BN_clear

def BN_dup(a):
    return _pygmssl.BN_dup(a)
BN_dup = _pygmssl.BN_dup

def BN_ucmp(a, b):
    return _pygmssl.BN_ucmp(a, b)
BN_ucmp = _pygmssl.BN_ucmp

def BN_set_bit(a, n):
    return _pygmssl.BN_set_bit(a, n)
BN_set_bit = _pygmssl.BN_set_bit

def BN_clear_bit(a, n):
    return _pygmssl.BN_clear_bit(a, n)
BN_clear_bit = _pygmssl.BN_clear_bit

def BN_bn2hex(a):
    return _pygmssl.BN_bn2hex(a)
BN_bn2hex = _pygmssl.BN_bn2hex

def BN_bn2dec(a):
    return _pygmssl.BN_bn2dec(a)
BN_bn2dec = _pygmssl.BN_bn2dec

def BN_hex2bn(a, str):
    return _pygmssl.BN_hex2bn(a, str)
BN_hex2bn = _pygmssl.BN_hex2bn

def BN_dec2bn(a, str):
    return _pygmssl.BN_dec2bn(a, str)
BN_dec2bn = _pygmssl.BN_dec2bn

def BN_asc2bn(a, str):
    return _pygmssl.BN_asc2bn(a, str)
BN_asc2bn = _pygmssl.BN_asc2bn

def BN_gcd(r, a, b, ctx):
    return _pygmssl.BN_gcd(r, a, b, ctx)
BN_gcd = _pygmssl.BN_gcd

def BN_kronecker(a, b, ctx):
    return _pygmssl.BN_kronecker(a, b, ctx)
BN_kronecker = _pygmssl.BN_kronecker

def BN_mod_inverse(ret, a, n, ctx):
    return _pygmssl.BN_mod_inverse(ret, a, n, ctx)
BN_mod_inverse = _pygmssl.BN_mod_inverse

def BN_mod_sqrt(ret, a, n, ctx):
    return _pygmssl.BN_mod_sqrt(ret, a, n, ctx)
BN_mod_sqrt = _pygmssl.BN_mod_sqrt

def BN_consttime_swap(swap, a, b, nwords):
    return _pygmssl.BN_consttime_swap(swap, a, b, nwords)
BN_consttime_swap = _pygmssl.BN_consttime_swap

def BN_generate_prime_ex(ret, bits, safe, add, rem, cb):
    return _pygmssl.BN_generate_prime_ex(ret, bits, safe, add, rem, cb)
BN_generate_prime_ex = _pygmssl.BN_generate_prime_ex

def BN_is_prime_ex(p, nchecks, ctx, cb):
    return _pygmssl.BN_is_prime_ex(p, nchecks, ctx, cb)
BN_is_prime_ex = _pygmssl.BN_is_prime_ex

def BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_division, cb):
    return _pygmssl.BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_division, cb)
BN_is_prime_fasttest_ex = _pygmssl.BN_is_prime_fasttest_ex

def BN_X931_generate_Xpq(Xp, Xq, nbits, ctx):
    return _pygmssl.BN_X931_generate_Xpq(Xp, Xq, nbits, ctx)
BN_X931_generate_Xpq = _pygmssl.BN_X931_generate_Xpq

def BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb):
    return _pygmssl.BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb)
BN_X931_derive_prime_ex = _pygmssl.BN_X931_derive_prime_ex

def BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb):
    return _pygmssl.BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb)
BN_X931_generate_prime_ex = _pygmssl.BN_X931_generate_prime_ex

def BN_MONT_CTX_new():
    return _pygmssl.BN_MONT_CTX_new()
BN_MONT_CTX_new = _pygmssl.BN_MONT_CTX_new

def BN_mod_mul_montgomery(r, a, b, mont, ctx):
    return _pygmssl.BN_mod_mul_montgomery(r, a, b, mont, ctx)
BN_mod_mul_montgomery = _pygmssl.BN_mod_mul_montgomery

def BN_to_montgomery(r, a, mont, ctx):
    return _pygmssl.BN_to_montgomery(r, a, mont, ctx)
BN_to_montgomery = _pygmssl.BN_to_montgomery

def BN_from_montgomery(r, a, mont, ctx):
    return _pygmssl.BN_from_montgomery(r, a, mont, ctx)
BN_from_montgomery = _pygmssl.BN_from_montgomery

def BN_MONT_CTX_free(mont):
    return _pygmssl.BN_MONT_CTX_free(mont)
BN_MONT_CTX_free = _pygmssl.BN_MONT_CTX_free

def BN_MONT_CTX_set(mont, mod, ctx):
    return _pygmssl.BN_MONT_CTX_set(mont, mod, ctx)
BN_MONT_CTX_set = _pygmssl.BN_MONT_CTX_set

def BN_MONT_CTX_copy(to, arg2):
    return _pygmssl.BN_MONT_CTX_copy(to, arg2)
BN_MONT_CTX_copy = _pygmssl.BN_MONT_CTX_copy

def BN_MONT_CTX_set_locked(pmont, lock, mod, ctx):
    return _pygmssl.BN_MONT_CTX_set_locked(pmont, lock, mod, ctx)
BN_MONT_CTX_set_locked = _pygmssl.BN_MONT_CTX_set_locked

def BN_BLINDING_new(A, Ai, mod):
    return _pygmssl.BN_BLINDING_new(A, Ai, mod)
BN_BLINDING_new = _pygmssl.BN_BLINDING_new

def BN_BLINDING_free(b):
    return _pygmssl.BN_BLINDING_free(b)
BN_BLINDING_free = _pygmssl.BN_BLINDING_free

def BN_BLINDING_update(b, ctx):
    return _pygmssl.BN_BLINDING_update(b, ctx)
BN_BLINDING_update = _pygmssl.BN_BLINDING_update

def BN_BLINDING_convert(n, b, ctx):
    return _pygmssl.BN_BLINDING_convert(n, b, ctx)
BN_BLINDING_convert = _pygmssl.BN_BLINDING_convert

def BN_BLINDING_invert(n, b, ctx):
    return _pygmssl.BN_BLINDING_invert(n, b, ctx)
BN_BLINDING_invert = _pygmssl.BN_BLINDING_invert

def BN_BLINDING_convert_ex(n, r, b, arg4):
    return _pygmssl.BN_BLINDING_convert_ex(n, r, b, arg4)
BN_BLINDING_convert_ex = _pygmssl.BN_BLINDING_convert_ex

def BN_BLINDING_invert_ex(n, r, b, arg4):
    return _pygmssl.BN_BLINDING_invert_ex(n, r, b, arg4)
BN_BLINDING_invert_ex = _pygmssl.BN_BLINDING_invert_ex

def BN_BLINDING_is_current_thread(b):
    return _pygmssl.BN_BLINDING_is_current_thread(b)
BN_BLINDING_is_current_thread = _pygmssl.BN_BLINDING_is_current_thread

def BN_BLINDING_set_current_thread(b):
    return _pygmssl.BN_BLINDING_set_current_thread(b)
BN_BLINDING_set_current_thread = _pygmssl.BN_BLINDING_set_current_thread

def BN_BLINDING_lock(b):
    return _pygmssl.BN_BLINDING_lock(b)
BN_BLINDING_lock = _pygmssl.BN_BLINDING_lock

def BN_BLINDING_unlock(b):
    return _pygmssl.BN_BLINDING_unlock(b)
BN_BLINDING_unlock = _pygmssl.BN_BLINDING_unlock

def BN_BLINDING_get_flags(arg1):
    return _pygmssl.BN_BLINDING_get_flags(arg1)
BN_BLINDING_get_flags = _pygmssl.BN_BLINDING_get_flags

def BN_BLINDING_set_flags(arg1, arg2):
    return _pygmssl.BN_BLINDING_set_flags(arg1, arg2)
BN_BLINDING_set_flags = _pygmssl.BN_BLINDING_set_flags

def BN_RECP_CTX_new():
    return _pygmssl.BN_RECP_CTX_new()
BN_RECP_CTX_new = _pygmssl.BN_RECP_CTX_new

def BN_RECP_CTX_free(recp):
    return _pygmssl.BN_RECP_CTX_free(recp)
BN_RECP_CTX_free = _pygmssl.BN_RECP_CTX_free

def BN_RECP_CTX_set(recp, rdiv, ctx):
    return _pygmssl.BN_RECP_CTX_set(recp, rdiv, ctx)
BN_RECP_CTX_set = _pygmssl.BN_RECP_CTX_set

def BN_mod_mul_reciprocal(r, x, y, recp, ctx):
    return _pygmssl.BN_mod_mul_reciprocal(r, x, y, recp, ctx)
BN_mod_mul_reciprocal = _pygmssl.BN_mod_mul_reciprocal

def BN_mod_exp_recp(r, a, p, m, ctx):
    return _pygmssl.BN_mod_exp_recp(r, a, p, m, ctx)
BN_mod_exp_recp = _pygmssl.BN_mod_exp_recp

def BN_div_recp(dv, rem, m, recp, ctx):
    return _pygmssl.BN_div_recp(dv, rem, m, recp, ctx)
BN_div_recp = _pygmssl.BN_div_recp

def BN_GF2m_add(r, a, b):
    return _pygmssl.BN_GF2m_add(r, a, b)
BN_GF2m_add = _pygmssl.BN_GF2m_add

def BN_GF2m_mod(r, a, p):
    return _pygmssl.BN_GF2m_mod(r, a, p)
BN_GF2m_mod = _pygmssl.BN_GF2m_mod

def BN_GF2m_mod_mul(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_mul(r, a, b, p, ctx)
BN_GF2m_mod_mul = _pygmssl.BN_GF2m_mod_mul

def BN_GF2m_mod_sqr(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_sqr(r, a, p, ctx)
BN_GF2m_mod_sqr = _pygmssl.BN_GF2m_mod_sqr

def BN_GF2m_mod_inv(r, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_inv(r, b, p, ctx)
BN_GF2m_mod_inv = _pygmssl.BN_GF2m_mod_inv

def BN_GF2m_mod_div(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_div(r, a, b, p, ctx)
BN_GF2m_mod_div = _pygmssl.BN_GF2m_mod_div

def BN_GF2m_mod_exp(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_exp(r, a, b, p, ctx)
BN_GF2m_mod_exp = _pygmssl.BN_GF2m_mod_exp

def BN_GF2m_mod_sqrt(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_sqrt(r, a, p, ctx)
BN_GF2m_mod_sqrt = _pygmssl.BN_GF2m_mod_sqrt

def BN_GF2m_mod_solve_quad(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_solve_quad(r, a, p, ctx)
BN_GF2m_mod_solve_quad = _pygmssl.BN_GF2m_mod_solve_quad

def BN_GF2m_mod_arr(r, a, p):
    return _pygmssl.BN_GF2m_mod_arr(r, a, p)
BN_GF2m_mod_arr = _pygmssl.BN_GF2m_mod_arr

def BN_GF2m_mod_mul_arr(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_mul_arr(r, a, b, p, ctx)
BN_GF2m_mod_mul_arr = _pygmssl.BN_GF2m_mod_mul_arr

def BN_GF2m_mod_sqr_arr(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_sqr_arr(r, a, p, ctx)
BN_GF2m_mod_sqr_arr = _pygmssl.BN_GF2m_mod_sqr_arr

def BN_GF2m_mod_inv_arr(r, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_inv_arr(r, b, p, ctx)
BN_GF2m_mod_inv_arr = _pygmssl.BN_GF2m_mod_inv_arr

def BN_GF2m_mod_div_arr(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_div_arr(r, a, b, p, ctx)
BN_GF2m_mod_div_arr = _pygmssl.BN_GF2m_mod_div_arr

def BN_GF2m_mod_exp_arr(r, a, b, p, ctx):
    return _pygmssl.BN_GF2m_mod_exp_arr(r, a, b, p, ctx)
BN_GF2m_mod_exp_arr = _pygmssl.BN_GF2m_mod_exp_arr

def BN_GF2m_mod_sqrt_arr(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_sqrt_arr(r, a, p, ctx)
BN_GF2m_mod_sqrt_arr = _pygmssl.BN_GF2m_mod_sqrt_arr

def BN_GF2m_mod_solve_quad_arr(r, a, p, ctx):
    return _pygmssl.BN_GF2m_mod_solve_quad_arr(r, a, p, ctx)
BN_GF2m_mod_solve_quad_arr = _pygmssl.BN_GF2m_mod_solve_quad_arr

def BN_GF2m_poly2arr(a, p, max):
    return _pygmssl.BN_GF2m_poly2arr(a, p, max)
BN_GF2m_poly2arr = _pygmssl.BN_GF2m_poly2arr

def BN_GF2m_arr2poly(p, a):
    return _pygmssl.BN_GF2m_arr2poly(p, a)
BN_GF2m_arr2poly = _pygmssl.BN_GF2m_arr2poly

def BN_nist_mod_192(r, a, p, ctx):
    return _pygmssl.BN_nist_mod_192(r, a, p, ctx)
BN_nist_mod_192 = _pygmssl.BN_nist_mod_192

def BN_nist_mod_224(r, a, p, ctx):
    return _pygmssl.BN_nist_mod_224(r, a, p, ctx)
BN_nist_mod_224 = _pygmssl.BN_nist_mod_224

def BN_nist_mod_256(r, a, p, ctx):
    return _pygmssl.BN_nist_mod_256(r, a, p, ctx)
BN_nist_mod_256 = _pygmssl.BN_nist_mod_256

def BN_nist_mod_384(r, a, p, ctx):
    return _pygmssl.BN_nist_mod_384(r, a, p, ctx)
BN_nist_mod_384 = _pygmssl.BN_nist_mod_384

def BN_nist_mod_521(r, a, p, ctx):
    return _pygmssl.BN_nist_mod_521(r, a, p, ctx)
BN_nist_mod_521 = _pygmssl.BN_nist_mod_521

def BN_get0_nist_prime_192():
    return _pygmssl.BN_get0_nist_prime_192()
BN_get0_nist_prime_192 = _pygmssl.BN_get0_nist_prime_192

def BN_get0_nist_prime_224():
    return _pygmssl.BN_get0_nist_prime_224()
BN_get0_nist_prime_224 = _pygmssl.BN_get0_nist_prime_224

def BN_get0_nist_prime_256():
    return _pygmssl.BN_get0_nist_prime_256()
BN_get0_nist_prime_256 = _pygmssl.BN_get0_nist_prime_256

def BN_get0_nist_prime_384():
    return _pygmssl.BN_get0_nist_prime_384()
BN_get0_nist_prime_384 = _pygmssl.BN_get0_nist_prime_384

def BN_get0_nist_prime_521():
    return _pygmssl.BN_get0_nist_prime_521()
BN_get0_nist_prime_521 = _pygmssl.BN_get0_nist_prime_521

def BN_generate_dsa_nonce(out, range, priv, message, message_len, ctx):
    return _pygmssl.BN_generate_dsa_nonce(out, range, priv, message, message_len, ctx)
BN_generate_dsa_nonce = _pygmssl.BN_generate_dsa_nonce

def BN_get_rfc2409_prime_768(bn):
    return _pygmssl.BN_get_rfc2409_prime_768(bn)
BN_get_rfc2409_prime_768 = _pygmssl.BN_get_rfc2409_prime_768

def BN_get_rfc2409_prime_1024(bn):
    return _pygmssl.BN_get_rfc2409_prime_1024(bn)
BN_get_rfc2409_prime_1024 = _pygmssl.BN_get_rfc2409_prime_1024

def BN_get_rfc3526_prime_1536(bn):
    return _pygmssl.BN_get_rfc3526_prime_1536(bn)
BN_get_rfc3526_prime_1536 = _pygmssl.BN_get_rfc3526_prime_1536

def BN_get_rfc3526_prime_2048(bn):
    return _pygmssl.BN_get_rfc3526_prime_2048(bn)
BN_get_rfc3526_prime_2048 = _pygmssl.BN_get_rfc3526_prime_2048

def BN_get_rfc3526_prime_3072(bn):
    return _pygmssl.BN_get_rfc3526_prime_3072(bn)
BN_get_rfc3526_prime_3072 = _pygmssl.BN_get_rfc3526_prime_3072

def BN_get_rfc3526_prime_4096(bn):
    return _pygmssl.BN_get_rfc3526_prime_4096(bn)
BN_get_rfc3526_prime_4096 = _pygmssl.BN_get_rfc3526_prime_4096

def BN_get_rfc3526_prime_6144(bn):
    return _pygmssl.BN_get_rfc3526_prime_6144(bn)
BN_get_rfc3526_prime_6144 = _pygmssl.BN_get_rfc3526_prime_6144

def BN_get_rfc3526_prime_8192(bn):
    return _pygmssl.BN_get_rfc3526_prime_8192(bn)
BN_get_rfc3526_prime_8192 = _pygmssl.BN_get_rfc3526_prime_8192

def BN_bntest_rand(rnd, bits, top, bottom):
    return _pygmssl.BN_bntest_rand(rnd, bits, top, bottom)
BN_bntest_rand = _pygmssl.BN_bntest_rand

def ERR_load_BN_strings():
    return _pygmssl.ERR_load_BN_strings()
ERR_load_BN_strings = _pygmssl.ERR_load_BN_strings

def BN_GFP2_new():
    return _pygmssl.BN_GFP2_new()
BN_GFP2_new = _pygmssl.BN_GFP2_new

def BN_GFP2_free(a):
    return _pygmssl.BN_GFP2_free(a)
BN_GFP2_free = _pygmssl.BN_GFP2_free

def BN_GFP2_copy(r, a):
    return _pygmssl.BN_GFP2_copy(r, a)
BN_GFP2_copy = _pygmssl.BN_GFP2_copy

def BN_GFP2_one(a):
    return _pygmssl.BN_GFP2_one(a)
BN_GFP2_one = _pygmssl.BN_GFP2_one

def BN_GFP2_zero(a):
    return _pygmssl.BN_GFP2_zero(a)
BN_GFP2_zero = _pygmssl.BN_GFP2_zero

def BN_GFP2_is_zero(a):
    return _pygmssl.BN_GFP2_is_zero(a)
BN_GFP2_is_zero = _pygmssl.BN_GFP2_is_zero

def BN_GFP2_equ(a, b):
    return _pygmssl.BN_GFP2_equ(a, b)
BN_GFP2_equ = _pygmssl.BN_GFP2_equ

def BN_GFP2_add(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_add(r, a, b, p, ctx)
BN_GFP2_add = _pygmssl.BN_GFP2_add

def BN_GFP2_sub(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_sub(r, a, b, p, ctx)
BN_GFP2_sub = _pygmssl.BN_GFP2_sub

def BN_GFP2_mul(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_mul(r, a, b, p, ctx)
BN_GFP2_mul = _pygmssl.BN_GFP2_mul

def BN_GFP2_sqr(r, a, p, ctx):
    return _pygmssl.BN_GFP2_sqr(r, a, p, ctx)
BN_GFP2_sqr = _pygmssl.BN_GFP2_sqr

def BN_GFP2_inv(r, a, p, ctx):
    return _pygmssl.BN_GFP2_inv(r, a, p, ctx)
BN_GFP2_inv = _pygmssl.BN_GFP2_inv

def BN_GFP2_div(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_div(r, a, b, p, ctx)
BN_GFP2_div = _pygmssl.BN_GFP2_div

def BN_GFP2_exp(r, a, k, p, ctx):
    return _pygmssl.BN_GFP2_exp(r, a, k, p, ctx)
BN_GFP2_exp = _pygmssl.BN_GFP2_exp

def BN_GFP2_set_bn(r, a, p, ctx):
    return _pygmssl.BN_GFP2_set_bn(r, a, p, ctx)
BN_GFP2_set_bn = _pygmssl.BN_GFP2_set_bn

def BN_GFP2_add_bn(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_add_bn(r, a, b, p, ctx)
BN_GFP2_add_bn = _pygmssl.BN_GFP2_add_bn

def BN_GFP2_sub_bn(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_sub_bn(r, a, b, p, ctx)
BN_GFP2_sub_bn = _pygmssl.BN_GFP2_sub_bn

def BN_GFP2_mul_bn(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_mul_bn(r, a, b, p, ctx)
BN_GFP2_mul_bn = _pygmssl.BN_GFP2_mul_bn

def BN_GFP2_div_bn(r, a, b, p, ctx):
    return _pygmssl.BN_GFP2_div_bn(r, a, b, p, ctx)
BN_GFP2_div_bn = _pygmssl.BN_GFP2_div_bn

def BN_bn2gfp2(bn, gfp2, p, ctx):
    return _pygmssl.BN_bn2gfp2(bn, gfp2, p, ctx)
BN_bn2gfp2 = _pygmssl.BN_bn2gfp2

def BN_gfp22bn(gfp2, bn, p, ctx):
    return _pygmssl.BN_gfp22bn(gfp2, bn, p, ctx)
BN_gfp22bn = _pygmssl.BN_gfp22bn

def BN_hash_to_range(md, bn, arg3, inlen, p, ctx):
    return _pygmssl.BN_hash_to_range(md, bn, arg3, inlen, p, ctx)
BN_hash_to_range = _pygmssl.BN_hash_to_range

def BN_bn2solinas(bn, solinas):
    return _pygmssl.BN_bn2solinas(bn, solinas)
BN_bn2solinas = _pygmssl.BN_bn2solinas

def BN_solinas2bn(solinas, bn):
    return _pygmssl.BN_solinas2bn(solinas, bn)
BN_solinas2bn = _pygmssl.BN_solinas2bn

def BN_is_solinas(bn):
    return _pygmssl.BN_is_solinas(bn)
BN_is_solinas = _pygmssl.BN_is_solinas

def EC_POINT_hash2point(group, md, s, slen, point, ctx):
    return _pygmssl.EC_POINT_hash2point(group, md, s, slen, point, ctx)
EC_POINT_hash2point = _pygmssl.EC_POINT_hash2point

def EC_GROUP_new_type1curve(p, x, y, order, ctx):
    return _pygmssl.EC_GROUP_new_type1curve(p, x, y, order, ctx)
EC_GROUP_new_type1curve = _pygmssl.EC_GROUP_new_type1curve

def EC_GROUP_new_type1curve_ex(p, a, b, point, pointlen, order, cofactor, bn_ctx):
    return _pygmssl.EC_GROUP_new_type1curve_ex(p, a, b, point, pointlen, order, cofactor, bn_ctx)
EC_GROUP_new_type1curve_ex = _pygmssl.EC_GROUP_new_type1curve_ex

def EC_GROUP_is_type1curve(group, ctx):
    return _pygmssl.EC_GROUP_is_type1curve(group, ctx)
EC_GROUP_is_type1curve = _pygmssl.EC_GROUP_is_type1curve

def EC_GROUP_get_type1curve_zeta(group, ctx):
    return _pygmssl.EC_GROUP_get_type1curve_zeta(group, ctx)
EC_GROUP_get_type1curve_zeta = _pygmssl.EC_GROUP_get_type1curve_zeta

def EC_GROUP_get_type1curve_eta(group, ctx):
    return _pygmssl.EC_GROUP_get_type1curve_eta(group, ctx)
EC_GROUP_get_type1curve_eta = _pygmssl.EC_GROUP_get_type1curve_eta

def EC_type1curve_tate(group, r, P, Q, ctx):
    return _pygmssl.EC_type1curve_tate(group, r, P, Q, ctx)
EC_type1curve_tate = _pygmssl.EC_type1curve_tate

def EC_type1curve_tate_ratio(group, r, P1, Q1, P2, Q2, bn_ctx):
    return _pygmssl.EC_type1curve_tate_ratio(group, r, P1, Q1, P2, Q2, bn_ctx)
EC_type1curve_tate_ratio = _pygmssl.EC_type1curve_tate_ratio

def EC_GFp_simple_method():
    return _pygmssl.EC_GFp_simple_method()
EC_GFp_simple_method = _pygmssl.EC_GFp_simple_method

def EC_GFp_mont_method():
    return _pygmssl.EC_GFp_mont_method()
EC_GFp_mont_method = _pygmssl.EC_GFp_mont_method

def EC_GFp_nist_method():
    return _pygmssl.EC_GFp_nist_method()
EC_GFp_nist_method = _pygmssl.EC_GFp_nist_method

def EC_GF2m_simple_method():
    return _pygmssl.EC_GF2m_simple_method()
EC_GF2m_simple_method = _pygmssl.EC_GF2m_simple_method

def EC_GROUP_new(meth):
    return _pygmssl.EC_GROUP_new(meth)
EC_GROUP_new = _pygmssl.EC_GROUP_new

def EC_GROUP_free(group):
    return _pygmssl.EC_GROUP_free(group)
EC_GROUP_free = _pygmssl.EC_GROUP_free

def EC_GROUP_clear_free(group):
    return _pygmssl.EC_GROUP_clear_free(group)
EC_GROUP_clear_free = _pygmssl.EC_GROUP_clear_free

def EC_GROUP_copy(dst, src):
    return _pygmssl.EC_GROUP_copy(dst, src)
EC_GROUP_copy = _pygmssl.EC_GROUP_copy

def EC_GROUP_dup(src):
    return _pygmssl.EC_GROUP_dup(src)
EC_GROUP_dup = _pygmssl.EC_GROUP_dup

def EC_GROUP_method_of(group):
    return _pygmssl.EC_GROUP_method_of(group)
EC_GROUP_method_of = _pygmssl.EC_GROUP_method_of

def EC_METHOD_get_field_type(meth):
    return _pygmssl.EC_METHOD_get_field_type(meth)
EC_METHOD_get_field_type = _pygmssl.EC_METHOD_get_field_type

def EC_GROUP_set_generator(group, generator, order, cofactor):
    return _pygmssl.EC_GROUP_set_generator(group, generator, order, cofactor)
EC_GROUP_set_generator = _pygmssl.EC_GROUP_set_generator

def EC_GROUP_get0_generator(group):
    return _pygmssl.EC_GROUP_get0_generator(group)
EC_GROUP_get0_generator = _pygmssl.EC_GROUP_get0_generator

def EC_GROUP_get_mont_data(group):
    return _pygmssl.EC_GROUP_get_mont_data(group)
EC_GROUP_get_mont_data = _pygmssl.EC_GROUP_get_mont_data

def EC_GROUP_get_order(group, order, ctx):
    return _pygmssl.EC_GROUP_get_order(group, order, ctx)
EC_GROUP_get_order = _pygmssl.EC_GROUP_get_order

def EC_GROUP_get0_order(group):
    return _pygmssl.EC_GROUP_get0_order(group)
EC_GROUP_get0_order = _pygmssl.EC_GROUP_get0_order

def EC_GROUP_order_bits(group):
    return _pygmssl.EC_GROUP_order_bits(group)
EC_GROUP_order_bits = _pygmssl.EC_GROUP_order_bits

def EC_GROUP_get_cofactor(group, cofactor, ctx):
    return _pygmssl.EC_GROUP_get_cofactor(group, cofactor, ctx)
EC_GROUP_get_cofactor = _pygmssl.EC_GROUP_get_cofactor

def EC_GROUP_get0_cofactor(group):
    return _pygmssl.EC_GROUP_get0_cofactor(group)
EC_GROUP_get0_cofactor = _pygmssl.EC_GROUP_get0_cofactor

def EC_GROUP_set_curve_name(group, nid):
    return _pygmssl.EC_GROUP_set_curve_name(group, nid)
EC_GROUP_set_curve_name = _pygmssl.EC_GROUP_set_curve_name

def EC_GROUP_get_curve_name(group):
    return _pygmssl.EC_GROUP_get_curve_name(group)
EC_GROUP_get_curve_name = _pygmssl.EC_GROUP_get_curve_name

def EC_GROUP_set_asn1_flag(group, flag):
    return _pygmssl.EC_GROUP_set_asn1_flag(group, flag)
EC_GROUP_set_asn1_flag = _pygmssl.EC_GROUP_set_asn1_flag

def EC_GROUP_get_asn1_flag(group):
    return _pygmssl.EC_GROUP_get_asn1_flag(group)
EC_GROUP_get_asn1_flag = _pygmssl.EC_GROUP_get_asn1_flag

def EC_GROUP_set_point_conversion_form(group, form):
    return _pygmssl.EC_GROUP_set_point_conversion_form(group, form)
EC_GROUP_set_point_conversion_form = _pygmssl.EC_GROUP_set_point_conversion_form

def EC_GROUP_get_point_conversion_form(arg1):
    return _pygmssl.EC_GROUP_get_point_conversion_form(arg1)
EC_GROUP_get_point_conversion_form = _pygmssl.EC_GROUP_get_point_conversion_form

def EC_GROUP_get0_seed(x):
    return _pygmssl.EC_GROUP_get0_seed(x)
EC_GROUP_get0_seed = _pygmssl.EC_GROUP_get0_seed

def EC_GROUP_get_seed_len(arg1):
    return _pygmssl.EC_GROUP_get_seed_len(arg1)
EC_GROUP_get_seed_len = _pygmssl.EC_GROUP_get_seed_len

def EC_GROUP_set_seed(arg1, arg2, len):
    return _pygmssl.EC_GROUP_set_seed(arg1, arg2, len)
EC_GROUP_set_seed = _pygmssl.EC_GROUP_set_seed

def EC_GROUP_set_curve_GFp(group, p, a, b, ctx):
    return _pygmssl.EC_GROUP_set_curve_GFp(group, p, a, b, ctx)
EC_GROUP_set_curve_GFp = _pygmssl.EC_GROUP_set_curve_GFp

def EC_GROUP_get_curve_GFp(group, p, a, b, ctx):
    return _pygmssl.EC_GROUP_get_curve_GFp(group, p, a, b, ctx)
EC_GROUP_get_curve_GFp = _pygmssl.EC_GROUP_get_curve_GFp

def EC_GROUP_set_curve_GF2m(group, p, a, b, ctx):
    return _pygmssl.EC_GROUP_set_curve_GF2m(group, p, a, b, ctx)
EC_GROUP_set_curve_GF2m = _pygmssl.EC_GROUP_set_curve_GF2m

def EC_GROUP_get_curve_GF2m(group, p, a, b, ctx):
    return _pygmssl.EC_GROUP_get_curve_GF2m(group, p, a, b, ctx)
EC_GROUP_get_curve_GF2m = _pygmssl.EC_GROUP_get_curve_GF2m

def EC_GROUP_get_degree(group):
    return _pygmssl.EC_GROUP_get_degree(group)
EC_GROUP_get_degree = _pygmssl.EC_GROUP_get_degree

def EC_GROUP_check(group, ctx):
    return _pygmssl.EC_GROUP_check(group, ctx)
EC_GROUP_check = _pygmssl.EC_GROUP_check

def EC_GROUP_check_discriminant(group, ctx):
    return _pygmssl.EC_GROUP_check_discriminant(group, ctx)
EC_GROUP_check_discriminant = _pygmssl.EC_GROUP_check_discriminant

def EC_GROUP_cmp(a, b, ctx):
    return _pygmssl.EC_GROUP_cmp(a, b, ctx)
EC_GROUP_cmp = _pygmssl.EC_GROUP_cmp

def EC_GROUP_new_curve_GFp(p, a, b, ctx):
    return _pygmssl.EC_GROUP_new_curve_GFp(p, a, b, ctx)
EC_GROUP_new_curve_GFp = _pygmssl.EC_GROUP_new_curve_GFp

def EC_GROUP_new_curve_GF2m(p, a, b, ctx):
    return _pygmssl.EC_GROUP_new_curve_GF2m(p, a, b, ctx)
EC_GROUP_new_curve_GF2m = _pygmssl.EC_GROUP_new_curve_GF2m

def EC_GROUP_new_by_curve_name(nid):
    return _pygmssl.EC_GROUP_new_by_curve_name(nid)
EC_GROUP_new_by_curve_name = _pygmssl.EC_GROUP_new_by_curve_name

def EC_GROUP_new_from_ecparameters(params):
    return _pygmssl.EC_GROUP_new_from_ecparameters(params)
EC_GROUP_new_from_ecparameters = _pygmssl.EC_GROUP_new_from_ecparameters

def EC_GROUP_get_ecparameters(group, params):
    return _pygmssl.EC_GROUP_get_ecparameters(group, params)
EC_GROUP_get_ecparameters = _pygmssl.EC_GROUP_get_ecparameters

def EC_GROUP_new_from_ecpkparameters(params):
    return _pygmssl.EC_GROUP_new_from_ecpkparameters(params)
EC_GROUP_new_from_ecpkparameters = _pygmssl.EC_GROUP_new_from_ecpkparameters

def EC_GROUP_get_ecpkparameters(group, params):
    return _pygmssl.EC_GROUP_get_ecpkparameters(group, params)
EC_GROUP_get_ecpkparameters = _pygmssl.EC_GROUP_get_ecpkparameters

def EC_POINT_free(point):
    return _pygmssl.EC_POINT_free(point)
EC_POINT_free = _pygmssl.EC_POINT_free

def EC_POINT_clear_free(point):
    return _pygmssl.EC_POINT_clear_free(point)
EC_POINT_clear_free = _pygmssl.EC_POINT_clear_free

def EC_POINT_copy(dst, src):
    return _pygmssl.EC_POINT_copy(dst, src)
EC_POINT_copy = _pygmssl.EC_POINT_copy

def EC_POINT_dup(src, group):
    return _pygmssl.EC_POINT_dup(src, group)
EC_POINT_dup = _pygmssl.EC_POINT_dup

def EC_POINT_method_of(point):
    return _pygmssl.EC_POINT_method_of(point)
EC_POINT_method_of = _pygmssl.EC_POINT_method_of

def EC_POINT_set_to_infinity(group, point):
    return _pygmssl.EC_POINT_set_to_infinity(group, point)
EC_POINT_set_to_infinity = _pygmssl.EC_POINT_set_to_infinity

def EC_POINT_set_Jprojective_coordinates_GFp(group, p, x, y, z, ctx):
    return _pygmssl.EC_POINT_set_Jprojective_coordinates_GFp(group, p, x, y, z, ctx)
EC_POINT_set_Jprojective_coordinates_GFp = _pygmssl.EC_POINT_set_Jprojective_coordinates_GFp

def EC_POINT_get_Jprojective_coordinates_GFp(group, p, x, y, z, ctx):
    return _pygmssl.EC_POINT_get_Jprojective_coordinates_GFp(group, p, x, y, z, ctx)
EC_POINT_get_Jprojective_coordinates_GFp = _pygmssl.EC_POINT_get_Jprojective_coordinates_GFp

def EC_POINT_set_affine_coordinates_GFp(group, p, x, y, ctx):
    return _pygmssl.EC_POINT_set_affine_coordinates_GFp(group, p, x, y, ctx)
EC_POINT_set_affine_coordinates_GFp = _pygmssl.EC_POINT_set_affine_coordinates_GFp

def EC_POINT_get_affine_coordinates_GFp(group, p, x, y, ctx):
    return _pygmssl.EC_POINT_get_affine_coordinates_GFp(group, p, x, y, ctx)
EC_POINT_get_affine_coordinates_GFp = _pygmssl.EC_POINT_get_affine_coordinates_GFp

def EC_POINT_set_compressed_coordinates_GFp(group, p, x, y_bit, ctx):
    return _pygmssl.EC_POINT_set_compressed_coordinates_GFp(group, p, x, y_bit, ctx)
EC_POINT_set_compressed_coordinates_GFp = _pygmssl.EC_POINT_set_compressed_coordinates_GFp

def EC_POINT_set_affine_coordinates_GF2m(group, p, x, y, ctx):
    return _pygmssl.EC_POINT_set_affine_coordinates_GF2m(group, p, x, y, ctx)
EC_POINT_set_affine_coordinates_GF2m = _pygmssl.EC_POINT_set_affine_coordinates_GF2m

def EC_POINT_get_affine_coordinates_GF2m(group, p, x, y, ctx):
    return _pygmssl.EC_POINT_get_affine_coordinates_GF2m(group, p, x, y, ctx)
EC_POINT_get_affine_coordinates_GF2m = _pygmssl.EC_POINT_get_affine_coordinates_GF2m

def EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx):
    return _pygmssl.EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx)
EC_POINT_set_compressed_coordinates_GF2m = _pygmssl.EC_POINT_set_compressed_coordinates_GF2m

def EC_POINT_point2oct(group, p, form, buf, len, ctx):
    return _pygmssl.EC_POINT_point2oct(group, p, form, buf, len, ctx)
EC_POINT_point2oct = _pygmssl.EC_POINT_point2oct

def EC_POINT_oct2point(group, p, buf, len, ctx):
    return _pygmssl.EC_POINT_oct2point(group, p, buf, len, ctx)
EC_POINT_oct2point = _pygmssl.EC_POINT_oct2point

def EC_POINT_point2buf(group, point, form, pbuf, ctx):
    return _pygmssl.EC_POINT_point2buf(group, point, form, pbuf, ctx)
EC_POINT_point2buf = _pygmssl.EC_POINT_point2buf

def EC_POINT_point2bn(arg1, arg2, form, arg4, arg5):
    return _pygmssl.EC_POINT_point2bn(arg1, arg2, form, arg4, arg5)
EC_POINT_point2bn = _pygmssl.EC_POINT_point2bn

def EC_POINT_bn2point(arg1, arg2, arg3, arg4):
    return _pygmssl.EC_POINT_bn2point(arg1, arg2, arg3, arg4)
EC_POINT_bn2point = _pygmssl.EC_POINT_bn2point

def EC_POINT_point2hex(arg1, arg2, form, arg4):
    return _pygmssl.EC_POINT_point2hex(arg1, arg2, form, arg4)
EC_POINT_point2hex = _pygmssl.EC_POINT_point2hex

def EC_POINT_hex2point(arg1, arg2, arg3, arg4):
    return _pygmssl.EC_POINT_hex2point(arg1, arg2, arg3, arg4)
EC_POINT_hex2point = _pygmssl.EC_POINT_hex2point

def EC_POINT_add(group, r, a, b, ctx):
    return _pygmssl.EC_POINT_add(group, r, a, b, ctx)
EC_POINT_add = _pygmssl.EC_POINT_add

def EC_POINT_dbl(group, r, a, ctx):
    return _pygmssl.EC_POINT_dbl(group, r, a, ctx)
EC_POINT_dbl = _pygmssl.EC_POINT_dbl

def EC_POINT_invert(group, a, ctx):
    return _pygmssl.EC_POINT_invert(group, a, ctx)
EC_POINT_invert = _pygmssl.EC_POINT_invert

def EC_POINT_is_at_infinity(group, p):
    return _pygmssl.EC_POINT_is_at_infinity(group, p)
EC_POINT_is_at_infinity = _pygmssl.EC_POINT_is_at_infinity

def EC_POINT_is_on_curve(group, point, ctx):
    return _pygmssl.EC_POINT_is_on_curve(group, point, ctx)
EC_POINT_is_on_curve = _pygmssl.EC_POINT_is_on_curve

def EC_POINT_cmp(group, a, b, ctx):
    return _pygmssl.EC_POINT_cmp(group, a, b, ctx)
EC_POINT_cmp = _pygmssl.EC_POINT_cmp

def EC_POINT_make_affine(group, point, ctx):
    return _pygmssl.EC_POINT_make_affine(group, point, ctx)
EC_POINT_make_affine = _pygmssl.EC_POINT_make_affine

def EC_POINTs_make_affine(group, num, points, ctx):
    return _pygmssl.EC_POINTs_make_affine(group, num, points, ctx)
EC_POINTs_make_affine = _pygmssl.EC_POINTs_make_affine

def EC_POINTs_mul(group, r, n, num, p, m, ctx):
    return _pygmssl.EC_POINTs_mul(group, r, n, num, p, m, ctx)
EC_POINTs_mul = _pygmssl.EC_POINTs_mul

def EC_POINT_mul(group, r, n, q, m, ctx):
    return _pygmssl.EC_POINT_mul(group, r, n, q, m, ctx)
EC_POINT_mul = _pygmssl.EC_POINT_mul

def EC_GROUP_precompute_mult(group, ctx):
    return _pygmssl.EC_GROUP_precompute_mult(group, ctx)
EC_GROUP_precompute_mult = _pygmssl.EC_GROUP_precompute_mult

def EC_GROUP_have_precompute_mult(group):
    return _pygmssl.EC_GROUP_have_precompute_mult(group)
EC_GROUP_have_precompute_mult = _pygmssl.EC_GROUP_have_precompute_mult

def EC_GROUP_get_basis_type(arg1):
    return _pygmssl.EC_GROUP_get_basis_type(arg1)
EC_GROUP_get_basis_type = _pygmssl.EC_GROUP_get_basis_type

def EC_GROUP_get_trinomial_basis(arg1, k):
    return _pygmssl.EC_GROUP_get_trinomial_basis(arg1, k)
EC_GROUP_get_trinomial_basis = _pygmssl.EC_GROUP_get_trinomial_basis

def EC_GROUP_get_pentanomial_basis(arg1, k1, k2, k3):
    return _pygmssl.EC_GROUP_get_pentanomial_basis(arg1, k1, k2, k3)
EC_GROUP_get_pentanomial_basis = _pygmssl.EC_GROUP_get_pentanomial_basis

def d2i_ECPKParameters(arg1, arg2, len):
    return _pygmssl.d2i_ECPKParameters(arg1, arg2, len)
d2i_ECPKParameters = _pygmssl.d2i_ECPKParameters

def i2d_ECPKParameters(arg1, out):
    return _pygmssl.i2d_ECPKParameters(arg1, out)
i2d_ECPKParameters = _pygmssl.i2d_ECPKParameters

def ECPKParameters_print(bp, x, off):
    return _pygmssl.ECPKParameters_print(bp, x, off)
ECPKParameters_print = _pygmssl.ECPKParameters_print

def EC_KEY_new():
    return _pygmssl.EC_KEY_new()
EC_KEY_new = _pygmssl.EC_KEY_new

def EC_KEY_get_flags(key):
    return _pygmssl.EC_KEY_get_flags(key)
EC_KEY_get_flags = _pygmssl.EC_KEY_get_flags

def EC_KEY_set_flags(key, flags):
    return _pygmssl.EC_KEY_set_flags(key, flags)
EC_KEY_set_flags = _pygmssl.EC_KEY_set_flags

def EC_KEY_clear_flags(key, flags):
    return _pygmssl.EC_KEY_clear_flags(key, flags)
EC_KEY_clear_flags = _pygmssl.EC_KEY_clear_flags

def EC_KEY_new_by_curve_name(nid):
    return _pygmssl.EC_KEY_new_by_curve_name(nid)
EC_KEY_new_by_curve_name = _pygmssl.EC_KEY_new_by_curve_name

def EC_KEY_free(key):
    return _pygmssl.EC_KEY_free(key)
EC_KEY_free = _pygmssl.EC_KEY_free

def EC_KEY_copy(dst, src):
    return _pygmssl.EC_KEY_copy(dst, src)
EC_KEY_copy = _pygmssl.EC_KEY_copy

def EC_KEY_dup(src):
    return _pygmssl.EC_KEY_dup(src)
EC_KEY_dup = _pygmssl.EC_KEY_dup

def EC_KEY_up_ref(key):
    return _pygmssl.EC_KEY_up_ref(key)
EC_KEY_up_ref = _pygmssl.EC_KEY_up_ref

def EC_KEY_get0_group(key):
    return _pygmssl.EC_KEY_get0_group(key)
EC_KEY_get0_group = _pygmssl.EC_KEY_get0_group

def EC_KEY_set_group(key, group):
    return _pygmssl.EC_KEY_set_group(key, group)
EC_KEY_set_group = _pygmssl.EC_KEY_set_group

def EC_KEY_get0_private_key(key):
    return _pygmssl.EC_KEY_get0_private_key(key)
EC_KEY_get0_private_key = _pygmssl.EC_KEY_get0_private_key

def EC_KEY_set_private_key(key, prv):
    return _pygmssl.EC_KEY_set_private_key(key, prv)
EC_KEY_set_private_key = _pygmssl.EC_KEY_set_private_key

def EC_KEY_get0_public_key(key):
    return _pygmssl.EC_KEY_get0_public_key(key)
EC_KEY_get0_public_key = _pygmssl.EC_KEY_get0_public_key

def EC_KEY_set_public_key(key, pub):
    return _pygmssl.EC_KEY_set_public_key(key, pub)
EC_KEY_set_public_key = _pygmssl.EC_KEY_set_public_key

def EC_KEY_get_enc_flags(key):
    return _pygmssl.EC_KEY_get_enc_flags(key)
EC_KEY_get_enc_flags = _pygmssl.EC_KEY_get_enc_flags

def EC_KEY_set_enc_flags(eckey, flags):
    return _pygmssl.EC_KEY_set_enc_flags(eckey, flags)
EC_KEY_set_enc_flags = _pygmssl.EC_KEY_set_enc_flags

def EC_KEY_get_conv_form(key):
    return _pygmssl.EC_KEY_get_conv_form(key)
EC_KEY_get_conv_form = _pygmssl.EC_KEY_get_conv_form

def EC_KEY_set_conv_form(eckey, cform):
    return _pygmssl.EC_KEY_set_conv_form(eckey, cform)
EC_KEY_set_conv_form = _pygmssl.EC_KEY_set_conv_form

def EC_KEY_set_ex_data(key, idx, arg):
    return _pygmssl.EC_KEY_set_ex_data(key, idx, arg)
EC_KEY_set_ex_data = _pygmssl.EC_KEY_set_ex_data

def EC_KEY_get_ex_data(key, idx):
    return _pygmssl.EC_KEY_get_ex_data(key, idx)
EC_KEY_get_ex_data = _pygmssl.EC_KEY_get_ex_data

def EC_KEY_set_asn1_flag(eckey, asn1_flag):
    return _pygmssl.EC_KEY_set_asn1_flag(eckey, asn1_flag)
EC_KEY_set_asn1_flag = _pygmssl.EC_KEY_set_asn1_flag

def EC_KEY_precompute_mult(key, ctx):
    return _pygmssl.EC_KEY_precompute_mult(key, ctx)
EC_KEY_precompute_mult = _pygmssl.EC_KEY_precompute_mult

def EC_KEY_generate_key(key):
    return _pygmssl.EC_KEY_generate_key(key)
EC_KEY_generate_key = _pygmssl.EC_KEY_generate_key

def EC_KEY_check_key(key):
    return _pygmssl.EC_KEY_check_key(key)
EC_KEY_check_key = _pygmssl.EC_KEY_check_key

def EC_KEY_can_sign(eckey):
    return _pygmssl.EC_KEY_can_sign(eckey)
EC_KEY_can_sign = _pygmssl.EC_KEY_can_sign

def EC_KEY_set_public_key_affine_coordinates(key, x, y):
    return _pygmssl.EC_KEY_set_public_key_affine_coordinates(key, x, y)
EC_KEY_set_public_key_affine_coordinates = _pygmssl.EC_KEY_set_public_key_affine_coordinates

def EC_KEY_key2buf(key, form, pbuf, ctx):
    return _pygmssl.EC_KEY_key2buf(key, form, pbuf, ctx)
EC_KEY_key2buf = _pygmssl.EC_KEY_key2buf

def EC_KEY_oct2key(key, buf, len, ctx):
    return _pygmssl.EC_KEY_oct2key(key, buf, len, ctx)
EC_KEY_oct2key = _pygmssl.EC_KEY_oct2key

def EC_KEY_oct2priv(key, buf, len):
    return _pygmssl.EC_KEY_oct2priv(key, buf, len)
EC_KEY_oct2priv = _pygmssl.EC_KEY_oct2priv

def EC_KEY_priv2oct(key, buf, len):
    return _pygmssl.EC_KEY_priv2oct(key, buf, len)
EC_KEY_priv2oct = _pygmssl.EC_KEY_priv2oct

def EC_KEY_priv2buf(eckey, pbuf):
    return _pygmssl.EC_KEY_priv2buf(eckey, pbuf)
EC_KEY_priv2buf = _pygmssl.EC_KEY_priv2buf

def d2i_ECPrivateKey(key, arg2, len):
    return _pygmssl.d2i_ECPrivateKey(key, arg2, len)
d2i_ECPrivateKey = _pygmssl.d2i_ECPrivateKey

def i2d_ECPrivateKey(key, out):
    return _pygmssl.i2d_ECPrivateKey(key, out)
i2d_ECPrivateKey = _pygmssl.i2d_ECPrivateKey

def d2i_ECParameters(key, arg2, len):
    return _pygmssl.d2i_ECParameters(key, arg2, len)
d2i_ECParameters = _pygmssl.d2i_ECParameters

def i2d_ECParameters(key, out):
    return _pygmssl.i2d_ECParameters(key, out)
i2d_ECParameters = _pygmssl.i2d_ECParameters

def o2i_ECPublicKey(key, arg2, len):
    return _pygmssl.o2i_ECPublicKey(key, arg2, len)
o2i_ECPublicKey = _pygmssl.o2i_ECPublicKey

def i2o_ECPublicKey(key, out):
    return _pygmssl.i2o_ECPublicKey(key, out)
i2o_ECPublicKey = _pygmssl.i2o_ECPublicKey

def ECParameters_print(bp, key):
    return _pygmssl.ECParameters_print(bp, key)
ECParameters_print = _pygmssl.ECParameters_print

def EC_KEY_print(bp, key, off):
    return _pygmssl.EC_KEY_print(bp, key, off)
EC_KEY_print = _pygmssl.EC_KEY_print

def EC_KEY_OpenSSL():
    return _pygmssl.EC_KEY_OpenSSL()
EC_KEY_OpenSSL = _pygmssl.EC_KEY_OpenSSL

def EC_KEY_get_default_method():
    return _pygmssl.EC_KEY_get_default_method()
EC_KEY_get_default_method = _pygmssl.EC_KEY_get_default_method

def EC_KEY_set_default_method(meth):
    return _pygmssl.EC_KEY_set_default_method(meth)
EC_KEY_set_default_method = _pygmssl.EC_KEY_set_default_method

def EC_KEY_get_method(key):
    return _pygmssl.EC_KEY_get_method(key)
EC_KEY_get_method = _pygmssl.EC_KEY_get_method

def EC_KEY_set_method(key, meth):
    return _pygmssl.EC_KEY_set_method(key, meth)
EC_KEY_set_method = _pygmssl.EC_KEY_set_method

def EC_KEY_new_method(engine):
    return _pygmssl.EC_KEY_new_method(engine)
EC_KEY_new_method = _pygmssl.EC_KEY_new_method

def ECDH_KDF_X9_62(out, outlen, Z, Zlen, sinfo, sinfolen, md):
    return _pygmssl.ECDH_KDF_X9_62(out, outlen, Z, Zlen, sinfo, sinfolen, md)
ECDH_KDF_X9_62 = _pygmssl.ECDH_KDF_X9_62

def ECDSA_SIG_new():
    return _pygmssl.ECDSA_SIG_new()
ECDSA_SIG_new = _pygmssl.ECDSA_SIG_new

def ECDSA_SIG_free(sig):
    return _pygmssl.ECDSA_SIG_free(sig)
ECDSA_SIG_free = _pygmssl.ECDSA_SIG_free

def i2d_ECDSA_SIG(sig, pp):
    return _pygmssl.i2d_ECDSA_SIG(sig, pp)
i2d_ECDSA_SIG = _pygmssl.i2d_ECDSA_SIG

def d2i_ECDSA_SIG(sig, pp, len):
    return _pygmssl.d2i_ECDSA_SIG(sig, pp, len)
d2i_ECDSA_SIG = _pygmssl.d2i_ECDSA_SIG

def ECDSA_SIG_get0(sig, pr, ps):
    return _pygmssl.ECDSA_SIG_get0(sig, pr, ps)
ECDSA_SIG_get0 = _pygmssl.ECDSA_SIG_get0

def ECDSA_SIG_set0(sig, r, s):
    return _pygmssl.ECDSA_SIG_set0(sig, r, s)
ECDSA_SIG_set0 = _pygmssl.ECDSA_SIG_set0

def ECDSA_do_sign(dgst, dgst_len, eckey):
    return _pygmssl.ECDSA_do_sign(dgst, dgst_len, eckey)
ECDSA_do_sign = _pygmssl.ECDSA_do_sign

def ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey):
    return _pygmssl.ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey)
ECDSA_do_sign_ex = _pygmssl.ECDSA_do_sign_ex

def ECDSA_do_verify(dgst, dgst_len, sig, eckey):
    return _pygmssl.ECDSA_do_verify(dgst, dgst_len, sig, eckey)
ECDSA_do_verify = _pygmssl.ECDSA_do_verify

def ECDSA_sign_setup(eckey, ctx, kinv, rp):
    return _pygmssl.ECDSA_sign_setup(eckey, ctx, kinv, rp)
ECDSA_sign_setup = _pygmssl.ECDSA_sign_setup

def ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey):
    return _pygmssl.ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey)
ECDSA_sign = _pygmssl.ECDSA_sign

def ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey):
    return _pygmssl.ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey)
ECDSA_sign_ex = _pygmssl.ECDSA_sign_ex

def ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey):
    return _pygmssl.ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey)
ECDSA_verify = _pygmssl.ECDSA_verify

def ECDSA_size(eckey):
    return _pygmssl.ECDSA_size(eckey)
ECDSA_size = _pygmssl.ECDSA_size

def EC_KEY_METHOD_new(meth):
    return _pygmssl.EC_KEY_METHOD_new(meth)
EC_KEY_METHOD_new = _pygmssl.EC_KEY_METHOD_new

def EC_KEY_METHOD_free(meth):
    return _pygmssl.EC_KEY_METHOD_free(meth)
EC_KEY_METHOD_free = _pygmssl.EC_KEY_METHOD_free

def ERR_load_EC_strings():
    return _pygmssl.ERR_load_EC_strings()
ERR_load_EC_strings = _pygmssl.ERR_load_EC_strings

def AES_options():
    return _pygmssl.AES_options()
AES_options = _pygmssl.AES_options

def AES_set_encrypt_key(userKey, bits, key):
    return _pygmssl.AES_set_encrypt_key(userKey, bits, key)
AES_set_encrypt_key = _pygmssl.AES_set_encrypt_key

def AES_set_decrypt_key(userKey, bits, key):
    return _pygmssl.AES_set_decrypt_key(userKey, bits, key)
AES_set_decrypt_key = _pygmssl.AES_set_decrypt_key

def AES_encrypt(arg1, out, key):
    return _pygmssl.AES_encrypt(arg1, out, key)
AES_encrypt = _pygmssl.AES_encrypt

def AES_decrypt(arg1, out, key):
    return _pygmssl.AES_decrypt(arg1, out, key)
AES_decrypt = _pygmssl.AES_decrypt

def AES_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.AES_ecb_encrypt(arg1, out, key, enc)
AES_ecb_encrypt = _pygmssl.AES_ecb_encrypt

def AES_cbc_encrypt(arg1, out, length, key, ivec, enc):
    return _pygmssl.AES_cbc_encrypt(arg1, out, length, key, ivec, enc)
AES_cbc_encrypt = _pygmssl.AES_cbc_encrypt

def AES_cfb128_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.AES_cfb128_encrypt(arg1, out, length, key, ivec, num, enc)
AES_cfb128_encrypt = _pygmssl.AES_cfb128_encrypt

def AES_cfb1_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.AES_cfb1_encrypt(arg1, out, length, key, ivec, num, enc)
AES_cfb1_encrypt = _pygmssl.AES_cfb1_encrypt

def AES_cfb8_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.AES_cfb8_encrypt(arg1, out, length, key, ivec, num, enc)
AES_cfb8_encrypt = _pygmssl.AES_cfb8_encrypt

def AES_ofb128_encrypt(arg1, out, length, key, ivec, num):
    return _pygmssl.AES_ofb128_encrypt(arg1, out, length, key, ivec, num)
AES_ofb128_encrypt = _pygmssl.AES_ofb128_encrypt

def AES_ige_encrypt(arg1, out, length, key, ivec, enc):
    return _pygmssl.AES_ige_encrypt(arg1, out, length, key, ivec, enc)
AES_ige_encrypt = _pygmssl.AES_ige_encrypt

def AES_bi_ige_encrypt(arg1, out, length, key, key2, ivec, enc):
    return _pygmssl.AES_bi_ige_encrypt(arg1, out, length, key, key2, ivec, enc)
AES_bi_ige_encrypt = _pygmssl.AES_bi_ige_encrypt

def AES_wrap_key(key, iv, out, arg4, inlen):
    return _pygmssl.AES_wrap_key(key, iv, out, arg4, inlen)
AES_wrap_key = _pygmssl.AES_wrap_key

def AES_unwrap_key(key, iv, out, arg4, inlen):
    return _pygmssl.AES_unwrap_key(key, iv, out, arg4, inlen)
AES_unwrap_key = _pygmssl.AES_unwrap_key

def BB1IBE_setup(group, md, mpk, msk):
    return _pygmssl.BB1IBE_setup(group, md, mpk, msk)
BB1IBE_setup = _pygmssl.BB1IBE_setup

def BB1IBE_extract_private_key(mpk, msk, id, idlen):
    return _pygmssl.BB1IBE_extract_private_key(mpk, msk, id, idlen)
BB1IBE_extract_private_key = _pygmssl.BB1IBE_extract_private_key

def BB1IBE_do_encrypt(mpk, arg2, inlen, id, idlen):
    return _pygmssl.BB1IBE_do_encrypt(mpk, arg2, inlen, id, idlen)
BB1IBE_do_encrypt = _pygmssl.BB1IBE_do_encrypt

def BB1IBE_do_decrypt(mpk, arg2, out, outlen, sk):
    return _pygmssl.BB1IBE_do_decrypt(mpk, arg2, out, outlen, sk)
BB1IBE_do_decrypt = _pygmssl.BB1IBE_do_decrypt

def BB1IBE_encrypt(mpk, arg2, inlen, out, outlen, id, idlen):
    return _pygmssl.BB1IBE_encrypt(mpk, arg2, inlen, out, outlen, id, idlen)
BB1IBE_encrypt = _pygmssl.BB1IBE_encrypt

def BB1IBE_decrypt(mpk, arg2, inlen, out, outlen, sk):
    return _pygmssl.BB1IBE_decrypt(mpk, arg2, inlen, out, outlen, sk)
BB1IBE_decrypt = _pygmssl.BB1IBE_decrypt

def ERR_load_BB1IBE_strings():
    return _pygmssl.ERR_load_BB1IBE_strings()
ERR_load_BB1IBE_strings = _pygmssl.ERR_load_BB1IBE_strings

def BFIBE_setup(group, md, mpk, msk):
    return _pygmssl.BFIBE_setup(group, md, mpk, msk)
BFIBE_setup = _pygmssl.BFIBE_setup

def BFIBE_extract_private_key(mpk, msk, id, idlen):
    return _pygmssl.BFIBE_extract_private_key(mpk, msk, id, idlen)
BFIBE_extract_private_key = _pygmssl.BFIBE_extract_private_key

def BFIBE_do_encrypt(mpk, arg2, inlen, id, idlen):
    return _pygmssl.BFIBE_do_encrypt(mpk, arg2, inlen, id, idlen)
BFIBE_do_encrypt = _pygmssl.BFIBE_do_encrypt

def BFIBE_do_decrypt(mpk, arg2, out, outlen, sk):
    return _pygmssl.BFIBE_do_decrypt(mpk, arg2, out, outlen, sk)
BFIBE_do_decrypt = _pygmssl.BFIBE_do_decrypt

def BFIBE_encrypt(mpk, arg2, inlen, out, outlen, id, idlen):
    return _pygmssl.BFIBE_encrypt(mpk, arg2, inlen, out, outlen, id, idlen)
BFIBE_encrypt = _pygmssl.BFIBE_encrypt

def BFIBE_decrypt(mpk, arg2, inlen, out, outlen, sk):
    return _pygmssl.BFIBE_decrypt(mpk, arg2, inlen, out, outlen, sk)
BFIBE_decrypt = _pygmssl.BFIBE_decrypt

def ERR_load_BFIBE_strings():
    return _pygmssl.ERR_load_BFIBE_strings()
ERR_load_BFIBE_strings = _pygmssl.ERR_load_BFIBE_strings

def BF_set_key(key, len, data):
    return _pygmssl.BF_set_key(key, len, data)
BF_set_key = _pygmssl.BF_set_key

def BF_encrypt(data, key):
    return _pygmssl.BF_encrypt(data, key)
BF_encrypt = _pygmssl.BF_encrypt

def BF_decrypt(data, key):
    return _pygmssl.BF_decrypt(data, key)
BF_decrypt = _pygmssl.BF_decrypt

def BF_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.BF_ecb_encrypt(arg1, out, key, enc)
BF_ecb_encrypt = _pygmssl.BF_ecb_encrypt

def BF_cbc_encrypt(arg1, out, length, schedule, ivec, enc):
    return _pygmssl.BF_cbc_encrypt(arg1, out, length, schedule, ivec, enc)
BF_cbc_encrypt = _pygmssl.BF_cbc_encrypt

def BF_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc):
    return _pygmssl.BF_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc)
BF_cfb64_encrypt = _pygmssl.BF_cfb64_encrypt

def BF_ofb64_encrypt(arg1, out, length, schedule, ivec, num):
    return _pygmssl.BF_ofb64_encrypt(arg1, out, length, schedule, ivec, num)
BF_ofb64_encrypt = _pygmssl.BF_ofb64_encrypt

def BF_options():
    return _pygmssl.BF_options()
BF_options = _pygmssl.BF_options

def Camellia_set_key(userKey, bits, key):
    return _pygmssl.Camellia_set_key(userKey, bits, key)
Camellia_set_key = _pygmssl.Camellia_set_key

def Camellia_encrypt(arg1, out, key):
    return _pygmssl.Camellia_encrypt(arg1, out, key)
Camellia_encrypt = _pygmssl.Camellia_encrypt

def Camellia_decrypt(arg1, out, key):
    return _pygmssl.Camellia_decrypt(arg1, out, key)
Camellia_decrypt = _pygmssl.Camellia_decrypt

def Camellia_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.Camellia_ecb_encrypt(arg1, out, key, enc)
Camellia_ecb_encrypt = _pygmssl.Camellia_ecb_encrypt

def Camellia_cbc_encrypt(arg1, out, length, key, ivec, enc):
    return _pygmssl.Camellia_cbc_encrypt(arg1, out, length, key, ivec, enc)
Camellia_cbc_encrypt = _pygmssl.Camellia_cbc_encrypt

def Camellia_cfb128_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.Camellia_cfb128_encrypt(arg1, out, length, key, ivec, num, enc)
Camellia_cfb128_encrypt = _pygmssl.Camellia_cfb128_encrypt

def Camellia_cfb1_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.Camellia_cfb1_encrypt(arg1, out, length, key, ivec, num, enc)
Camellia_cfb1_encrypt = _pygmssl.Camellia_cfb1_encrypt

def Camellia_cfb8_encrypt(arg1, out, length, key, ivec, num, enc):
    return _pygmssl.Camellia_cfb8_encrypt(arg1, out, length, key, ivec, num, enc)
Camellia_cfb8_encrypt = _pygmssl.Camellia_cfb8_encrypt

def Camellia_ofb128_encrypt(arg1, out, length, key, ivec, num):
    return _pygmssl.Camellia_ofb128_encrypt(arg1, out, length, key, ivec, num)
Camellia_ofb128_encrypt = _pygmssl.Camellia_ofb128_encrypt

def Camellia_ctr128_encrypt(arg1, out, length, key, ivec, ecount_buf, num):
    return _pygmssl.Camellia_ctr128_encrypt(arg1, out, length, key, ivec, ecount_buf, num)
Camellia_ctr128_encrypt = _pygmssl.Camellia_ctr128_encrypt

def CAST_set_key(key, len, data):
    return _pygmssl.CAST_set_key(key, len, data)
CAST_set_key = _pygmssl.CAST_set_key

def CAST_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.CAST_ecb_encrypt(arg1, out, key, enc)
CAST_ecb_encrypt = _pygmssl.CAST_ecb_encrypt

def CAST_encrypt(data, key):
    return _pygmssl.CAST_encrypt(data, key)
CAST_encrypt = _pygmssl.CAST_encrypt

def CAST_decrypt(data, key):
    return _pygmssl.CAST_decrypt(data, key)
CAST_decrypt = _pygmssl.CAST_decrypt

def CAST_cbc_encrypt(arg1, out, length, ks, iv, enc):
    return _pygmssl.CAST_cbc_encrypt(arg1, out, length, ks, iv, enc)
CAST_cbc_encrypt = _pygmssl.CAST_cbc_encrypt

def CAST_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc):
    return _pygmssl.CAST_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc)
CAST_cfb64_encrypt = _pygmssl.CAST_cfb64_encrypt

def CAST_ofb64_encrypt(arg1, out, length, schedule, ivec, num):
    return _pygmssl.CAST_ofb64_encrypt(arg1, out, length, schedule, ivec, num)
CAST_ofb64_encrypt = _pygmssl.CAST_ofb64_encrypt

def CMAC_CTX_new():
    return _pygmssl.CMAC_CTX_new()
CMAC_CTX_new = _pygmssl.CMAC_CTX_new

def CMAC_CTX_cleanup(ctx):
    return _pygmssl.CMAC_CTX_cleanup(ctx)
CMAC_CTX_cleanup = _pygmssl.CMAC_CTX_cleanup

def CMAC_CTX_free(ctx):
    return _pygmssl.CMAC_CTX_free(ctx)
CMAC_CTX_free = _pygmssl.CMAC_CTX_free

def CMAC_CTX_get0_cipher_ctx(ctx):
    return _pygmssl.CMAC_CTX_get0_cipher_ctx(ctx)
CMAC_CTX_get0_cipher_ctx = _pygmssl.CMAC_CTX_get0_cipher_ctx

def CMAC_CTX_copy(out, arg2):
    return _pygmssl.CMAC_CTX_copy(out, arg2)
CMAC_CTX_copy = _pygmssl.CMAC_CTX_copy

def CMAC_Init(ctx, key, keylen, cipher, impl):
    return _pygmssl.CMAC_Init(ctx, key, keylen, cipher, impl)
CMAC_Init = _pygmssl.CMAC_Init

def CMAC_Update(ctx, data, dlen):
    return _pygmssl.CMAC_Update(ctx, data, dlen)
CMAC_Update = _pygmssl.CMAC_Update

def CMAC_Final(ctx, out, poutlen):
    return _pygmssl.CMAC_Final(ctx, out, poutlen)
CMAC_Final = _pygmssl.CMAC_Final

def CMAC_resume(ctx):
    return _pygmssl.CMAC_resume(ctx)
CMAC_resume = _pygmssl.CMAC_resume

def CPK_MAP_new_default():
    return _pygmssl.CPK_MAP_new_default()
CPK_MAP_new_default = _pygmssl.CPK_MAP_new_default

def CPK_MAP_is_valid(algor):
    return _pygmssl.CPK_MAP_is_valid(algor)
CPK_MAP_is_valid = _pygmssl.CPK_MAP_is_valid

def CPK_MAP_num_factors(algor):
    return _pygmssl.CPK_MAP_num_factors(algor)
CPK_MAP_num_factors = _pygmssl.CPK_MAP_num_factors

def CPK_MAP_num_indexes(algor):
    return _pygmssl.CPK_MAP_num_indexes(algor)
CPK_MAP_num_indexes = _pygmssl.CPK_MAP_num_indexes

def CPK_MAP_str2index(algor, str, index):
    return _pygmssl.CPK_MAP_str2index(algor, str, index)
CPK_MAP_str2index = _pygmssl.CPK_MAP_str2index

def CPK_MASTER_SECRET_create(domain_id, pkey, map_algor):
    return _pygmssl.CPK_MASTER_SECRET_create(domain_id, pkey, map_algor)
CPK_MASTER_SECRET_create = _pygmssl.CPK_MASTER_SECRET_create

def CPK_MASTER_SECRET_extract_public_params(master):
    return _pygmssl.CPK_MASTER_SECRET_extract_public_params(master)
CPK_MASTER_SECRET_extract_public_params = _pygmssl.CPK_MASTER_SECRET_extract_public_params

def CPK_MASTER_SECRET_extract_private_key(master, id):
    return _pygmssl.CPK_MASTER_SECRET_extract_private_key(master, id)
CPK_MASTER_SECRET_extract_private_key = _pygmssl.CPK_MASTER_SECRET_extract_private_key

def CPK_PUBLIC_PARAMS_extract_public_key(params, id):
    return _pygmssl.CPK_PUBLIC_PARAMS_extract_public_key(params, id)
CPK_PUBLIC_PARAMS_extract_public_key = _pygmssl.CPK_PUBLIC_PARAMS_extract_public_key

def CPK_MASTER_SECRET_get_name(master, buf, size):
    return _pygmssl.CPK_MASTER_SECRET_get_name(master, buf, size)
CPK_MASTER_SECRET_get_name = _pygmssl.CPK_MASTER_SECRET_get_name

def CPK_PUBLIC_PARAMS_get_name(params, buf, size):
    return _pygmssl.CPK_PUBLIC_PARAMS_get_name(params, buf, size)
CPK_PUBLIC_PARAMS_get_name = _pygmssl.CPK_PUBLIC_PARAMS_get_name

def CPK_MASTER_SECRET_digest(master, type, md, len):
    return _pygmssl.CPK_MASTER_SECRET_digest(master, type, md, len)
CPK_MASTER_SECRET_digest = _pygmssl.CPK_MASTER_SECRET_digest

def CPK_PUBLIC_PARAMS_digest(params, type, md, len):
    return _pygmssl.CPK_PUBLIC_PARAMS_digest(params, type, md, len)
CPK_PUBLIC_PARAMS_digest = _pygmssl.CPK_PUBLIC_PARAMS_digest

def CPK_MASTER_SECRET_print(out, master, indent, flags):
    return _pygmssl.CPK_MASTER_SECRET_print(out, master, indent, flags)
CPK_MASTER_SECRET_print = _pygmssl.CPK_MASTER_SECRET_print

def CPK_PUBLIC_PARAMS_print(out, params, indent, flags):
    return _pygmssl.CPK_PUBLIC_PARAMS_print(out, params, indent, flags)
CPK_PUBLIC_PARAMS_print = _pygmssl.CPK_PUBLIC_PARAMS_print

def CPK_MASTER_SECRET_validate_public_params(master, params):
    return _pygmssl.CPK_MASTER_SECRET_validate_public_params(master, params)
CPK_MASTER_SECRET_validate_public_params = _pygmssl.CPK_MASTER_SECRET_validate_public_params

def CPK_PUBLIC_PARAMS_validate_private_key(params, id, pkey):
    return _pygmssl.CPK_PUBLIC_PARAMS_validate_private_key(params, id, pkey)
CPK_PUBLIC_PARAMS_validate_private_key = _pygmssl.CPK_PUBLIC_PARAMS_validate_private_key

def d2i_CPK_MASTER_SECRET_bio(bp, master):
    return _pygmssl.d2i_CPK_MASTER_SECRET_bio(bp, master)
d2i_CPK_MASTER_SECRET_bio = _pygmssl.d2i_CPK_MASTER_SECRET_bio

def i2d_CPK_MASTER_SECRET_bio(bp, master):
    return _pygmssl.i2d_CPK_MASTER_SECRET_bio(bp, master)
i2d_CPK_MASTER_SECRET_bio = _pygmssl.i2d_CPK_MASTER_SECRET_bio

def d2i_CPK_PUBLIC_PARAMS_bio(bp, params):
    return _pygmssl.d2i_CPK_PUBLIC_PARAMS_bio(bp, params)
d2i_CPK_PUBLIC_PARAMS_bio = _pygmssl.d2i_CPK_PUBLIC_PARAMS_bio

def i2d_CPK_PUBLIC_PARAMS_bio(bp, params):
    return _pygmssl.i2d_CPK_PUBLIC_PARAMS_bio(bp, params)
i2d_CPK_PUBLIC_PARAMS_bio = _pygmssl.i2d_CPK_PUBLIC_PARAMS_bio

def ERR_load_CPK_strings():
    return _pygmssl.ERR_load_CPK_strings()
ERR_load_CPK_strings = _pygmssl.ERR_load_CPK_strings

def DES_options():
    return _pygmssl.DES_options()
DES_options = _pygmssl.DES_options

def DES_ecb3_encrypt(input, output, ks1, ks2, ks3, enc):
    return _pygmssl.DES_ecb3_encrypt(input, output, ks1, ks2, ks3, enc)
DES_ecb3_encrypt = _pygmssl.DES_ecb3_encrypt

def DES_cbc_cksum(input, output, length, schedule, ivec):
    return _pygmssl.DES_cbc_cksum(input, output, length, schedule, ivec)
DES_cbc_cksum = _pygmssl.DES_cbc_cksum

def DES_cbc_encrypt(input, output, length, schedule, ivec, enc):
    return _pygmssl.DES_cbc_encrypt(input, output, length, schedule, ivec, enc)
DES_cbc_encrypt = _pygmssl.DES_cbc_encrypt

def DES_ncbc_encrypt(input, output, length, schedule, ivec, enc):
    return _pygmssl.DES_ncbc_encrypt(input, output, length, schedule, ivec, enc)
DES_ncbc_encrypt = _pygmssl.DES_ncbc_encrypt

def DES_xcbc_encrypt(input, output, length, schedule, ivec, inw, outw, enc):
    return _pygmssl.DES_xcbc_encrypt(input, output, length, schedule, ivec, inw, outw, enc)
DES_xcbc_encrypt = _pygmssl.DES_xcbc_encrypt

def DES_cfb_encrypt(arg1, out, numbits, length, schedule, ivec, enc):
    return _pygmssl.DES_cfb_encrypt(arg1, out, numbits, length, schedule, ivec, enc)
DES_cfb_encrypt = _pygmssl.DES_cfb_encrypt

def DES_ecb_encrypt(input, output, ks, enc):
    return _pygmssl.DES_ecb_encrypt(input, output, ks, enc)
DES_ecb_encrypt = _pygmssl.DES_ecb_encrypt

def DES_encrypt1(data, ks, enc):
    return _pygmssl.DES_encrypt1(data, ks, enc)
DES_encrypt1 = _pygmssl.DES_encrypt1

def DES_encrypt2(data, ks, enc):
    return _pygmssl.DES_encrypt2(data, ks, enc)
DES_encrypt2 = _pygmssl.DES_encrypt2

def DES_encrypt3(data, ks1, ks2, ks3):
    return _pygmssl.DES_encrypt3(data, ks1, ks2, ks3)
DES_encrypt3 = _pygmssl.DES_encrypt3

def DES_decrypt3(data, ks1, ks2, ks3):
    return _pygmssl.DES_decrypt3(data, ks1, ks2, ks3)
DES_decrypt3 = _pygmssl.DES_decrypt3

def DES_ede3_cbc_encrypt(input, output, length, ks1, ks2, ks3, ivec, enc):
    return _pygmssl.DES_ede3_cbc_encrypt(input, output, length, ks1, ks2, ks3, ivec, enc)
DES_ede3_cbc_encrypt = _pygmssl.DES_ede3_cbc_encrypt

def DES_ede3_cfb64_encrypt(arg1, out, length, ks1, ks2, ks3, ivec, num, enc):
    return _pygmssl.DES_ede3_cfb64_encrypt(arg1, out, length, ks1, ks2, ks3, ivec, num, enc)
DES_ede3_cfb64_encrypt = _pygmssl.DES_ede3_cfb64_encrypt

def DES_ede3_cfb_encrypt(arg1, out, numbits, length, ks1, ks2, ks3, ivec, enc):
    return _pygmssl.DES_ede3_cfb_encrypt(arg1, out, numbits, length, ks1, ks2, ks3, ivec, enc)
DES_ede3_cfb_encrypt = _pygmssl.DES_ede3_cfb_encrypt

def DES_ede3_ofb64_encrypt(arg1, out, length, ks1, ks2, ks3, ivec, num):
    return _pygmssl.DES_ede3_ofb64_encrypt(arg1, out, length, ks1, ks2, ks3, ivec, num)
DES_ede3_ofb64_encrypt = _pygmssl.DES_ede3_ofb64_encrypt

def DES_fcrypt(buf, salt, ret):
    return _pygmssl.DES_fcrypt(buf, salt, ret)
DES_fcrypt = _pygmssl.DES_fcrypt

def DES_crypt(buf, salt):
    return _pygmssl.DES_crypt(buf, salt)
DES_crypt = _pygmssl.DES_crypt

def DES_ofb_encrypt(arg1, out, numbits, length, schedule, ivec):
    return _pygmssl.DES_ofb_encrypt(arg1, out, numbits, length, schedule, ivec)
DES_ofb_encrypt = _pygmssl.DES_ofb_encrypt

def DES_pcbc_encrypt(input, output, length, schedule, ivec, enc):
    return _pygmssl.DES_pcbc_encrypt(input, output, length, schedule, ivec, enc)
DES_pcbc_encrypt = _pygmssl.DES_pcbc_encrypt

def DES_quad_cksum(input, output, length, out_count, seed):
    return _pygmssl.DES_quad_cksum(input, output, length, out_count, seed)
DES_quad_cksum = _pygmssl.DES_quad_cksum

def DES_random_key(ret):
    return _pygmssl.DES_random_key(ret)
DES_random_key = _pygmssl.DES_random_key

def DES_set_odd_parity(key):
    return _pygmssl.DES_set_odd_parity(key)
DES_set_odd_parity = _pygmssl.DES_set_odd_parity

def DES_check_key_parity(key):
    return _pygmssl.DES_check_key_parity(key)
DES_check_key_parity = _pygmssl.DES_check_key_parity

def DES_is_weak_key(key):
    return _pygmssl.DES_is_weak_key(key)
DES_is_weak_key = _pygmssl.DES_is_weak_key

def DES_set_key(key, schedule):
    return _pygmssl.DES_set_key(key, schedule)
DES_set_key = _pygmssl.DES_set_key

def DES_key_sched(key, schedule):
    return _pygmssl.DES_key_sched(key, schedule)
DES_key_sched = _pygmssl.DES_key_sched

def DES_set_key_checked(key, schedule):
    return _pygmssl.DES_set_key_checked(key, schedule)
DES_set_key_checked = _pygmssl.DES_set_key_checked

def DES_set_key_unchecked(key, schedule):
    return _pygmssl.DES_set_key_unchecked(key, schedule)
DES_set_key_unchecked = _pygmssl.DES_set_key_unchecked

def DES_string_to_key(str, key):
    return _pygmssl.DES_string_to_key(str, key)
DES_string_to_key = _pygmssl.DES_string_to_key

def DES_string_to_2keys(str, key1, key2):
    return _pygmssl.DES_string_to_2keys(str, key1, key2)
DES_string_to_2keys = _pygmssl.DES_string_to_2keys

def DES_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc):
    return _pygmssl.DES_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc)
DES_cfb64_encrypt = _pygmssl.DES_cfb64_encrypt

def DES_ofb64_encrypt(arg1, out, length, schedule, ivec, num):
    return _pygmssl.DES_ofb64_encrypt(arg1, out, length, schedule, ivec, num)
DES_ofb64_encrypt = _pygmssl.DES_ofb64_encrypt

def DHparams_dup(arg1):
    return _pygmssl.DHparams_dup(arg1)
DHparams_dup = _pygmssl.DHparams_dup

def DH_OpenSSL():
    return _pygmssl.DH_OpenSSL()
DH_OpenSSL = _pygmssl.DH_OpenSSL

def DH_set_default_method(meth):
    return _pygmssl.DH_set_default_method(meth)
DH_set_default_method = _pygmssl.DH_set_default_method

def DH_get_default_method():
    return _pygmssl.DH_get_default_method()
DH_get_default_method = _pygmssl.DH_get_default_method

def DH_set_method(dh, meth):
    return _pygmssl.DH_set_method(dh, meth)
DH_set_method = _pygmssl.DH_set_method

def DH_new_method(engine):
    return _pygmssl.DH_new_method(engine)
DH_new_method = _pygmssl.DH_new_method

def DH_new():
    return _pygmssl.DH_new()
DH_new = _pygmssl.DH_new

def DH_free(dh):
    return _pygmssl.DH_free(dh)
DH_free = _pygmssl.DH_free

def DH_up_ref(dh):
    return _pygmssl.DH_up_ref(dh)
DH_up_ref = _pygmssl.DH_up_ref

def DH_bits(dh):
    return _pygmssl.DH_bits(dh)
DH_bits = _pygmssl.DH_bits

def DH_size(dh):
    return _pygmssl.DH_size(dh)
DH_size = _pygmssl.DH_size

def DH_security_bits(dh):
    return _pygmssl.DH_security_bits(dh)
DH_security_bits = _pygmssl.DH_security_bits

def DH_set_ex_data(d, idx, arg):
    return _pygmssl.DH_set_ex_data(d, idx, arg)
DH_set_ex_data = _pygmssl.DH_set_ex_data

def DH_get_ex_data(d, idx):
    return _pygmssl.DH_get_ex_data(d, idx)
DH_get_ex_data = _pygmssl.DH_get_ex_data

def DH_generate_parameters_ex(dh, prime_len, generator, cb):
    return _pygmssl.DH_generate_parameters_ex(dh, prime_len, generator, cb)
DH_generate_parameters_ex = _pygmssl.DH_generate_parameters_ex

def DH_check_params(dh, ret):
    return _pygmssl.DH_check_params(dh, ret)
DH_check_params = _pygmssl.DH_check_params

def DH_check(dh, codes):
    return _pygmssl.DH_check(dh, codes)
DH_check = _pygmssl.DH_check

def DH_check_pub_key(dh, pub_key, codes):
    return _pygmssl.DH_check_pub_key(dh, pub_key, codes)
DH_check_pub_key = _pygmssl.DH_check_pub_key

def DH_generate_key(dh):
    return _pygmssl.DH_generate_key(dh)
DH_generate_key = _pygmssl.DH_generate_key

def DH_compute_key(key, pub_key, dh):
    return _pygmssl.DH_compute_key(key, pub_key, dh)
DH_compute_key = _pygmssl.DH_compute_key

def DH_compute_key_padded(key, pub_key, dh):
    return _pygmssl.DH_compute_key_padded(key, pub_key, dh)
DH_compute_key_padded = _pygmssl.DH_compute_key_padded

def d2i_DHparams(a, pp, length):
    return _pygmssl.d2i_DHparams(a, pp, length)
d2i_DHparams = _pygmssl.d2i_DHparams

def i2d_DHparams(a, pp):
    return _pygmssl.i2d_DHparams(a, pp)
i2d_DHparams = _pygmssl.i2d_DHparams

def d2i_DHxparams(a, pp, length):
    return _pygmssl.d2i_DHxparams(a, pp, length)
d2i_DHxparams = _pygmssl.d2i_DHxparams

def i2d_DHxparams(a, pp):
    return _pygmssl.i2d_DHxparams(a, pp)
i2d_DHxparams = _pygmssl.i2d_DHxparams

def DHparams_print(bp, x):
    return _pygmssl.DHparams_print(bp, x)
DHparams_print = _pygmssl.DHparams_print

def DH_get_1024_160():
    return _pygmssl.DH_get_1024_160()
DH_get_1024_160 = _pygmssl.DH_get_1024_160

def DH_get_2048_224():
    return _pygmssl.DH_get_2048_224()
DH_get_2048_224 = _pygmssl.DH_get_2048_224

def DH_get_2048_256():
    return _pygmssl.DH_get_2048_256()
DH_get_2048_256 = _pygmssl.DH_get_2048_256

def DH_KDF_X9_42(out, outlen, Z, Zlen, key_oid, ukm, ukmlen, md):
    return _pygmssl.DH_KDF_X9_42(out, outlen, Z, Zlen, key_oid, ukm, ukmlen, md)
DH_KDF_X9_42 = _pygmssl.DH_KDF_X9_42

def DH_get0_pqg(dh, p, q, g):
    return _pygmssl.DH_get0_pqg(dh, p, q, g)
DH_get0_pqg = _pygmssl.DH_get0_pqg

def DH_set0_pqg(dh, p, q, g):
    return _pygmssl.DH_set0_pqg(dh, p, q, g)
DH_set0_pqg = _pygmssl.DH_set0_pqg

def DH_get0_key(dh, pub_key, priv_key):
    return _pygmssl.DH_get0_key(dh, pub_key, priv_key)
DH_get0_key = _pygmssl.DH_get0_key

def DH_set0_key(dh, pub_key, priv_key):
    return _pygmssl.DH_set0_key(dh, pub_key, priv_key)
DH_set0_key = _pygmssl.DH_set0_key

def DH_clear_flags(dh, flags):
    return _pygmssl.DH_clear_flags(dh, flags)
DH_clear_flags = _pygmssl.DH_clear_flags

def DH_test_flags(dh, flags):
    return _pygmssl.DH_test_flags(dh, flags)
DH_test_flags = _pygmssl.DH_test_flags

def DH_set_flags(dh, flags):
    return _pygmssl.DH_set_flags(dh, flags)
DH_set_flags = _pygmssl.DH_set_flags

def DH_get0_engine(d):
    return _pygmssl.DH_get0_engine(d)
DH_get0_engine = _pygmssl.DH_get0_engine

def DH_get_length(dh):
    return _pygmssl.DH_get_length(dh)
DH_get_length = _pygmssl.DH_get_length

def DH_set_length(dh, length):
    return _pygmssl.DH_set_length(dh, length)
DH_set_length = _pygmssl.DH_set_length

def DH_meth_new(name, flags):
    return _pygmssl.DH_meth_new(name, flags)
DH_meth_new = _pygmssl.DH_meth_new

def DH_meth_free(dhm):
    return _pygmssl.DH_meth_free(dhm)
DH_meth_free = _pygmssl.DH_meth_free

def DH_meth_dup(dhm):
    return _pygmssl.DH_meth_dup(dhm)
DH_meth_dup = _pygmssl.DH_meth_dup

def DH_meth_get0_name(dhm):
    return _pygmssl.DH_meth_get0_name(dhm)
DH_meth_get0_name = _pygmssl.DH_meth_get0_name

def DH_meth_set1_name(dhm, name):
    return _pygmssl.DH_meth_set1_name(dhm, name)
DH_meth_set1_name = _pygmssl.DH_meth_set1_name

def DH_meth_get_flags(dhm):
    return _pygmssl.DH_meth_get_flags(dhm)
DH_meth_get_flags = _pygmssl.DH_meth_get_flags

def DH_meth_set_flags(dhm, flags):
    return _pygmssl.DH_meth_set_flags(dhm, flags)
DH_meth_set_flags = _pygmssl.DH_meth_set_flags

def DH_meth_get0_app_data(dhm):
    return _pygmssl.DH_meth_get0_app_data(dhm)
DH_meth_get0_app_data = _pygmssl.DH_meth_get0_app_data

def DH_meth_set0_app_data(dhm, app_data):
    return _pygmssl.DH_meth_set0_app_data(dhm, app_data)
DH_meth_set0_app_data = _pygmssl.DH_meth_set0_app_data

def ERR_load_DH_strings():
    return _pygmssl.ERR_load_DH_strings()
ERR_load_DH_strings = _pygmssl.ERR_load_DH_strings

def DSAparams_dup(x):
    return _pygmssl.DSAparams_dup(x)
DSAparams_dup = _pygmssl.DSAparams_dup

def DSA_SIG_new():
    return _pygmssl.DSA_SIG_new()
DSA_SIG_new = _pygmssl.DSA_SIG_new

def DSA_SIG_free(a):
    return _pygmssl.DSA_SIG_free(a)
DSA_SIG_free = _pygmssl.DSA_SIG_free

def i2d_DSA_SIG(a, pp):
    return _pygmssl.i2d_DSA_SIG(a, pp)
i2d_DSA_SIG = _pygmssl.i2d_DSA_SIG

def d2i_DSA_SIG(v, pp, length):
    return _pygmssl.d2i_DSA_SIG(v, pp, length)
d2i_DSA_SIG = _pygmssl.d2i_DSA_SIG

def DSA_SIG_get0(sig, pr, ps):
    return _pygmssl.DSA_SIG_get0(sig, pr, ps)
DSA_SIG_get0 = _pygmssl.DSA_SIG_get0

def DSA_SIG_set0(sig, r, s):
    return _pygmssl.DSA_SIG_set0(sig, r, s)
DSA_SIG_set0 = _pygmssl.DSA_SIG_set0

def DSA_do_sign(dgst, dlen, dsa):
    return _pygmssl.DSA_do_sign(dgst, dlen, dsa)
DSA_do_sign = _pygmssl.DSA_do_sign

def DSA_do_verify(dgst, dgst_len, sig, dsa):
    return _pygmssl.DSA_do_verify(dgst, dgst_len, sig, dsa)
DSA_do_verify = _pygmssl.DSA_do_verify

def DSA_OpenSSL():
    return _pygmssl.DSA_OpenSSL()
DSA_OpenSSL = _pygmssl.DSA_OpenSSL

def DSA_set_default_method(arg1):
    return _pygmssl.DSA_set_default_method(arg1)
DSA_set_default_method = _pygmssl.DSA_set_default_method

def DSA_get_default_method():
    return _pygmssl.DSA_get_default_method()
DSA_get_default_method = _pygmssl.DSA_get_default_method

def DSA_set_method(dsa, arg2):
    return _pygmssl.DSA_set_method(dsa, arg2)
DSA_set_method = _pygmssl.DSA_set_method

def DSA_get_method(d):
    return _pygmssl.DSA_get_method(d)
DSA_get_method = _pygmssl.DSA_get_method

def DSA_new():
    return _pygmssl.DSA_new()
DSA_new = _pygmssl.DSA_new

def DSA_new_method(engine):
    return _pygmssl.DSA_new_method(engine)
DSA_new_method = _pygmssl.DSA_new_method

def DSA_free(r):
    return _pygmssl.DSA_free(r)
DSA_free = _pygmssl.DSA_free

def DSA_up_ref(r):
    return _pygmssl.DSA_up_ref(r)
DSA_up_ref = _pygmssl.DSA_up_ref

def DSA_size(arg1):
    return _pygmssl.DSA_size(arg1)
DSA_size = _pygmssl.DSA_size

def DSA_bits(d):
    return _pygmssl.DSA_bits(d)
DSA_bits = _pygmssl.DSA_bits

def DSA_security_bits(d):
    return _pygmssl.DSA_security_bits(d)
DSA_security_bits = _pygmssl.DSA_security_bits

def DSA_sign_setup(dsa, ctx_in, kinvp, rp):
    return _pygmssl.DSA_sign_setup(dsa, ctx_in, kinvp, rp)
DSA_sign_setup = _pygmssl.DSA_sign_setup

def DSA_sign(type, dgst, dlen, sig, siglen, dsa):
    return _pygmssl.DSA_sign(type, dgst, dlen, sig, siglen, dsa)
DSA_sign = _pygmssl.DSA_sign

def DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa):
    return _pygmssl.DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa)
DSA_verify = _pygmssl.DSA_verify

def DSA_set_ex_data(d, idx, arg):
    return _pygmssl.DSA_set_ex_data(d, idx, arg)
DSA_set_ex_data = _pygmssl.DSA_set_ex_data

def DSA_get_ex_data(d, idx):
    return _pygmssl.DSA_get_ex_data(d, idx)
DSA_get_ex_data = _pygmssl.DSA_get_ex_data

def d2i_DSAPublicKey(a, pp, length):
    return _pygmssl.d2i_DSAPublicKey(a, pp, length)
d2i_DSAPublicKey = _pygmssl.d2i_DSAPublicKey

def d2i_DSAPrivateKey(a, pp, length):
    return _pygmssl.d2i_DSAPrivateKey(a, pp, length)
d2i_DSAPrivateKey = _pygmssl.d2i_DSAPrivateKey

def d2i_DSAparams(a, pp, length):
    return _pygmssl.d2i_DSAparams(a, pp, length)
d2i_DSAparams = _pygmssl.d2i_DSAparams

def DSA_generate_parameters_ex(dsa, bits, seed, seed_len, counter_ret, h_ret, cb):
    return _pygmssl.DSA_generate_parameters_ex(dsa, bits, seed, seed_len, counter_ret, h_ret, cb)
DSA_generate_parameters_ex = _pygmssl.DSA_generate_parameters_ex

def DSA_generate_key(a):
    return _pygmssl.DSA_generate_key(a)
DSA_generate_key = _pygmssl.DSA_generate_key

def i2d_DSAPublicKey(a, pp):
    return _pygmssl.i2d_DSAPublicKey(a, pp)
i2d_DSAPublicKey = _pygmssl.i2d_DSAPublicKey

def i2d_DSAPrivateKey(a, pp):
    return _pygmssl.i2d_DSAPrivateKey(a, pp)
i2d_DSAPrivateKey = _pygmssl.i2d_DSAPrivateKey

def i2d_DSAparams(a, pp):
    return _pygmssl.i2d_DSAparams(a, pp)
i2d_DSAparams = _pygmssl.i2d_DSAparams

def DSAparams_print(bp, x):
    return _pygmssl.DSAparams_print(bp, x)
DSAparams_print = _pygmssl.DSAparams_print

def DSA_print(bp, x, off):
    return _pygmssl.DSA_print(bp, x, off)
DSA_print = _pygmssl.DSA_print

def DSA_dup_DH(r):
    return _pygmssl.DSA_dup_DH(r)
DSA_dup_DH = _pygmssl.DSA_dup_DH

def DSA_get0_pqg(d, p, q, g):
    return _pygmssl.DSA_get0_pqg(d, p, q, g)
DSA_get0_pqg = _pygmssl.DSA_get0_pqg

def DSA_set0_pqg(d, p, q, g):
    return _pygmssl.DSA_set0_pqg(d, p, q, g)
DSA_set0_pqg = _pygmssl.DSA_set0_pqg

def DSA_get0_key(d, pub_key, priv_key):
    return _pygmssl.DSA_get0_key(d, pub_key, priv_key)
DSA_get0_key = _pygmssl.DSA_get0_key

def DSA_set0_key(d, pub_key, priv_key):
    return _pygmssl.DSA_set0_key(d, pub_key, priv_key)
DSA_set0_key = _pygmssl.DSA_set0_key

def DSA_clear_flags(d, flags):
    return _pygmssl.DSA_clear_flags(d, flags)
DSA_clear_flags = _pygmssl.DSA_clear_flags

def DSA_test_flags(d, flags):
    return _pygmssl.DSA_test_flags(d, flags)
DSA_test_flags = _pygmssl.DSA_test_flags

def DSA_set_flags(d, flags):
    return _pygmssl.DSA_set_flags(d, flags)
DSA_set_flags = _pygmssl.DSA_set_flags

def DSA_get0_engine(d):
    return _pygmssl.DSA_get0_engine(d)
DSA_get0_engine = _pygmssl.DSA_get0_engine

def DSA_meth_new(name, flags):
    return _pygmssl.DSA_meth_new(name, flags)
DSA_meth_new = _pygmssl.DSA_meth_new

def DSA_meth_free(dsam):
    return _pygmssl.DSA_meth_free(dsam)
DSA_meth_free = _pygmssl.DSA_meth_free

def DSA_meth_dup(dsam):
    return _pygmssl.DSA_meth_dup(dsam)
DSA_meth_dup = _pygmssl.DSA_meth_dup

def DSA_meth_get0_name(dsam):
    return _pygmssl.DSA_meth_get0_name(dsam)
DSA_meth_get0_name = _pygmssl.DSA_meth_get0_name

def DSA_meth_set1_name(dsam, name):
    return _pygmssl.DSA_meth_set1_name(dsam, name)
DSA_meth_set1_name = _pygmssl.DSA_meth_set1_name

def DSA_meth_get_flags(dsam):
    return _pygmssl.DSA_meth_get_flags(dsam)
DSA_meth_get_flags = _pygmssl.DSA_meth_get_flags

def DSA_meth_set_flags(dsam, flags):
    return _pygmssl.DSA_meth_set_flags(dsam, flags)
DSA_meth_set_flags = _pygmssl.DSA_meth_set_flags

def DSA_meth_get0_app_data(dsam):
    return _pygmssl.DSA_meth_get0_app_data(dsam)
DSA_meth_get0_app_data = _pygmssl.DSA_meth_get0_app_data

def DSA_meth_set0_app_data(dsam, app_data):
    return _pygmssl.DSA_meth_set0_app_data(dsam, app_data)
DSA_meth_set0_app_data = _pygmssl.DSA_meth_set0_app_data

def ERR_load_DSA_strings():
    return _pygmssl.ERR_load_DSA_strings()
ERR_load_DSA_strings = _pygmssl.ERR_load_DSA_strings

def ECIES_PARAMS_init_with_recommended(param):
    return _pygmssl.ECIES_PARAMS_init_with_recommended(param)
ECIES_PARAMS_init_with_recommended = _pygmssl.ECIES_PARAMS_init_with_recommended

def ECIES_PARAMS_init_with_type(param, type):
    return _pygmssl.ECIES_PARAMS_init_with_type(param, type)
ECIES_PARAMS_init_with_type = _pygmssl.ECIES_PARAMS_init_with_type

def ECIES_PARAMS_get_kdf(param):
    return _pygmssl.ECIES_PARAMS_get_kdf(param)
ECIES_PARAMS_get_kdf = _pygmssl.ECIES_PARAMS_get_kdf

def ECIES_PARAMS_get_enc(param, inlen, enc_cipher, enckeylen, ciphertextlen):
    return _pygmssl.ECIES_PARAMS_get_enc(param, inlen, enc_cipher, enckeylen, ciphertextlen)
ECIES_PARAMS_get_enc = _pygmssl.ECIES_PARAMS_get_enc

def ECIES_PARAMS_get_mac(param, hmac_md, cmac_cipher, mackeylen, maclen):
    return _pygmssl.ECIES_PARAMS_get_mac(param, hmac_md, cmac_cipher, mackeylen, maclen)
ECIES_PARAMS_get_mac = _pygmssl.ECIES_PARAMS_get_mac

def i2d_ECIESParameters(param, out):
    return _pygmssl.i2d_ECIESParameters(param, out)
i2d_ECIESParameters = _pygmssl.i2d_ECIESParameters

def d2i_ECIESParameters(param, arg2, len):
    return _pygmssl.d2i_ECIESParameters(param, arg2, len)
d2i_ECIESParameters = _pygmssl.d2i_ECIESParameters

def ECIES_CIPHERTEXT_VALUE_ciphertext_length(a):
    return _pygmssl.ECIES_CIPHERTEXT_VALUE_ciphertext_length(a)
ECIES_CIPHERTEXT_VALUE_ciphertext_length = _pygmssl.ECIES_CIPHERTEXT_VALUE_ciphertext_length

def ECIES_do_encrypt(param, arg2, inlen, ec_key):
    return _pygmssl.ECIES_do_encrypt(param, arg2, inlen, ec_key)
ECIES_do_encrypt = _pygmssl.ECIES_do_encrypt

def ECIES_do_decrypt(param, arg2, out, outlen, ec_key):
    return _pygmssl.ECIES_do_decrypt(param, arg2, out, outlen, ec_key)
ECIES_do_decrypt = _pygmssl.ECIES_do_decrypt

def ECIES_encrypt(param, arg2, inlen, out, outlen, ec_key):
    return _pygmssl.ECIES_encrypt(param, arg2, inlen, out, outlen, ec_key)
ECIES_encrypt = _pygmssl.ECIES_encrypt

def ECIES_decrypt(param, arg2, inlen, out, outlen, ec_key):
    return _pygmssl.ECIES_decrypt(param, arg2, inlen, out, outlen, ec_key)
ECIES_decrypt = _pygmssl.ECIES_decrypt

def FFX_CTX_new():
    return _pygmssl.FFX_CTX_new()
FFX_CTX_new = _pygmssl.FFX_CTX_new

def FFX_CTX_free(ctx):
    return _pygmssl.FFX_CTX_free(ctx)
FFX_CTX_free = _pygmssl.FFX_CTX_free

def FFX_init(ctx, cipher, key, flag):
    return _pygmssl.FFX_init(ctx, cipher, key, flag)
FFX_init = _pygmssl.FFX_init

def FFX_encrypt(ctx, arg2, out, iolen, tweak, tweaklen):
    return _pygmssl.FFX_encrypt(ctx, arg2, out, iolen, tweak, tweaklen)
FFX_encrypt = _pygmssl.FFX_encrypt

def FFX_decrypt(ctx, arg2, out, iolen, tweak, tweaklen):
    return _pygmssl.FFX_decrypt(ctx, arg2, out, iolen, tweak, tweaklen)
FFX_decrypt = _pygmssl.FFX_decrypt

def FFX_compute_luhn(arg1, inlen):
    return _pygmssl.FFX_compute_luhn(arg1, inlen)
FFX_compute_luhn = _pygmssl.FFX_compute_luhn

def HMAC_size(e):
    return _pygmssl.HMAC_size(e)
HMAC_size = _pygmssl.HMAC_size

def HMAC_CTX_new():
    return _pygmssl.HMAC_CTX_new()
HMAC_CTX_new = _pygmssl.HMAC_CTX_new

def HMAC_CTX_reset(ctx):
    return _pygmssl.HMAC_CTX_reset(ctx)
HMAC_CTX_reset = _pygmssl.HMAC_CTX_reset

def HMAC_CTX_free(ctx):
    return _pygmssl.HMAC_CTX_free(ctx)
HMAC_CTX_free = _pygmssl.HMAC_CTX_free

def HMAC_Init_ex(ctx, key, len, md, impl):
    return _pygmssl.HMAC_Init_ex(ctx, key, len, md, impl)
HMAC_Init_ex = _pygmssl.HMAC_Init_ex

def HMAC_Update(ctx, data, len):
    return _pygmssl.HMAC_Update(ctx, data, len)
HMAC_Update = _pygmssl.HMAC_Update

def HMAC_Final(ctx, md, len):
    return _pygmssl.HMAC_Final(ctx, md, len)
HMAC_Final = _pygmssl.HMAC_Final

def HMAC(evp_md, key, key_len, d, n, md, md_len):
    return _pygmssl.HMAC(evp_md, key, key_len, d, n, md, md_len)
HMAC = _pygmssl.HMAC

def HMAC_CTX_copy(dctx, sctx):
    return _pygmssl.HMAC_CTX_copy(dctx, sctx)
HMAC_CTX_copy = _pygmssl.HMAC_CTX_copy

def HMAC_CTX_set_flags(ctx, flags):
    return _pygmssl.HMAC_CTX_set_flags(ctx, flags)
HMAC_CTX_set_flags = _pygmssl.HMAC_CTX_set_flags

def HMAC_CTX_get_md(ctx):
    return _pygmssl.HMAC_CTX_get_md(ctx)
HMAC_CTX_get_md = _pygmssl.HMAC_CTX_get_md

def IDEA_options():
    return _pygmssl.IDEA_options()
IDEA_options = _pygmssl.IDEA_options

def IDEA_ecb_encrypt(arg1, out, ks):
    return _pygmssl.IDEA_ecb_encrypt(arg1, out, ks)
IDEA_ecb_encrypt = _pygmssl.IDEA_ecb_encrypt

def IDEA_set_encrypt_key(key, ks):
    return _pygmssl.IDEA_set_encrypt_key(key, ks)
IDEA_set_encrypt_key = _pygmssl.IDEA_set_encrypt_key

def IDEA_set_decrypt_key(ek, dk):
    return _pygmssl.IDEA_set_decrypt_key(ek, dk)
IDEA_set_decrypt_key = _pygmssl.IDEA_set_decrypt_key

def IDEA_cbc_encrypt(arg1, out, length, ks, iv, enc):
    return _pygmssl.IDEA_cbc_encrypt(arg1, out, length, ks, iv, enc)
IDEA_cbc_encrypt = _pygmssl.IDEA_cbc_encrypt

def IDEA_cfb64_encrypt(arg1, out, length, ks, iv, num, enc):
    return _pygmssl.IDEA_cfb64_encrypt(arg1, out, length, ks, iv, num, enc)
IDEA_cfb64_encrypt = _pygmssl.IDEA_cfb64_encrypt

def IDEA_ofb64_encrypt(arg1, out, length, ks, iv, num):
    return _pygmssl.IDEA_ofb64_encrypt(arg1, out, length, ks, iv, num)
IDEA_ofb64_encrypt = _pygmssl.IDEA_ofb64_encrypt

def IDEA_encrypt(arg1, ks):
    return _pygmssl.IDEA_encrypt(arg1, ks)
IDEA_encrypt = _pygmssl.IDEA_encrypt

def OPENSSL_LH_error(lh):
    return _pygmssl.OPENSSL_LH_error(lh)
OPENSSL_LH_error = _pygmssl.OPENSSL_LH_error

def OPENSSL_LH_new(h, c):
    return _pygmssl.OPENSSL_LH_new(h, c)
OPENSSL_LH_new = _pygmssl.OPENSSL_LH_new

def OPENSSL_LH_free(lh):
    return _pygmssl.OPENSSL_LH_free(lh)
OPENSSL_LH_free = _pygmssl.OPENSSL_LH_free

def OPENSSL_LH_insert(lh, data):
    return _pygmssl.OPENSSL_LH_insert(lh, data)
OPENSSL_LH_insert = _pygmssl.OPENSSL_LH_insert

def OPENSSL_LH_delete(lh, data):
    return _pygmssl.OPENSSL_LH_delete(lh, data)
OPENSSL_LH_delete = _pygmssl.OPENSSL_LH_delete

def OPENSSL_LH_retrieve(lh, data):
    return _pygmssl.OPENSSL_LH_retrieve(lh, data)
OPENSSL_LH_retrieve = _pygmssl.OPENSSL_LH_retrieve

def OPENSSL_LH_doall(lh, func):
    return _pygmssl.OPENSSL_LH_doall(lh, func)
OPENSSL_LH_doall = _pygmssl.OPENSSL_LH_doall

def OPENSSL_LH_doall_arg(lh, func, arg):
    return _pygmssl.OPENSSL_LH_doall_arg(lh, func, arg)
OPENSSL_LH_doall_arg = _pygmssl.OPENSSL_LH_doall_arg

def OPENSSL_LH_strhash(c):
    return _pygmssl.OPENSSL_LH_strhash(c)
OPENSSL_LH_strhash = _pygmssl.OPENSSL_LH_strhash

def OPENSSL_LH_num_items(lh):
    return _pygmssl.OPENSSL_LH_num_items(lh)
OPENSSL_LH_num_items = _pygmssl.OPENSSL_LH_num_items

def OPENSSL_LH_get_down_load(lh):
    return _pygmssl.OPENSSL_LH_get_down_load(lh)
OPENSSL_LH_get_down_load = _pygmssl.OPENSSL_LH_get_down_load

def OPENSSL_LH_set_down_load(lh, down_load):
    return _pygmssl.OPENSSL_LH_set_down_load(lh, down_load)
OPENSSL_LH_set_down_load = _pygmssl.OPENSSL_LH_set_down_load

def OPENSSL_LH_stats(lh, fp):
    return _pygmssl.OPENSSL_LH_stats(lh, fp)
OPENSSL_LH_stats = _pygmssl.OPENSSL_LH_stats

def OPENSSL_LH_node_stats(lh, fp):
    return _pygmssl.OPENSSL_LH_node_stats(lh, fp)
OPENSSL_LH_node_stats = _pygmssl.OPENSSL_LH_node_stats

def OPENSSL_LH_node_usage_stats(lh, fp):
    return _pygmssl.OPENSSL_LH_node_usage_stats(lh, fp)
OPENSSL_LH_node_usage_stats = _pygmssl.OPENSSL_LH_node_usage_stats

def OPENSSL_LH_stats_bio(lh, out):
    return _pygmssl.OPENSSL_LH_stats_bio(lh, out)
OPENSSL_LH_stats_bio = _pygmssl.OPENSSL_LH_stats_bio

def OPENSSL_LH_node_stats_bio(lh, out):
    return _pygmssl.OPENSSL_LH_node_stats_bio(lh, out)
OPENSSL_LH_node_stats_bio = _pygmssl.OPENSSL_LH_node_stats_bio

def OPENSSL_LH_node_usage_stats_bio(lh, out):
    return _pygmssl.OPENSSL_LH_node_usage_stats_bio(lh, out)
OPENSSL_LH_node_usage_stats_bio = _pygmssl.OPENSSL_LH_node_usage_stats_bio

def MD4_Init(c):
    return _pygmssl.MD4_Init(c)
MD4_Init = _pygmssl.MD4_Init

def MD4_Update(c, data, len):
    return _pygmssl.MD4_Update(c, data, len)
MD4_Update = _pygmssl.MD4_Update

def MD4_Final(md, c):
    return _pygmssl.MD4_Final(md, c)
MD4_Final = _pygmssl.MD4_Final

def MD4(d, n, md):
    return _pygmssl.MD4(d, n, md)
MD4 = _pygmssl.MD4

def MD4_Transform(c, b):
    return _pygmssl.MD4_Transform(c, b)
MD4_Transform = _pygmssl.MD4_Transform

def MD5_Init(c):
    return _pygmssl.MD5_Init(c)
MD5_Init = _pygmssl.MD5_Init

def MD5_Update(c, data, len):
    return _pygmssl.MD5_Update(c, data, len)
MD5_Update = _pygmssl.MD5_Update

def MD5_Final(md, c):
    return _pygmssl.MD5_Final(md, c)
MD5_Final = _pygmssl.MD5_Final

def MD5(d, n, md):
    return _pygmssl.MD5(d, n, md)
MD5 = _pygmssl.MD5

def MD5_Transform(c, b):
    return _pygmssl.MD5_Transform(c, b)
MD5_Transform = _pygmssl.MD5_Transform

def MDC2_Init(c):
    return _pygmssl.MDC2_Init(c)
MDC2_Init = _pygmssl.MDC2_Init

def MDC2_Update(c, data, len):
    return _pygmssl.MDC2_Update(c, data, len)
MDC2_Update = _pygmssl.MDC2_Update

def MDC2_Final(md, c):
    return _pygmssl.MDC2_Final(md, c)
MDC2_Final = _pygmssl.MDC2_Final

def MDC2(d, n, md):
    return _pygmssl.MDC2(d, n, md)
MDC2 = _pygmssl.MDC2

def CRYPTO_cbc128_encrypt(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_cbc128_encrypt(arg1, out, len, key, ivec, block)
CRYPTO_cbc128_encrypt = _pygmssl.CRYPTO_cbc128_encrypt

def CRYPTO_cbc128_decrypt(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_cbc128_decrypt(arg1, out, len, key, ivec, block)
CRYPTO_cbc128_decrypt = _pygmssl.CRYPTO_cbc128_decrypt

def CRYPTO_ctr128_encrypt(arg1, out, len, key, ivec, ecount_buf, num, block):
    return _pygmssl.CRYPTO_ctr128_encrypt(arg1, out, len, key, ivec, ecount_buf, num, block)
CRYPTO_ctr128_encrypt = _pygmssl.CRYPTO_ctr128_encrypt

def CRYPTO_ctr128_encrypt_ctr32(arg1, out, len, key, ivec, ecount_buf, num, ctr):
    return _pygmssl.CRYPTO_ctr128_encrypt_ctr32(arg1, out, len, key, ivec, ecount_buf, num, ctr)
CRYPTO_ctr128_encrypt_ctr32 = _pygmssl.CRYPTO_ctr128_encrypt_ctr32

def CRYPTO_ofb128_encrypt(arg1, out, len, key, ivec, num, block):
    return _pygmssl.CRYPTO_ofb128_encrypt(arg1, out, len, key, ivec, num, block)
CRYPTO_ofb128_encrypt = _pygmssl.CRYPTO_ofb128_encrypt

def CRYPTO_cfb128_encrypt(arg1, out, len, key, ivec, num, enc, block):
    return _pygmssl.CRYPTO_cfb128_encrypt(arg1, out, len, key, ivec, num, enc, block)
CRYPTO_cfb128_encrypt = _pygmssl.CRYPTO_cfb128_encrypt

def CRYPTO_cfb128_8_encrypt(arg1, out, length, key, ivec, num, enc, block):
    return _pygmssl.CRYPTO_cfb128_8_encrypt(arg1, out, length, key, ivec, num, enc, block)
CRYPTO_cfb128_8_encrypt = _pygmssl.CRYPTO_cfb128_8_encrypt

def CRYPTO_cfb128_1_encrypt(arg1, out, bits, key, ivec, num, enc, block):
    return _pygmssl.CRYPTO_cfb128_1_encrypt(arg1, out, bits, key, ivec, num, enc, block)
CRYPTO_cfb128_1_encrypt = _pygmssl.CRYPTO_cfb128_1_encrypt

def CRYPTO_cts128_encrypt_block(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_cts128_encrypt_block(arg1, out, len, key, ivec, block)
CRYPTO_cts128_encrypt_block = _pygmssl.CRYPTO_cts128_encrypt_block

def CRYPTO_cts128_encrypt(arg1, out, len, key, ivec, cbc):
    return _pygmssl.CRYPTO_cts128_encrypt(arg1, out, len, key, ivec, cbc)
CRYPTO_cts128_encrypt = _pygmssl.CRYPTO_cts128_encrypt

def CRYPTO_cts128_decrypt_block(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_cts128_decrypt_block(arg1, out, len, key, ivec, block)
CRYPTO_cts128_decrypt_block = _pygmssl.CRYPTO_cts128_decrypt_block

def CRYPTO_cts128_decrypt(arg1, out, len, key, ivec, cbc):
    return _pygmssl.CRYPTO_cts128_decrypt(arg1, out, len, key, ivec, cbc)
CRYPTO_cts128_decrypt = _pygmssl.CRYPTO_cts128_decrypt

def CRYPTO_nistcts128_encrypt_block(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_nistcts128_encrypt_block(arg1, out, len, key, ivec, block)
CRYPTO_nistcts128_encrypt_block = _pygmssl.CRYPTO_nistcts128_encrypt_block

def CRYPTO_nistcts128_encrypt(arg1, out, len, key, ivec, cbc):
    return _pygmssl.CRYPTO_nistcts128_encrypt(arg1, out, len, key, ivec, cbc)
CRYPTO_nistcts128_encrypt = _pygmssl.CRYPTO_nistcts128_encrypt

def CRYPTO_nistcts128_decrypt_block(arg1, out, len, key, ivec, block):
    return _pygmssl.CRYPTO_nistcts128_decrypt_block(arg1, out, len, key, ivec, block)
CRYPTO_nistcts128_decrypt_block = _pygmssl.CRYPTO_nistcts128_decrypt_block

def CRYPTO_nistcts128_decrypt(arg1, out, len, key, ivec, cbc):
    return _pygmssl.CRYPTO_nistcts128_decrypt(arg1, out, len, key, ivec, cbc)
CRYPTO_nistcts128_decrypt = _pygmssl.CRYPTO_nistcts128_decrypt

def CRYPTO_gcm128_new(key, block):
    return _pygmssl.CRYPTO_gcm128_new(key, block)
CRYPTO_gcm128_new = _pygmssl.CRYPTO_gcm128_new

def CRYPTO_gcm128_init(ctx, key, block):
    return _pygmssl.CRYPTO_gcm128_init(ctx, key, block)
CRYPTO_gcm128_init = _pygmssl.CRYPTO_gcm128_init

def CRYPTO_gcm128_setiv(ctx, iv, len):
    return _pygmssl.CRYPTO_gcm128_setiv(ctx, iv, len)
CRYPTO_gcm128_setiv = _pygmssl.CRYPTO_gcm128_setiv

def CRYPTO_gcm128_aad(ctx, aad, len):
    return _pygmssl.CRYPTO_gcm128_aad(ctx, aad, len)
CRYPTO_gcm128_aad = _pygmssl.CRYPTO_gcm128_aad

def CRYPTO_gcm128_encrypt(ctx, arg2, out, len):
    return _pygmssl.CRYPTO_gcm128_encrypt(ctx, arg2, out, len)
CRYPTO_gcm128_encrypt = _pygmssl.CRYPTO_gcm128_encrypt

def CRYPTO_gcm128_decrypt(ctx, arg2, out, len):
    return _pygmssl.CRYPTO_gcm128_decrypt(ctx, arg2, out, len)
CRYPTO_gcm128_decrypt = _pygmssl.CRYPTO_gcm128_decrypt

def CRYPTO_gcm128_encrypt_ctr32(ctx, arg2, out, len, stream):
    return _pygmssl.CRYPTO_gcm128_encrypt_ctr32(ctx, arg2, out, len, stream)
CRYPTO_gcm128_encrypt_ctr32 = _pygmssl.CRYPTO_gcm128_encrypt_ctr32

def CRYPTO_gcm128_decrypt_ctr32(ctx, arg2, out, len, stream):
    return _pygmssl.CRYPTO_gcm128_decrypt_ctr32(ctx, arg2, out, len, stream)
CRYPTO_gcm128_decrypt_ctr32 = _pygmssl.CRYPTO_gcm128_decrypt_ctr32

def CRYPTO_gcm128_finish(ctx, tag, len):
    return _pygmssl.CRYPTO_gcm128_finish(ctx, tag, len)
CRYPTO_gcm128_finish = _pygmssl.CRYPTO_gcm128_finish

def CRYPTO_gcm128_tag(ctx, tag, len):
    return _pygmssl.CRYPTO_gcm128_tag(ctx, tag, len)
CRYPTO_gcm128_tag = _pygmssl.CRYPTO_gcm128_tag

def CRYPTO_gcm128_release(ctx):
    return _pygmssl.CRYPTO_gcm128_release(ctx)
CRYPTO_gcm128_release = _pygmssl.CRYPTO_gcm128_release

def CRYPTO_ccm128_init(ctx, M, L, key, block):
    return _pygmssl.CRYPTO_ccm128_init(ctx, M, L, key, block)
CRYPTO_ccm128_init = _pygmssl.CRYPTO_ccm128_init

def CRYPTO_ccm128_setiv(ctx, nonce, nlen, mlen):
    return _pygmssl.CRYPTO_ccm128_setiv(ctx, nonce, nlen, mlen)
CRYPTO_ccm128_setiv = _pygmssl.CRYPTO_ccm128_setiv

def CRYPTO_ccm128_aad(ctx, aad, alen):
    return _pygmssl.CRYPTO_ccm128_aad(ctx, aad, alen)
CRYPTO_ccm128_aad = _pygmssl.CRYPTO_ccm128_aad

def CRYPTO_ccm128_encrypt(ctx, inp, out, len):
    return _pygmssl.CRYPTO_ccm128_encrypt(ctx, inp, out, len)
CRYPTO_ccm128_encrypt = _pygmssl.CRYPTO_ccm128_encrypt

def CRYPTO_ccm128_decrypt(ctx, inp, out, len):
    return _pygmssl.CRYPTO_ccm128_decrypt(ctx, inp, out, len)
CRYPTO_ccm128_decrypt = _pygmssl.CRYPTO_ccm128_decrypt

def CRYPTO_ccm128_encrypt_ccm64(ctx, inp, out, len, stream):
    return _pygmssl.CRYPTO_ccm128_encrypt_ccm64(ctx, inp, out, len, stream)
CRYPTO_ccm128_encrypt_ccm64 = _pygmssl.CRYPTO_ccm128_encrypt_ccm64

def CRYPTO_ccm128_decrypt_ccm64(ctx, inp, out, len, stream):
    return _pygmssl.CRYPTO_ccm128_decrypt_ccm64(ctx, inp, out, len, stream)
CRYPTO_ccm128_decrypt_ccm64 = _pygmssl.CRYPTO_ccm128_decrypt_ccm64

def CRYPTO_ccm128_tag(ctx, tag, len):
    return _pygmssl.CRYPTO_ccm128_tag(ctx, tag, len)
CRYPTO_ccm128_tag = _pygmssl.CRYPTO_ccm128_tag

def CRYPTO_xts128_encrypt(ctx, iv, inp, out, len, enc):
    return _pygmssl.CRYPTO_xts128_encrypt(ctx, iv, inp, out, len, enc)
CRYPTO_xts128_encrypt = _pygmssl.CRYPTO_xts128_encrypt

def CRYPTO_128_wrap(key, iv, out, arg4, inlen, block):
    return _pygmssl.CRYPTO_128_wrap(key, iv, out, arg4, inlen, block)
CRYPTO_128_wrap = _pygmssl.CRYPTO_128_wrap

def CRYPTO_128_unwrap(key, iv, out, arg4, inlen, block):
    return _pygmssl.CRYPTO_128_unwrap(key, iv, out, arg4, inlen, block)
CRYPTO_128_unwrap = _pygmssl.CRYPTO_128_unwrap

def CRYPTO_128_wrap_pad(key, icv, out, arg4, inlen, block):
    return _pygmssl.CRYPTO_128_wrap_pad(key, icv, out, arg4, inlen, block)
CRYPTO_128_wrap_pad = _pygmssl.CRYPTO_128_wrap_pad

def CRYPTO_128_unwrap_pad(key, icv, out, arg4, inlen, block):
    return _pygmssl.CRYPTO_128_unwrap_pad(key, icv, out, arg4, inlen, block)
CRYPTO_128_unwrap_pad = _pygmssl.CRYPTO_128_unwrap_pad

def CRYPTO_ocb128_new(keyenc, keydec, encrypt, decrypt, stream):
    return _pygmssl.CRYPTO_ocb128_new(keyenc, keydec, encrypt, decrypt, stream)
CRYPTO_ocb128_new = _pygmssl.CRYPTO_ocb128_new

def CRYPTO_ocb128_init(ctx, keyenc, keydec, encrypt, decrypt, stream):
    return _pygmssl.CRYPTO_ocb128_init(ctx, keyenc, keydec, encrypt, decrypt, stream)
CRYPTO_ocb128_init = _pygmssl.CRYPTO_ocb128_init

def CRYPTO_ocb128_copy_ctx(dest, src, keyenc, keydec):
    return _pygmssl.CRYPTO_ocb128_copy_ctx(dest, src, keyenc, keydec)
CRYPTO_ocb128_copy_ctx = _pygmssl.CRYPTO_ocb128_copy_ctx

def CRYPTO_ocb128_setiv(ctx, iv, len, taglen):
    return _pygmssl.CRYPTO_ocb128_setiv(ctx, iv, len, taglen)
CRYPTO_ocb128_setiv = _pygmssl.CRYPTO_ocb128_setiv

def CRYPTO_ocb128_aad(ctx, aad, len):
    return _pygmssl.CRYPTO_ocb128_aad(ctx, aad, len)
CRYPTO_ocb128_aad = _pygmssl.CRYPTO_ocb128_aad

def CRYPTO_ocb128_encrypt(ctx, arg2, out, len):
    return _pygmssl.CRYPTO_ocb128_encrypt(ctx, arg2, out, len)
CRYPTO_ocb128_encrypt = _pygmssl.CRYPTO_ocb128_encrypt

def CRYPTO_ocb128_decrypt(ctx, arg2, out, len):
    return _pygmssl.CRYPTO_ocb128_decrypt(ctx, arg2, out, len)
CRYPTO_ocb128_decrypt = _pygmssl.CRYPTO_ocb128_decrypt

def CRYPTO_ocb128_finish(ctx, tag, len):
    return _pygmssl.CRYPTO_ocb128_finish(ctx, tag, len)
CRYPTO_ocb128_finish = _pygmssl.CRYPTO_ocb128_finish

def CRYPTO_ocb128_tag(ctx, tag, len):
    return _pygmssl.CRYPTO_ocb128_tag(ctx, tag, len)
CRYPTO_ocb128_tag = _pygmssl.CRYPTO_ocb128_tag

def CRYPTO_ocb128_cleanup(ctx):
    return _pygmssl.CRYPTO_ocb128_cleanup(ctx)
CRYPTO_ocb128_cleanup = _pygmssl.CRYPTO_ocb128_cleanup

def PAILLIER_new():
    return _pygmssl.PAILLIER_new()
PAILLIER_new = _pygmssl.PAILLIER_new

def PAILLIER_free(key):
    return _pygmssl.PAILLIER_free(key)
PAILLIER_free = _pygmssl.PAILLIER_free

def PAILLIER_generate_key(key, bits):
    return _pygmssl.PAILLIER_generate_key(key, bits)
PAILLIER_generate_key = _pygmssl.PAILLIER_generate_key

def PAILLIER_check_key(key):
    return _pygmssl.PAILLIER_check_key(key)
PAILLIER_check_key = _pygmssl.PAILLIER_check_key

def PAILLIER_encrypt(out, arg2, key):
    return _pygmssl.PAILLIER_encrypt(out, arg2, key)
PAILLIER_encrypt = _pygmssl.PAILLIER_encrypt

def PAILLIER_decrypt(out, arg2, key):
    return _pygmssl.PAILLIER_decrypt(out, arg2, key)
PAILLIER_decrypt = _pygmssl.PAILLIER_decrypt

def PAILLIER_ciphertext_add(r, a, b, key):
    return _pygmssl.PAILLIER_ciphertext_add(r, a, b, key)
PAILLIER_ciphertext_add = _pygmssl.PAILLIER_ciphertext_add

def PAILLIER_ciphertext_scalar_mul(r, scalar, a, key):
    return _pygmssl.PAILLIER_ciphertext_scalar_mul(r, scalar, a, key)
PAILLIER_ciphertext_scalar_mul = _pygmssl.PAILLIER_ciphertext_scalar_mul

def PAILLIER_up_ref(key):
    return _pygmssl.PAILLIER_up_ref(key)
PAILLIER_up_ref = _pygmssl.PAILLIER_up_ref

def ERR_load_PAILLIER_strings():
    return _pygmssl.ERR_load_PAILLIER_strings()
ERR_load_PAILLIER_strings = _pygmssl.ERR_load_PAILLIER_strings

def RC2_set_key(key, len, data, bits):
    return _pygmssl.RC2_set_key(key, len, data, bits)
RC2_set_key = _pygmssl.RC2_set_key

def RC2_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.RC2_ecb_encrypt(arg1, out, key, enc)
RC2_ecb_encrypt = _pygmssl.RC2_ecb_encrypt

def RC2_encrypt(data, key):
    return _pygmssl.RC2_encrypt(data, key)
RC2_encrypt = _pygmssl.RC2_encrypt

def RC2_decrypt(data, key):
    return _pygmssl.RC2_decrypt(data, key)
RC2_decrypt = _pygmssl.RC2_decrypt

def RC2_cbc_encrypt(arg1, out, length, ks, iv, enc):
    return _pygmssl.RC2_cbc_encrypt(arg1, out, length, ks, iv, enc)
RC2_cbc_encrypt = _pygmssl.RC2_cbc_encrypt

def RC2_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc):
    return _pygmssl.RC2_cfb64_encrypt(arg1, out, length, schedule, ivec, num, enc)
RC2_cfb64_encrypt = _pygmssl.RC2_cfb64_encrypt

def RC2_ofb64_encrypt(arg1, out, length, schedule, ivec, num):
    return _pygmssl.RC2_ofb64_encrypt(arg1, out, length, schedule, ivec, num)
RC2_ofb64_encrypt = _pygmssl.RC2_ofb64_encrypt

def RC4_options():
    return _pygmssl.RC4_options()
RC4_options = _pygmssl.RC4_options

def RC4_set_key(key, len, data):
    return _pygmssl.RC4_set_key(key, len, data)
RC4_set_key = _pygmssl.RC4_set_key

def RC4(key, len, indata, outdata):
    return _pygmssl.RC4(key, len, indata, outdata)
RC4 = _pygmssl.RC4

def RIPEMD160_Init(c):
    return _pygmssl.RIPEMD160_Init(c)
RIPEMD160_Init = _pygmssl.RIPEMD160_Init

def RIPEMD160_Update(c, data, len):
    return _pygmssl.RIPEMD160_Update(c, data, len)
RIPEMD160_Update = _pygmssl.RIPEMD160_Update

def RIPEMD160_Final(md, c):
    return _pygmssl.RIPEMD160_Final(md, c)
RIPEMD160_Final = _pygmssl.RIPEMD160_Final

def RIPEMD160(d, n, md):
    return _pygmssl.RIPEMD160(d, n, md)
RIPEMD160 = _pygmssl.RIPEMD160

def RIPEMD160_Transform(c, b):
    return _pygmssl.RIPEMD160_Transform(c, b)
RIPEMD160_Transform = _pygmssl.RIPEMD160_Transform

def RSA_new():
    return _pygmssl.RSA_new()
RSA_new = _pygmssl.RSA_new

def RSA_new_method(engine):
    return _pygmssl.RSA_new_method(engine)
RSA_new_method = _pygmssl.RSA_new_method

def RSA_bits(rsa):
    return _pygmssl.RSA_bits(rsa)
RSA_bits = _pygmssl.RSA_bits

def RSA_size(rsa):
    return _pygmssl.RSA_size(rsa)
RSA_size = _pygmssl.RSA_size

def RSA_security_bits(rsa):
    return _pygmssl.RSA_security_bits(rsa)
RSA_security_bits = _pygmssl.RSA_security_bits

def RSA_set0_key(r, n, e, d):
    return _pygmssl.RSA_set0_key(r, n, e, d)
RSA_set0_key = _pygmssl.RSA_set0_key

def RSA_set0_factors(r, p, q):
    return _pygmssl.RSA_set0_factors(r, p, q)
RSA_set0_factors = _pygmssl.RSA_set0_factors

def RSA_set0_crt_params(r, dmp1, dmq1, iqmp):
    return _pygmssl.RSA_set0_crt_params(r, dmp1, dmq1, iqmp)
RSA_set0_crt_params = _pygmssl.RSA_set0_crt_params

def RSA_get0_key(r, n, e, d):
    return _pygmssl.RSA_get0_key(r, n, e, d)
RSA_get0_key = _pygmssl.RSA_get0_key

def RSA_get0_factors(r, p, q):
    return _pygmssl.RSA_get0_factors(r, p, q)
RSA_get0_factors = _pygmssl.RSA_get0_factors

def RSA_get0_crt_params(r, dmp1, dmq1, iqmp):
    return _pygmssl.RSA_get0_crt_params(r, dmp1, dmq1, iqmp)
RSA_get0_crt_params = _pygmssl.RSA_get0_crt_params

def RSA_clear_flags(r, flags):
    return _pygmssl.RSA_clear_flags(r, flags)
RSA_clear_flags = _pygmssl.RSA_clear_flags

def RSA_test_flags(r, flags):
    return _pygmssl.RSA_test_flags(r, flags)
RSA_test_flags = _pygmssl.RSA_test_flags

def RSA_set_flags(r, flags):
    return _pygmssl.RSA_set_flags(r, flags)
RSA_set_flags = _pygmssl.RSA_set_flags

def RSA_get0_engine(r):
    return _pygmssl.RSA_get0_engine(r)
RSA_get0_engine = _pygmssl.RSA_get0_engine

def RSA_generate_key_ex(rsa, bits, e, cb):
    return _pygmssl.RSA_generate_key_ex(rsa, bits, e, cb)
RSA_generate_key_ex = _pygmssl.RSA_generate_key_ex

def RSA_X931_derive_ex(rsa, p1, p2, q1, q2, Xp1, Xp2, Xp, Xq1, Xq2, Xq, e, cb):
    return _pygmssl.RSA_X931_derive_ex(rsa, p1, p2, q1, q2, Xp1, Xp2, Xp, Xq1, Xq2, Xq, e, cb)
RSA_X931_derive_ex = _pygmssl.RSA_X931_derive_ex

def RSA_X931_generate_key_ex(rsa, bits, e, cb):
    return _pygmssl.RSA_X931_generate_key_ex(rsa, bits, e, cb)
RSA_X931_generate_key_ex = _pygmssl.RSA_X931_generate_key_ex

def RSA_check_key(arg1):
    return _pygmssl.RSA_check_key(arg1)
RSA_check_key = _pygmssl.RSA_check_key

def RSA_check_key_ex(arg1, cb):
    return _pygmssl.RSA_check_key_ex(arg1, cb)
RSA_check_key_ex = _pygmssl.RSA_check_key_ex

def RSA_public_encrypt(flen, arg2, to, rsa, padding):
    return _pygmssl.RSA_public_encrypt(flen, arg2, to, rsa, padding)
RSA_public_encrypt = _pygmssl.RSA_public_encrypt

def RSA_private_encrypt(flen, arg2, to, rsa, padding):
    return _pygmssl.RSA_private_encrypt(flen, arg2, to, rsa, padding)
RSA_private_encrypt = _pygmssl.RSA_private_encrypt

def RSA_public_decrypt(flen, arg2, to, rsa, padding):
    return _pygmssl.RSA_public_decrypt(flen, arg2, to, rsa, padding)
RSA_public_decrypt = _pygmssl.RSA_public_decrypt

def RSA_private_decrypt(flen, arg2, to, rsa, padding):
    return _pygmssl.RSA_private_decrypt(flen, arg2, to, rsa, padding)
RSA_private_decrypt = _pygmssl.RSA_private_decrypt

def RSA_free(r):
    return _pygmssl.RSA_free(r)
RSA_free = _pygmssl.RSA_free

def RSA_up_ref(r):
    return _pygmssl.RSA_up_ref(r)
RSA_up_ref = _pygmssl.RSA_up_ref

def RSA_flags(r):
    return _pygmssl.RSA_flags(r)
RSA_flags = _pygmssl.RSA_flags

def RSA_set_default_method(meth):
    return _pygmssl.RSA_set_default_method(meth)
RSA_set_default_method = _pygmssl.RSA_set_default_method

def RSA_get_default_method():
    return _pygmssl.RSA_get_default_method()
RSA_get_default_method = _pygmssl.RSA_get_default_method

def RSA_get_method(rsa):
    return _pygmssl.RSA_get_method(rsa)
RSA_get_method = _pygmssl.RSA_get_method

def RSA_set_method(rsa, meth):
    return _pygmssl.RSA_set_method(rsa, meth)
RSA_set_method = _pygmssl.RSA_set_method

def RSA_PKCS1_OpenSSL():
    return _pygmssl.RSA_PKCS1_OpenSSL()
RSA_PKCS1_OpenSSL = _pygmssl.RSA_PKCS1_OpenSSL

def RSA_null_method():
    return _pygmssl.RSA_null_method()
RSA_null_method = _pygmssl.RSA_null_method

def RSA_sign(type, m, m_length, sigret, siglen, rsa):
    return _pygmssl.RSA_sign(type, m, m_length, sigret, siglen, rsa)
RSA_sign = _pygmssl.RSA_sign

def RSA_verify(type, m, m_length, sigbuf, siglen, rsa):
    return _pygmssl.RSA_verify(type, m, m_length, sigbuf, siglen, rsa)
RSA_verify = _pygmssl.RSA_verify

def RSA_sign_ASN1_OCTET_STRING(type, m, m_length, sigret, siglen, rsa):
    return _pygmssl.RSA_sign_ASN1_OCTET_STRING(type, m, m_length, sigret, siglen, rsa)
RSA_sign_ASN1_OCTET_STRING = _pygmssl.RSA_sign_ASN1_OCTET_STRING

def RSA_verify_ASN1_OCTET_STRING(type, m, m_length, sigbuf, siglen, rsa):
    return _pygmssl.RSA_verify_ASN1_OCTET_STRING(type, m, m_length, sigbuf, siglen, rsa)
RSA_verify_ASN1_OCTET_STRING = _pygmssl.RSA_verify_ASN1_OCTET_STRING

def RSA_blinding_on(rsa, ctx):
    return _pygmssl.RSA_blinding_on(rsa, ctx)
RSA_blinding_on = _pygmssl.RSA_blinding_on

def RSA_blinding_off(rsa):
    return _pygmssl.RSA_blinding_off(rsa)
RSA_blinding_off = _pygmssl.RSA_blinding_off

def RSA_setup_blinding(rsa, ctx):
    return _pygmssl.RSA_setup_blinding(rsa, ctx)
RSA_setup_blinding = _pygmssl.RSA_setup_blinding

def RSA_padding_add_PKCS1_type_1(to, tlen, f, fl):
    return _pygmssl.RSA_padding_add_PKCS1_type_1(to, tlen, f, fl)
RSA_padding_add_PKCS1_type_1 = _pygmssl.RSA_padding_add_PKCS1_type_1

def RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len):
    return _pygmssl.RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len)
RSA_padding_check_PKCS1_type_1 = _pygmssl.RSA_padding_check_PKCS1_type_1

def RSA_padding_add_PKCS1_type_2(to, tlen, f, fl):
    return _pygmssl.RSA_padding_add_PKCS1_type_2(to, tlen, f, fl)
RSA_padding_add_PKCS1_type_2 = _pygmssl.RSA_padding_add_PKCS1_type_2

def RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len):
    return _pygmssl.RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len)
RSA_padding_check_PKCS1_type_2 = _pygmssl.RSA_padding_check_PKCS1_type_2

def PKCS1_MGF1(mask, len, seed, seedlen, dgst):
    return _pygmssl.PKCS1_MGF1(mask, len, seed, seedlen, dgst)
PKCS1_MGF1 = _pygmssl.PKCS1_MGF1

def RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl):
    return _pygmssl.RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl)
RSA_padding_add_PKCS1_OAEP = _pygmssl.RSA_padding_add_PKCS1_OAEP

def RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl):
    return _pygmssl.RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl)
RSA_padding_check_PKCS1_OAEP = _pygmssl.RSA_padding_check_PKCS1_OAEP

def RSA_padding_add_PKCS1_OAEP_mgf1(to, tlen, arg3, flen, param, plen, md, mgf1md):
    return _pygmssl.RSA_padding_add_PKCS1_OAEP_mgf1(to, tlen, arg3, flen, param, plen, md, mgf1md)
RSA_padding_add_PKCS1_OAEP_mgf1 = _pygmssl.RSA_padding_add_PKCS1_OAEP_mgf1

def RSA_padding_check_PKCS1_OAEP_mgf1(to, tlen, arg3, flen, num, param, plen, md, mgf1md):
    return _pygmssl.RSA_padding_check_PKCS1_OAEP_mgf1(to, tlen, arg3, flen, num, param, plen, md, mgf1md)
RSA_padding_check_PKCS1_OAEP_mgf1 = _pygmssl.RSA_padding_check_PKCS1_OAEP_mgf1

def RSA_padding_add_SSLv23(to, tlen, f, fl):
    return _pygmssl.RSA_padding_add_SSLv23(to, tlen, f, fl)
RSA_padding_add_SSLv23 = _pygmssl.RSA_padding_add_SSLv23

def RSA_padding_check_SSLv23(to, tlen, f, fl, rsa_len):
    return _pygmssl.RSA_padding_check_SSLv23(to, tlen, f, fl, rsa_len)
RSA_padding_check_SSLv23 = _pygmssl.RSA_padding_check_SSLv23

def RSA_padding_add_none(to, tlen, f, fl):
    return _pygmssl.RSA_padding_add_none(to, tlen, f, fl)
RSA_padding_add_none = _pygmssl.RSA_padding_add_none

def RSA_padding_check_none(to, tlen, f, fl, rsa_len):
    return _pygmssl.RSA_padding_check_none(to, tlen, f, fl, rsa_len)
RSA_padding_check_none = _pygmssl.RSA_padding_check_none

def RSA_padding_add_X931(to, tlen, f, fl):
    return _pygmssl.RSA_padding_add_X931(to, tlen, f, fl)
RSA_padding_add_X931 = _pygmssl.RSA_padding_add_X931

def RSA_padding_check_X931(to, tlen, f, fl, rsa_len):
    return _pygmssl.RSA_padding_check_X931(to, tlen, f, fl, rsa_len)
RSA_padding_check_X931 = _pygmssl.RSA_padding_check_X931

def RSA_X931_hash_id(nid):
    return _pygmssl.RSA_X931_hash_id(nid)
RSA_X931_hash_id = _pygmssl.RSA_X931_hash_id

def RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen):
    return _pygmssl.RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen)
RSA_verify_PKCS1_PSS = _pygmssl.RSA_verify_PKCS1_PSS

def RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen):
    return _pygmssl.RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen)
RSA_padding_add_PKCS1_PSS = _pygmssl.RSA_padding_add_PKCS1_PSS

def RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen):
    return _pygmssl.RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen)
RSA_verify_PKCS1_PSS_mgf1 = _pygmssl.RSA_verify_PKCS1_PSS_mgf1

def RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, mgf1Hash, sLen):
    return _pygmssl.RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, mgf1Hash, sLen)
RSA_padding_add_PKCS1_PSS_mgf1 = _pygmssl.RSA_padding_add_PKCS1_PSS_mgf1

def RSA_set_ex_data(r, idx, arg):
    return _pygmssl.RSA_set_ex_data(r, idx, arg)
RSA_set_ex_data = _pygmssl.RSA_set_ex_data

def RSA_get_ex_data(r, idx):
    return _pygmssl.RSA_get_ex_data(r, idx)
RSA_get_ex_data = _pygmssl.RSA_get_ex_data

def RSAPublicKey_dup(rsa):
    return _pygmssl.RSAPublicKey_dup(rsa)
RSAPublicKey_dup = _pygmssl.RSAPublicKey_dup

def RSAPrivateKey_dup(rsa):
    return _pygmssl.RSAPrivateKey_dup(rsa)
RSAPrivateKey_dup = _pygmssl.RSAPrivateKey_dup

def RSA_meth_new(name, flags):
    return _pygmssl.RSA_meth_new(name, flags)
RSA_meth_new = _pygmssl.RSA_meth_new

def RSA_meth_free(meth):
    return _pygmssl.RSA_meth_free(meth)
RSA_meth_free = _pygmssl.RSA_meth_free

def RSA_meth_dup(meth):
    return _pygmssl.RSA_meth_dup(meth)
RSA_meth_dup = _pygmssl.RSA_meth_dup

def RSA_meth_get0_name(meth):
    return _pygmssl.RSA_meth_get0_name(meth)
RSA_meth_get0_name = _pygmssl.RSA_meth_get0_name

def RSA_meth_set1_name(meth, name):
    return _pygmssl.RSA_meth_set1_name(meth, name)
RSA_meth_set1_name = _pygmssl.RSA_meth_set1_name

def RSA_meth_get_flags(meth):
    return _pygmssl.RSA_meth_get_flags(meth)
RSA_meth_get_flags = _pygmssl.RSA_meth_get_flags

def RSA_meth_set_flags(meth, flags):
    return _pygmssl.RSA_meth_set_flags(meth, flags)
RSA_meth_set_flags = _pygmssl.RSA_meth_set_flags

def ERR_load_RSA_strings():
    return _pygmssl.ERR_load_RSA_strings()
ERR_load_RSA_strings = _pygmssl.ERR_load_RSA_strings

def SEED_set_key(rawkey, ks):
    return _pygmssl.SEED_set_key(rawkey, ks)
SEED_set_key = _pygmssl.SEED_set_key

def SEED_encrypt(s, d, ks):
    return _pygmssl.SEED_encrypt(s, d, ks)
SEED_encrypt = _pygmssl.SEED_encrypt

def SEED_decrypt(s, d, ks):
    return _pygmssl.SEED_decrypt(s, d, ks)
SEED_decrypt = _pygmssl.SEED_decrypt

def SEED_ecb_encrypt(arg1, out, ks, enc):
    return _pygmssl.SEED_ecb_encrypt(arg1, out, ks, enc)
SEED_ecb_encrypt = _pygmssl.SEED_ecb_encrypt

def SEED_cbc_encrypt(arg1, out, len, ks, ivec, enc):
    return _pygmssl.SEED_cbc_encrypt(arg1, out, len, ks, ivec, enc)
SEED_cbc_encrypt = _pygmssl.SEED_cbc_encrypt

def SEED_cfb128_encrypt(arg1, out, len, ks, ivec, num, enc):
    return _pygmssl.SEED_cfb128_encrypt(arg1, out, len, ks, ivec, num, enc)
SEED_cfb128_encrypt = _pygmssl.SEED_cfb128_encrypt

def SEED_ofb128_encrypt(arg1, out, len, ks, ivec, num):
    return _pygmssl.SEED_ofb128_encrypt(arg1, out, len, ks, ivec, num)
SEED_ofb128_encrypt = _pygmssl.SEED_ofb128_encrypt

def serpent_set_encrypt_key(key, user_key):
    return _pygmssl.serpent_set_encrypt_key(key, user_key)
serpent_set_encrypt_key = _pygmssl.serpent_set_encrypt_key

def serpent_set_decrypt_key(key, user_key):
    return _pygmssl.serpent_set_decrypt_key(key, user_key)
serpent_set_decrypt_key = _pygmssl.serpent_set_decrypt_key

def serpent_encrypt(arg1, out, key):
    return _pygmssl.serpent_encrypt(arg1, out, key)
serpent_encrypt = _pygmssl.serpent_encrypt

def serpent_decrypt(arg1, out, key):
    return _pygmssl.serpent_decrypt(arg1, out, key)
serpent_decrypt = _pygmssl.serpent_decrypt

def SHA1_Init(c):
    return _pygmssl.SHA1_Init(c)
SHA1_Init = _pygmssl.SHA1_Init

def SHA1_Update(c, data, len):
    return _pygmssl.SHA1_Update(c, data, len)
SHA1_Update = _pygmssl.SHA1_Update

def SHA1_Final(md, c):
    return _pygmssl.SHA1_Final(md, c)
SHA1_Final = _pygmssl.SHA1_Final

def SHA1(d, n, md):
    return _pygmssl.SHA1(d, n, md)
SHA1 = _pygmssl.SHA1

def SHA1_Transform(c, data):
    return _pygmssl.SHA1_Transform(c, data)
SHA1_Transform = _pygmssl.SHA1_Transform

def SHA224_Init(c):
    return _pygmssl.SHA224_Init(c)
SHA224_Init = _pygmssl.SHA224_Init

def SHA224_Update(c, data, len):
    return _pygmssl.SHA224_Update(c, data, len)
SHA224_Update = _pygmssl.SHA224_Update

def SHA224_Final(md, c):
    return _pygmssl.SHA224_Final(md, c)
SHA224_Final = _pygmssl.SHA224_Final

def SHA224(d, n, md):
    return _pygmssl.SHA224(d, n, md)
SHA224 = _pygmssl.SHA224

def SHA256_Init(c):
    return _pygmssl.SHA256_Init(c)
SHA256_Init = _pygmssl.SHA256_Init

def SHA256_Update(c, data, len):
    return _pygmssl.SHA256_Update(c, data, len)
SHA256_Update = _pygmssl.SHA256_Update

def SHA256_Final(md, c):
    return _pygmssl.SHA256_Final(md, c)
SHA256_Final = _pygmssl.SHA256_Final

def SHA256(d, n, md):
    return _pygmssl.SHA256(d, n, md)
SHA256 = _pygmssl.SHA256

def SHA256_Transform(c, data):
    return _pygmssl.SHA256_Transform(c, data)
SHA256_Transform = _pygmssl.SHA256_Transform

def SHA384_Init(c):
    return _pygmssl.SHA384_Init(c)
SHA384_Init = _pygmssl.SHA384_Init

def SHA384_Update(c, data, len):
    return _pygmssl.SHA384_Update(c, data, len)
SHA384_Update = _pygmssl.SHA384_Update

def SHA384_Final(md, c):
    return _pygmssl.SHA384_Final(md, c)
SHA384_Final = _pygmssl.SHA384_Final

def SHA384(d, n, md):
    return _pygmssl.SHA384(d, n, md)
SHA384 = _pygmssl.SHA384

def SHA512_Init(c):
    return _pygmssl.SHA512_Init(c)
SHA512_Init = _pygmssl.SHA512_Init

def SHA512_Update(c, data, len):
    return _pygmssl.SHA512_Update(c, data, len)
SHA512_Update = _pygmssl.SHA512_Update

def SHA512_Final(md, c):
    return _pygmssl.SHA512_Final(md, c)
SHA512_Final = _pygmssl.SHA512_Final

def SHA512(d, n, md):
    return _pygmssl.SHA512(d, n, md)
SHA512 = _pygmssl.SHA512

def SHA512_Transform(c, data):
    return _pygmssl.SHA512_Transform(c, data)
SHA512_Transform = _pygmssl.SHA512_Transform

def SM2_compute_id_digest(md, id, idlen, out, outlen, ec_key):
    return _pygmssl.SM2_compute_id_digest(md, id, idlen, out, outlen, ec_key)
SM2_compute_id_digest = _pygmssl.SM2_compute_id_digest

def SM2_compute_message_digest(id_md, msg_md, msg, msglen, id, idlen, out, outlen, ec_key):
    return _pygmssl.SM2_compute_message_digest(id_md, msg_md, msg, msglen, id, idlen, out, outlen, ec_key)
SM2_compute_message_digest = _pygmssl.SM2_compute_message_digest

def SM2_sign_setup(ec_key, ctx, a, b):
    return _pygmssl.SM2_sign_setup(ec_key, ctx, a, b)
SM2_sign_setup = _pygmssl.SM2_sign_setup

def SM2_do_sign_ex(dgst, dgstlen, a, b, ec_key):
    return _pygmssl.SM2_do_sign_ex(dgst, dgstlen, a, b, ec_key)
SM2_do_sign_ex = _pygmssl.SM2_do_sign_ex

def SM2_do_sign(dgst, dgst_len, ec_key):
    return _pygmssl.SM2_do_sign(dgst, dgst_len, ec_key)
SM2_do_sign = _pygmssl.SM2_do_sign

def SM2_do_verify(dgst, dgstlen, sig, ec_key):
    return _pygmssl.SM2_do_verify(dgst, dgstlen, sig, ec_key)
SM2_do_verify = _pygmssl.SM2_do_verify

def SM2_sign_ex(type, dgst, dgstlen, sig, siglen, k, x, ec_key):
    return _pygmssl.SM2_sign_ex(type, dgst, dgstlen, sig, siglen, k, x, ec_key)
SM2_sign_ex = _pygmssl.SM2_sign_ex

def SM2_sign(type, dgst, dgstlen, sig, siglen, eckey):
    return _pygmssl.SM2_sign(type, dgst, dgstlen, sig, siglen, eckey)
SM2_sign = _pygmssl.SM2_sign

def SM2_verify(type, dgst, dgstlen, sig, siglen, ec_key):
    return _pygmssl.SM2_verify(type, dgst, dgstlen, sig, siglen, ec_key)
SM2_verify = _pygmssl.SM2_verify

def i2o_SM2CiphertextValue(group, cv, pout):
    return _pygmssl.i2o_SM2CiphertextValue(group, cv, pout)
i2o_SM2CiphertextValue = _pygmssl.i2o_SM2CiphertextValue

def o2i_SM2CiphertextValue(group, md, cv, pin, len):
    return _pygmssl.o2i_SM2CiphertextValue(group, md, cv, pin, len)
o2i_SM2CiphertextValue = _pygmssl.o2i_SM2CiphertextValue

def SM2_do_encrypt(md, arg2, inlen, ec_key):
    return _pygmssl.SM2_do_encrypt(md, arg2, inlen, ec_key)
SM2_do_encrypt = _pygmssl.SM2_do_encrypt

def SM2_do_decrypt(md, arg2, out, outlen, ec_key):
    return _pygmssl.SM2_do_decrypt(md, arg2, out, outlen, ec_key)
SM2_do_decrypt = _pygmssl.SM2_do_decrypt

def SM2_encrypt(type, arg2, inlen, out, outlen, ec_key):
    return _pygmssl.SM2_encrypt(type, arg2, inlen, out, outlen, ec_key)
SM2_encrypt = _pygmssl.SM2_encrypt

def SM2_decrypt(type, arg2, inlen, out, outlen, ec_key):
    return _pygmssl.SM2_decrypt(type, arg2, inlen, out, outlen, ec_key)
SM2_decrypt = _pygmssl.SM2_decrypt

def SM2CiphertextValue_size(group, inlen):
    return _pygmssl.SM2CiphertextValue_size(group, inlen)
SM2CiphertextValue_size = _pygmssl.SM2CiphertextValue_size

def SM2_compute_share_key(out, outlen, peer_ephem, ephem, peer_pk, peer_z, peer_zlen, z, zlen, sk, initiator):
    return _pygmssl.SM2_compute_share_key(out, outlen, peer_ephem, ephem, peer_pk, peer_z, peer_zlen, z, zlen, sk, initiator)
SM2_compute_share_key = _pygmssl.SM2_compute_share_key

def SM2_KAP_CTX_init(ctx, ec_key, id, idlen, remote_pubkey, rid, ridlen, is_initiator, do_checksum):
    return _pygmssl.SM2_KAP_CTX_init(ctx, ec_key, id, idlen, remote_pubkey, rid, ridlen, is_initiator, do_checksum)
SM2_KAP_CTX_init = _pygmssl.SM2_KAP_CTX_init

def SM2_KAP_prepare(ctx, ephem_point, ephem_point_len):
    return _pygmssl.SM2_KAP_prepare(ctx, ephem_point, ephem_point_len)
SM2_KAP_prepare = _pygmssl.SM2_KAP_prepare

def SM2_KAP_compute_key(ctx, remote_ephem_point, remote_ephem_point_len, key, keylen, checksum, checksumlen):
    return _pygmssl.SM2_KAP_compute_key(ctx, remote_ephem_point, remote_ephem_point_len, key, keylen, checksum, checksumlen)
SM2_KAP_compute_key = _pygmssl.SM2_KAP_compute_key

def SM2_KAP_final_check(ctx, checksum, checksumlen):
    return _pygmssl.SM2_KAP_final_check(ctx, checksum, checksumlen)
SM2_KAP_final_check = _pygmssl.SM2_KAP_final_check

def SM2_KAP_CTX_cleanup(ctx):
    return _pygmssl.SM2_KAP_CTX_cleanup(ctx)
SM2_KAP_CTX_cleanup = _pygmssl.SM2_KAP_CTX_cleanup

def EC_KEY_GmSSL():
    return _pygmssl.EC_KEY_GmSSL()
EC_KEY_GmSSL = _pygmssl.EC_KEY_GmSSL

def EC_KEY_set_default_secg_method():
    return _pygmssl.EC_KEY_set_default_secg_method()
EC_KEY_set_default_secg_method = _pygmssl.EC_KEY_set_default_secg_method

def EC_KEY_set_default_sm_method():
    return _pygmssl.EC_KEY_set_default_sm_method()
EC_KEY_set_default_sm_method = _pygmssl.EC_KEY_set_default_sm_method

def EC_KEY_METHOD_type(meth):
    return _pygmssl.EC_KEY_METHOD_type(meth)
EC_KEY_METHOD_type = _pygmssl.EC_KEY_METHOD_type

def sm3_init(ctx):
    return _pygmssl.sm3_init(ctx)
sm3_init = _pygmssl.sm3_init

def sm3_update(ctx, data, data_len):
    return _pygmssl.sm3_update(ctx, data, data_len)
sm3_update = _pygmssl.sm3_update

def sm3_final(ctx, digest):
    return _pygmssl.sm3_final(ctx, digest)
sm3_final = _pygmssl.sm3_final

def sm3_compress(digest, block):
    return _pygmssl.sm3_compress(digest, block)
sm3_compress = _pygmssl.sm3_compress

def sm3(data, datalen, digest):
    return _pygmssl.sm3(data, datalen, digest)
sm3 = _pygmssl.sm3

def sm3_hmac_init(ctx, key, key_len):
    return _pygmssl.sm3_hmac_init(ctx, key, key_len)
sm3_hmac_init = _pygmssl.sm3_hmac_init

def sm3_hmac_update(ctx, data, data_len):
    return _pygmssl.sm3_hmac_update(ctx, data, data_len)
sm3_hmac_update = _pygmssl.sm3_hmac_update

def sm3_hmac_final(ctx, mac):
    return _pygmssl.sm3_hmac_final(ctx, mac)
sm3_hmac_final = _pygmssl.sm3_hmac_final

def sm3_hmac(data, data_len, key, key_len, mac):
    return _pygmssl.sm3_hmac(data, data_len, key, key_len, mac)
sm3_hmac = _pygmssl.sm3_hmac

def SM9_setup_by_pairing_name(nid, hid, mpk, msk):
    return _pygmssl.SM9_setup_by_pairing_name(nid, hid, mpk, msk)
SM9_setup_by_pairing_name = _pygmssl.SM9_setup_by_pairing_name

def SM9_extract_private_key(mpk, msk, id, idlen):
    return _pygmssl.SM9_extract_private_key(mpk, msk, id, idlen)
SM9_extract_private_key = _pygmssl.SM9_extract_private_key

def SM9_extract_public_key(mpk, id, idlen):
    return _pygmssl.SM9_extract_public_key(mpk, id, idlen)
SM9_extract_public_key = _pygmssl.SM9_extract_public_key

def SM9PrivateKey_get_public_key(mpk, sk):
    return _pygmssl.SM9PrivateKey_get_public_key(mpk, sk)
SM9PrivateKey_get_public_key = _pygmssl.SM9PrivateKey_get_public_key

def SM9PrivateKey_get_gmtls_public_key(mpk, sk, pub_key):
    return _pygmssl.SM9PrivateKey_get_gmtls_public_key(mpk, sk, pub_key)
SM9PrivateKey_get_gmtls_public_key = _pygmssl.SM9PrivateKey_get_gmtls_public_key

def SM9PublicKey_get_gmtls_encoded(mpk, pk, encoded):
    return _pygmssl.SM9PublicKey_get_gmtls_encoded(mpk, pk, encoded)
SM9PublicKey_get_gmtls_encoded = _pygmssl.SM9PublicKey_get_gmtls_encoded

def SM9_do_encrypt_ex(mpk, encparams, arg3, inlen, pk):
    return _pygmssl.SM9_do_encrypt_ex(mpk, encparams, arg3, inlen, pk)
SM9_do_encrypt_ex = _pygmssl.SM9_do_encrypt_ex

def SM9_do_encrypt(mpk, encparams, arg3, inlen, id, idlen):
    return _pygmssl.SM9_do_encrypt(mpk, encparams, arg3, inlen, id, idlen)
SM9_do_encrypt = _pygmssl.SM9_do_encrypt

def SM9_do_decrypt(mpk, encparams, arg3, out, outlen, sk, id, idlen):
    return _pygmssl.SM9_do_decrypt(mpk, encparams, arg3, out, outlen, sk, id, idlen)
SM9_do_decrypt = _pygmssl.SM9_do_decrypt

def SM9_encrypt_ex(mpk, encparams, arg3, inlen, out, outlen, pk):
    return _pygmssl.SM9_encrypt_ex(mpk, encparams, arg3, inlen, out, outlen, pk)
SM9_encrypt_ex = _pygmssl.SM9_encrypt_ex

def SM9_encrypt(mpk, encparams, arg3, inlen, out, outlen, id, idlen):
    return _pygmssl.SM9_encrypt(mpk, encparams, arg3, inlen, out, outlen, id, idlen)
SM9_encrypt = _pygmssl.SM9_encrypt

def SM9_decrypt(mpk, encparams, arg3, inlen, out, outlen, sk, id, idlen):
    return _pygmssl.SM9_decrypt(mpk, encparams, arg3, inlen, out, outlen, sk, id, idlen)
SM9_decrypt = _pygmssl.SM9_decrypt

def SM9_encrypt_with_recommended_ex(mpk, arg2, inlen, out, outlen, pk):
    return _pygmssl.SM9_encrypt_with_recommended_ex(mpk, arg2, inlen, out, outlen, pk)
SM9_encrypt_with_recommended_ex = _pygmssl.SM9_encrypt_with_recommended_ex

def SM9_encrypt_with_recommended(mpk, arg2, inlen, out, outlen, id, idlen):
    return _pygmssl.SM9_encrypt_with_recommended(mpk, arg2, inlen, out, outlen, id, idlen)
SM9_encrypt_with_recommended = _pygmssl.SM9_encrypt_with_recommended

def SM9_decrypt_with_recommended(mpk, arg2, inlen, out, outlen, sk, id, idlen):
    return _pygmssl.SM9_decrypt_with_recommended(mpk, arg2, inlen, out, outlen, sk, id, idlen)
SM9_decrypt_with_recommended = _pygmssl.SM9_decrypt_with_recommended

def SM9_signature_size(mpk):
    return _pygmssl.SM9_signature_size(mpk)
SM9_signature_size = _pygmssl.SM9_signature_size

def SM9_do_sign(mpk, dgst, dgstlen, sk):
    return _pygmssl.SM9_do_sign(mpk, dgst, dgstlen, sk)
SM9_do_sign = _pygmssl.SM9_do_sign

def SM9_do_verify_ex(mpk, dgst, dgstlen, sig, pk):
    return _pygmssl.SM9_do_verify_ex(mpk, dgst, dgstlen, sig, pk)
SM9_do_verify_ex = _pygmssl.SM9_do_verify_ex

def SM9_do_verify(mpk, dgst, dgstlen, sig, id, idlen):
    return _pygmssl.SM9_do_verify(mpk, dgst, dgstlen, sig, id, idlen)
SM9_do_verify = _pygmssl.SM9_do_verify

def SM9_sign(mpk, dgst, dgstlen, sig, siglen, sk):
    return _pygmssl.SM9_sign(mpk, dgst, dgstlen, sig, siglen, sk)
SM9_sign = _pygmssl.SM9_sign

def SM9_verify_ex(mpk, dgst, dgstlen, sig, siglen, pk):
    return _pygmssl.SM9_verify_ex(mpk, dgst, dgstlen, sig, siglen, pk)
SM9_verify_ex = _pygmssl.SM9_verify_ex

def SM9_verify(mpk, dgst, dgstlen, sig, siglen, id, idlen):
    return _pygmssl.SM9_verify(mpk, dgst, dgstlen, sig, siglen, id, idlen)
SM9_verify = _pygmssl.SM9_verify

def SM9_generate_key_exchange(mpk, peer_id, peer_idlen, r):
    return _pygmssl.SM9_generate_key_exchange(mpk, peer_id, peer_idlen, r)
SM9_generate_key_exchange = _pygmssl.SM9_generate_key_exchange

def SM9_compute_share_key(mpk, out, outlen, peer_id, peer_idlen, peer_exch, id, idlen, exch, sk, initiator):
    return _pygmssl.SM9_compute_share_key(mpk, out, outlen, peer_id, peer_idlen, peer_exch, id, idlen, exch, sk, initiator)
SM9_compute_share_key = _pygmssl.SM9_compute_share_key

def ERR_load_SM9_strings():
    return _pygmssl.ERR_load_SM9_strings()
ERR_load_SM9_strings = _pygmssl.ERR_load_SM9_strings

def sms4_set_encrypt_key(key, user_key):
    return _pygmssl.sms4_set_encrypt_key(key, user_key)
sms4_set_encrypt_key = _pygmssl.sms4_set_encrypt_key

def sms4_set_decrypt_key(key, user_key):
    return _pygmssl.sms4_set_decrypt_key(key, user_key)
sms4_set_decrypt_key = _pygmssl.sms4_set_decrypt_key

def sms4_encrypt(arg1, out, key):
    return _pygmssl.sms4_encrypt(arg1, out, key)
sms4_encrypt = _pygmssl.sms4_encrypt

def sms4_encrypt_init(key):
    return _pygmssl.sms4_encrypt_init(key)
sms4_encrypt_init = _pygmssl.sms4_encrypt_init

def sms4_encrypt_8blocks(arg1, out, key):
    return _pygmssl.sms4_encrypt_8blocks(arg1, out, key)
sms4_encrypt_8blocks = _pygmssl.sms4_encrypt_8blocks

def sms4_encrypt_16blocks(arg1, out, key):
    return _pygmssl.sms4_encrypt_16blocks(arg1, out, key)
sms4_encrypt_16blocks = _pygmssl.sms4_encrypt_16blocks

def sms4_ecb_encrypt(arg1, out, key, enc):
    return _pygmssl.sms4_ecb_encrypt(arg1, out, key, enc)
sms4_ecb_encrypt = _pygmssl.sms4_ecb_encrypt

def sms4_cbc_encrypt(arg1, out, len, key, iv, enc):
    return _pygmssl.sms4_cbc_encrypt(arg1, out, len, key, iv, enc)
sms4_cbc_encrypt = _pygmssl.sms4_cbc_encrypt

def sms4_cfb128_encrypt(arg1, out, len, key, iv, num, enc):
    return _pygmssl.sms4_cfb128_encrypt(arg1, out, len, key, iv, num, enc)
sms4_cfb128_encrypt = _pygmssl.sms4_cfb128_encrypt

def sms4_ofb128_encrypt(arg1, out, len, key, iv, num):
    return _pygmssl.sms4_ofb128_encrypt(arg1, out, len, key, iv, num)
sms4_ofb128_encrypt = _pygmssl.sms4_ofb128_encrypt

def sms4_ctr128_encrypt(arg1, out, len, key, iv, ecount_buf, num):
    return _pygmssl.sms4_ctr128_encrypt(arg1, out, len, key, iv, ecount_buf, num)
sms4_ctr128_encrypt = _pygmssl.sms4_ctr128_encrypt

def sms4_wrap_key(key, iv, out, arg4, inlen):
    return _pygmssl.sms4_wrap_key(key, iv, out, arg4, inlen)
sms4_wrap_key = _pygmssl.sms4_wrap_key

def sms4_unwrap_key(key, iv, out, arg4, inlen):
    return _pygmssl.sms4_unwrap_key(key, iv, out, arg4, inlen)
sms4_unwrap_key = _pygmssl.sms4_unwrap_key

def speck_set_encrypt_key16(user, key):
    return _pygmssl.speck_set_encrypt_key16(user, key)
speck_set_encrypt_key16 = _pygmssl.speck_set_encrypt_key16

def speck_set_decrypt_key16(user, key):
    return _pygmssl.speck_set_decrypt_key16(user, key)
speck_set_decrypt_key16 = _pygmssl.speck_set_decrypt_key16

def speck_encrypt16(pt, ct, K):
    return _pygmssl.speck_encrypt16(pt, ct, K)
speck_encrypt16 = _pygmssl.speck_encrypt16

def speck_decrypt16(ct, pt, K):
    return _pygmssl.speck_decrypt16(ct, pt, K)
speck_decrypt16 = _pygmssl.speck_decrypt16

def speck_set_encrypt_key32(user, key):
    return _pygmssl.speck_set_encrypt_key32(user, key)
speck_set_encrypt_key32 = _pygmssl.speck_set_encrypt_key32

def speck_set_decrypt_key32(user, key):
    return _pygmssl.speck_set_decrypt_key32(user, key)
speck_set_decrypt_key32 = _pygmssl.speck_set_decrypt_key32

def speck_encrypt32(pt, ct, K):
    return _pygmssl.speck_encrypt32(pt, ct, K)
speck_encrypt32 = _pygmssl.speck_encrypt32

def speck_decrypt32(ct, pt, K):
    return _pygmssl.speck_decrypt32(ct, pt, K)
speck_decrypt32 = _pygmssl.speck_decrypt32

def speck_set_encrypt_key64(user, key):
    return _pygmssl.speck_set_encrypt_key64(user, key)
speck_set_encrypt_key64 = _pygmssl.speck_set_encrypt_key64

def speck_set_decrypt_key64(user, key):
    return _pygmssl.speck_set_decrypt_key64(user, key)
speck_set_decrypt_key64 = _pygmssl.speck_set_decrypt_key64

def speck_encrypt64(pt, ct, K):
    return _pygmssl.speck_encrypt64(pt, ct, K)
speck_encrypt64 = _pygmssl.speck_encrypt64

def speck_decrypt64(ct, pt, K):
    return _pygmssl.speck_decrypt64(ct, pt, K)
speck_decrypt64 = _pygmssl.speck_decrypt64

def SRP_VBASE_new(seed_key):
    return _pygmssl.SRP_VBASE_new(seed_key)
SRP_VBASE_new = _pygmssl.SRP_VBASE_new

def SRP_VBASE_free(vb):
    return _pygmssl.SRP_VBASE_free(vb)
SRP_VBASE_free = _pygmssl.SRP_VBASE_free

def SRP_VBASE_init(vb, verifier_file):
    return _pygmssl.SRP_VBASE_init(vb, verifier_file)
SRP_VBASE_init = _pygmssl.SRP_VBASE_init

def SRP_VBASE_get1_by_user(vb, username):
    return _pygmssl.SRP_VBASE_get1_by_user(vb, username)
SRP_VBASE_get1_by_user = _pygmssl.SRP_VBASE_get1_by_user

def SRP_create_verifier(user, arg2, salt, verifier, N, g):
    return _pygmssl.SRP_create_verifier(user, arg2, salt, verifier, N, g)
SRP_create_verifier = _pygmssl.SRP_create_verifier

def SRP_create_verifier_BN(user, arg2, salt, verifier, N, g):
    return _pygmssl.SRP_create_verifier_BN(user, arg2, salt, verifier, N, g)
SRP_create_verifier_BN = _pygmssl.SRP_create_verifier_BN

def SRP_check_known_gN_param(g, N):
    return _pygmssl.SRP_check_known_gN_param(g, N)
SRP_check_known_gN_param = _pygmssl.SRP_check_known_gN_param

def SRP_get_default_gN(id):
    return _pygmssl.SRP_get_default_gN(id)
SRP_get_default_gN = _pygmssl.SRP_get_default_gN

def SRP_Calc_server_key(A, v, u, b, N):
    return _pygmssl.SRP_Calc_server_key(A, v, u, b, N)
SRP_Calc_server_key = _pygmssl.SRP_Calc_server_key

def SRP_Calc_B(b, N, g, v):
    return _pygmssl.SRP_Calc_B(b, N, g, v)
SRP_Calc_B = _pygmssl.SRP_Calc_B

def SRP_Verify_A_mod_N(A, N):
    return _pygmssl.SRP_Verify_A_mod_N(A, N)
SRP_Verify_A_mod_N = _pygmssl.SRP_Verify_A_mod_N

def SRP_Calc_u(A, B, N):
    return _pygmssl.SRP_Calc_u(A, B, N)
SRP_Calc_u = _pygmssl.SRP_Calc_u

def SRP_Calc_x(s, user, arg3):
    return _pygmssl.SRP_Calc_x(s, user, arg3)
SRP_Calc_x = _pygmssl.SRP_Calc_x

def SRP_Calc_A(a, N, g):
    return _pygmssl.SRP_Calc_A(a, N, g)
SRP_Calc_A = _pygmssl.SRP_Calc_A

def SRP_Calc_client_key(N, B, g, x, a, u):
    return _pygmssl.SRP_Calc_client_key(N, B, g, x, a, u)
SRP_Calc_client_key = _pygmssl.SRP_Calc_client_key

def SRP_Verify_B_mod_N(B, N):
    return _pygmssl.SRP_Verify_B_mod_N(B, N)
SRP_Verify_B_mod_N = _pygmssl.SRP_Verify_B_mod_N

def WHIRLPOOL_Init(c):
    return _pygmssl.WHIRLPOOL_Init(c)
WHIRLPOOL_Init = _pygmssl.WHIRLPOOL_Init

def WHIRLPOOL_Update(c, inp, bytes):
    return _pygmssl.WHIRLPOOL_Update(c, inp, bytes)
WHIRLPOOL_Update = _pygmssl.WHIRLPOOL_Update

def WHIRLPOOL_BitUpdate(c, inp, bits):
    return _pygmssl.WHIRLPOOL_BitUpdate(c, inp, bits)
WHIRLPOOL_BitUpdate = _pygmssl.WHIRLPOOL_BitUpdate

def WHIRLPOOL_Final(md, c):
    return _pygmssl.WHIRLPOOL_Final(md, c)
WHIRLPOOL_Final = _pygmssl.WHIRLPOOL_Final

def WHIRLPOOL(inp, bytes, md):
    return _pygmssl.WHIRLPOOL(inp, bytes, md)
WHIRLPOOL = _pygmssl.WHIRLPOOL

def ZUC_set_key(key, user_key, iv):
    return _pygmssl.ZUC_set_key(key, user_key, iv)
ZUC_set_key = _pygmssl.ZUC_set_key

def ZUC_generate_keystream(key, nwords, words):
    return _pygmssl.ZUC_generate_keystream(key, nwords, words)
ZUC_generate_keystream = _pygmssl.ZUC_generate_keystream

def ZUC_generate_keyword(key):
    return _pygmssl.ZUC_generate_keyword(key)
ZUC_generate_keyword = _pygmssl.ZUC_generate_keyword

def ZUC_128eea3_set_key(ctx, user_key, count, bearer, direction):
    return _pygmssl.ZUC_128eea3_set_key(ctx, user_key, count, bearer, direction)
ZUC_128eea3_set_key = _pygmssl.ZUC_128eea3_set_key

def ZUC_128eea3_encrypt(ctx, len, arg3, out):
    return _pygmssl.ZUC_128eea3_encrypt(ctx, len, arg3, out)
ZUC_128eea3_encrypt = _pygmssl.ZUC_128eea3_encrypt

def ZUC_128eea3(key, count, bearer, direction, len, arg6, out):
    return _pygmssl.ZUC_128eea3(key, count, bearer, direction, len, arg6, out)
ZUC_128eea3 = _pygmssl.ZUC_128eea3

def ZUC_128eia3_set_key(ctx, user_key, count, bearer, direction):
    return _pygmssl.ZUC_128eia3_set_key(ctx, user_key, count, bearer, direction)
ZUC_128eia3_set_key = _pygmssl.ZUC_128eia3_set_key

def ZUC_128eia3_update(ctx, data, datalen):
    return _pygmssl.ZUC_128eia3_update(ctx, data, datalen)
ZUC_128eia3_update = _pygmssl.ZUC_128eia3_update

def ZUC_128eia3_final(ctx, mac):
    return _pygmssl.ZUC_128eia3_final(ctx, mac)
ZUC_128eia3_final = _pygmssl.ZUC_128eia3_final

def ZUC_128eia3(key, count, bearer, direction, data, dlen, mac):
    return _pygmssl.ZUC_128eia3(key, count, bearer, direction, data, dlen, mac)
ZUC_128eia3 = _pygmssl.ZUC_128eia3
# This file is compatible with both classic and new-style classes.


