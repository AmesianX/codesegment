cat /proc/3083/maps | grep so | awk {'print $6'} | uniq   获取进程加载动态库
find / | grep syscalls.h | while read LINE; do ls -al $LINE; done  对命令结果的每行做操作

函数计时
#!/bin/bash
time1=$(date +%s)
i=0;
while [ $i -lt 1000 ];
do
    #nslookup 10.152.90.41 > /dev/null
    i=$[$i+1];
done
time2=$(date +%s)
echo $(( $time2 - $time1 ))

# 获取父进程
function getppid() { echo `cat /proc/$1/stat | awk {'print $4'}`; }
function getpidname() { echo `awk -F'\0' '{print $1}' /proc/$1/cmdline`; }
function getpidloop() { curpid=${PPID}; while true; do echo ${curpid} $(getpidname ${curpid}); curpid=$(getppid ${curpid}); if [ ${curpid} -eq 1 ]; then break; fi; done; }

function listwebfile() { curl -s $1/ | sed -n -E "s/.*href=[^>]+>([^<]+)[^ ]*(.*)/\\1\\2/p"; }

# 从web目录读取文件列表
curl -s $1/ | sed -n -E "s/.*href=[^>]+>([^<]+).*/\\1/p" | sed ':a;N;$!ba;s/\n/\t/g'

# python ip整数和点分十进制转化
def dot2ipint(ip):
    import socket, struct
    return struct.unpack("=I", socket.inet_aton("10.143.130.42"))[0]
def ipint2dot(ip):
    import socket, struct
    return socket.inet_ntoa(struct.pack("=I", ip))
 
# 获取所有so导出函数
(find /lib64/*.so /usr/lib64/*.so | while read l;  do nm -D $l | grep "\\(W\|T\\)" | awk '{print $3}' | sed /^$/d | sed /^_/d | while read x;  do echo $l ${x}; done; done) >> /tmp/symbols

# 安装所有msys2包
pacman -Ss | awk '{if(NR%2==1) print $1}' | while read l; do
    echo Y | pacman -Sy $l;
    
find_proc() {
	for item in $(ls /proc); do
	  if [ ! -d /proc/$item/fd ]; then
		continue
	  fi
	  count=`ls /proc/$item/fd | wc -w`
	  if [ $count -gt 100 ]; then 
		echo "too many fd:" $item, $count
	  fi
	  if grep -q libsocket /proc/$item/maps; then
		echo "contain mod" $item
	  fi
	done
}

function get_random_ip() {
  echo $(dd if=/dev/urandom bs=4 count=1 2>/dev/null | od -An -tu1 | sed -e 's/^ *//' -e 's/  */./g')
}

function get_random_port() {
  echo $(od -A n -N 2 -t u2 /dev/urandom)
}

function get_all_elfs() {
  find / -type f -exec file {} + | grep ELF | awk '{split($0,a,":");print a[1]}'
}

# 自定义rm函数
# 0.说明：此函数用于覆盖Linux shell的rm命令
# 1.生效方式：将该函数直接写入/etc/profile中，或使用脚本方式以source命令引入到/etc/profile中。
#   新登陆用户直接生效，已登录用户执行source /etc/profile即可生效。
# 2.函数提供对敏感目录保护，禁止删除根目录及一级目录
# 3.如果rm命令指定-R/-r/--recursive的递归删除选项，则替换为mv命令，保存在~/.trash/日期/时间/ 下，
#   这样才有写入权限且不会产生文件覆盖问题
# 4.去除代码注释时，只对递归选项-R/-r/--recursive执行mv命令，否则强制执行mv领命
# 注意：如果~/.bashrc ~/.bash_profile等文件中存在影响本函数使用的语句(如alias rm)时需要删除

function rm() {
  oriargs=("${@:1}")
  isrecurse=false
  isforce=false
  files=()
  for i in "$@"; do
    case $i in
      -r|-R|--recursize)
        isrecurse=true
        shift
      ;;
      -f|--force)
        isforce=true
        shift
      ;;
      --*)
        shift
      ;;
      -*) {
        if [[ $i == *[r\|R]* ]]; then 
            isrecurse=true
        fi
        if [[ $i == *f* ]]; then 
            isforce=true
        fi
      }
      shift
      ;;
      *) {
        if [[ ! $i =~ ^/[^/]*$ ]]; then 
            files[$((${#files[@]}+1))]=$i
        else
            echo skip sensitive $i
        fi
      }
      ;;
    esac
  done
  #if $isrecurse; then
    if $isforce; then 
        forceflag=-f
    fi
    if [[ ${#files[@]} > 0 ]]; then 
	    newdir=~/.trash/$(date "+%Y_%m_%d")/$(date "+%H%M%S%N")
        mkdir -p $newdir
        echo /bin/mv ${forceflag} ${files[*]} $newdir/
        output=$(/bin/mv ${forceflag} ${files[*]} $newdir/)
        retval=$?
    fi
  #else
  #  output=$(/bin/rm ${oriargs})
  #  retval=$?
  #fi
  echo $output
  return $retval
}


