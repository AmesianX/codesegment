# find all api call from range(begin, end) for each function

begin = 0x71AA50
end = 0x824870

skip_name = ['___modsi3', '___umodsi3', '_dispatch_once', 'memcpy', '__Unwind_SjLj_Resume', '__Unwind_SjLj_Register', '__Unwind_SjLj_Unregister', '_memset', '___stack_chk_fail', '_pthread_mutex_init', '_arc4random', '_dispatch_get_global_queue', '_dispatch_async', '_dispatch_semaphore_signal', '_dispatch_time', '_dispatch_semaphore_wait', '_malloc', '___memset_chk', '__Block_object_assign', '_calloc', '_free', '_memcpy', '_pthread_mutex_lock', '_dispatch_semaphore_create', '___udivsi3', '___fixdfdi',]

inc_lib = ['/usr/lib/libxml2.2.dylib', '/usr/lib/libsqlite3.dylib', '/usr/lib/libSystem.B.dylib', '/System/Library/Frameworks/CFNetwork.framework/CFNetwork', '/System/Library/Frameworks/Foundation.framework/Foundation']

# get all import functions
def get_import_funcnames():
    implist = []
    def imp_cb(ea, name, ord):
        if not name:
            pass
        elif name not in skip_name and not name.startswith("_objc"):
            implist.append(name)
        return True
    
    nimps = ida_nalt.get_import_module_qty()
    for i in range(0, nimps):
        modname = ida_nalt.get_import_module_name(i)
        if modname in inc_lib:
            ida_nalt.enum_import_names(i, imp_cb)
    return implist

# tranverse function
def get_all_funcs(begin, end):
    funclist = []
    pos = begin - 1
    while pos <= end:
        pos = get_next_func(pos)
        funclist.append(pos)
    return funclist

funclist = get_all_funcs(begin, end)
implist = get_import_funcnames()

count = 0
hitmap = {}
for funcbegin in funclist:
    hitmap[funcbegin] = []
    funcend = get_func_attr(funcbegin, FUNCATTR_END)
    posbegin = funcbegin
    posend = funcend
    while posbegin < posend:
        line = GetDisasm(posbegin)
        if line.startswith("BL"):
            funcname = line.split(" ")[-1]
            if funcname in implist:
                hitmap[funcbegin].append(funcname)
        inslen = ida_ua.decode_insn(posbegin)
        if inslen < 2:
            inslen = 2
        posbegin = posbegin + inslen
    count = count + 1
    print "processed %x/%d/%d" % (funcbegin, count, len(funclist))
for key in hitmap:
    if len(hitmap[key]) > 0:
        print "%x %s" % (key, hitmap[key])
